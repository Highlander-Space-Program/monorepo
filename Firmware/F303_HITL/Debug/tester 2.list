
tester 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004468  08004468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a0  080044a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044a0  080044a0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044a0  080044a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a0  080044a0  000054a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000100  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9d2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b58  00000000  00000000  00011a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00013568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000681  00000000  00000000  00013de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a974  00000000  00000000  00014469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b322  00000000  00000000  0002eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cacd  00000000  00000000  0003a0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d6bcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002214  00000000  00000000  000d6c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000d8e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004450 	.word	0x08004450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004450 	.word	0x08004450

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb07 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f833 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d3 	bl	8000380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8a1 	bl	8000320 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f869 	bl	80002b4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001e2:	2102      	movs	r1, #2
 80001e4:	4812      	ldr	r0, [pc, #72]	@ (8000230 <main+0x68>)
 80001e6:	f000 ff80 	bl	80010ea <HAL_CAN_ActivateNotification>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <main+0x2c>
    	  {
    		  Error_Handler();
 80001f0:	f000 f9a2 	bl	8000538 <Error_Handler>
    	  }
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	623b      	str	r3, [r7, #32]
//  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
  canfilterconfig.FilterBank = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
//  canfilterconfig.FilterIdHigh = 0x446<<5;
//  canfilterconfig.FilterIdLow = 0;
//  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000200:	2300      	movs	r3, #0
 8000202:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000208:	2300      	movs	r3, #0
 800020a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800020c:	2301      	movs	r3, #1
 800020e:	61fb      	str	r3, [r7, #28]
//  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000210:	463b      	mov	r3, r7
 8000212:	4619      	mov	r1, r3
 8000214:	4806      	ldr	r0, [pc, #24]	@ (8000230 <main+0x68>)
 8000216:	f000 fc68 	bl	8000aea <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <main+0x68>)
 800021c:	f000 fd2f 	bl	8000c7e <HAL_CAN_Start>
  HAL_UART_Receive_IT(&huart2, urx_buf, 10);
 8000220:	220a      	movs	r2, #10
 8000222:	4904      	ldr	r1, [pc, #16]	@ (8000234 <main+0x6c>)
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <main+0x70>)
 8000226:	f002 ff93 	bl	8003150 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x62>
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028
 8000234:	200000fc 	.word	0x200000fc
 8000238:	20000050 	.word	0x20000050

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	@ 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 f8d4 	bl	80043f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2310      	movs	r3, #16
 8000268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fcc0 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027e:	f000 f95b 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fcea 	bl	8002c74 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a6:	f000 f947 	bl	8000538 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	@ 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_CAN_Init+0x64>)
 80002ba:	4a18      	ldr	r2, [pc, #96]	@ (800031c <MX_CAN_Init+0x68>)
 80002bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80002be:	4b16      	ldr	r3, [pc, #88]	@ (8000318 <MX_CAN_Init+0x64>)
 80002c0:	2204      	movs	r2, #4
 80002c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_CAN_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ca:	4b13      	ldr	r3, [pc, #76]	@ (8000318 <MX_CAN_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_CAN_Init+0x64>)
 80002d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_CAN_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_CAN_Init+0x64>)
 8000304:	f000 faf6 	bl	80008f4 <HAL_CAN_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800030e:	f000 f913 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	40006400 	.word	0x40006400

08000320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	@ (800037c <MX_USART2_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800032c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000364:	f002 fea6 	bl	80030b4 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f8e3 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000050 	.word	0x20000050
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <MX_GPIO_Init+0x8c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a1c      	ldr	r2, [pc, #112]	@ (800040c <MX_GPIO_Init+0x8c>)
 800039c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a16      	ldr	r2, [pc, #88]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a10      	ldr	r2, [pc, #64]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	480b      	ldr	r0, [pc, #44]	@ (8000410 <MX_GPIO_Init+0x90>)
 80003e4:	f001 fbd6 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003e8:	2308      	movs	r3, #8
 80003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_GPIO_Init+0x90>)
 8000400:	f001 fa56 	bl	80018b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400

08000414 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800041c:	2108      	movs	r1, #8
 800041e:	4809      	ldr	r0, [pc, #36]	@ (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000420:	f001 fbd0 	bl	8001bc4 <HAL_GPIO_TogglePin>
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000426:	4a09      	ldr	r2, [pc, #36]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 fd3b 	bl	8000ea6 <HAL_CAN_GetRxMessage>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
  {
    Error_Handler();
 8000436:	f000 f87f 	bl	8000538 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	48000400 	.word	0x48000400
 8000448:	200000f4 	.word	0x200000f4
 800044c:	200000d8 	.word	0x200000d8

08000450 <Parse_Config_Command>:

void Parse_Config_Command() {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  if (urx_buf[9] == 0x01) {
 8000454:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <Parse_Config_Command+0x18>)
 8000456:	7a5b      	ldrb	r3, [r3, #9]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d104      	bne.n	8000466 <Parse_Config_Command+0x16>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800045c:	2108      	movs	r1, #8
 800045e:	4803      	ldr	r0, [pc, #12]	@ (800046c <Parse_Config_Command+0x1c>)
 8000460:	f001 fbb0 	bl	8001bc4 <HAL_GPIO_TogglePin>
	  return;
 8000464:	bf00      	nop
  }
}
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000fc 	.word	0x200000fc
 800046c:	48000400 	.word	0x48000400

08000470 <send_can_msg>:

HAL_StatusTypeDef send_can_msg(uint16_t destID, const uint8_t *data, size_t len) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b08c      	sub	sp, #48	@ 0x30
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	81fb      	strh	r3, [r7, #14]
    CAN_TxHeaderTypeDef header;
    header.IDE = CAN_ID_STD;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
    header.StdId = destID;
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	617b      	str	r3, [r7, #20]
    header.RTR = CAN_RTR_DATA;
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]
    header.TransmitGlobalTime = DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    header.DLC = len;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	627b      	str	r3, [r7, #36]	@ 0x24

    uint32_t mailbox;

    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	f107 0114 	add.w	r1, r7, #20
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <send_can_msg+0x60>)
 80004a0:	f000 fc31 	bl	8000d06 <HAL_CAN_AddTxMessage>
 80004a4:	4603      	mov	r3, r0
 80004a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != HAL_OK) {
 80004aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d008      	beq.n	80004c4 <send_can_msg+0x54>
    	while (1) {
    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004b2:	2108      	movs	r1, #8
 80004b4:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <send_can_msg+0x64>)
 80004b6:	f001 fb85 	bl	8001bc4 <HAL_GPIO_TogglePin>
    		HAL_Delay(100);
 80004ba:	2064      	movs	r0, #100	@ 0x64
 80004bc:	f000 f9f6 	bl	80008ac <HAL_Delay>
    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004c0:	bf00      	nop
 80004c2:	e7f6      	b.n	80004b2 <send_can_msg+0x42>
    	}
    }

    return status;
 80004c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3730      	adds	r7, #48	@ 0x30
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000028 	.word	0x20000028
 80004d4:	48000400 	.word	0x48000400

080004d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint16_t destID = (urx_buf[0] << 8) | (urx_buf[1]);
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <HAL_UART_RxCpltCallback+0x58>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	021b      	lsls	r3, r3, #8
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <HAL_UART_RxCpltCallback+0x58>)
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	82fb      	strh	r3, [r7, #22]
  if (destID == 0x0000) {
 80004f4:	8afb      	ldrh	r3, [r7, #22]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d102      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x28>
	  Parse_Config_Command();
 80004fa:	f7ff ffa9 	bl	8000450 <Parse_Config_Command>
 80004fe:	e00d      	b.n	800051c <HAL_UART_RxCpltCallback+0x44>
  }
  else {
	  uint8_t data[8];
	  memcpy(data, &urx_buf[2], 8);
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <HAL_UART_RxCpltCallback+0x58>)
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	3202      	adds	r2, #2
 8000508:	6810      	ldr	r0, [r2, #0]
 800050a:	6851      	ldr	r1, [r2, #4]
 800050c:	c303      	stmia	r3!, {r0, r1}
	  send_can_msg(destID, data, 8);
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	8afb      	ldrh	r3, [r7, #22]
 8000514:	2208      	movs	r2, #8
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffaa 	bl	8000470 <send_can_msg>
  }
  HAL_UART_Receive_IT(&huart2, urx_buf, 10); //You need to toggle a breakpoint on this line!
 800051c:	220a      	movs	r2, #10
 800051e:	4904      	ldr	r1, [pc, #16]	@ (8000530 <HAL_UART_RxCpltCallback+0x58>)
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <HAL_UART_RxCpltCallback+0x5c>)
 8000522:	f002 fe15 	bl	8003150 <HAL_UART_Receive_IT>
}
 8000526:	bf00      	nop
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000fc 	.word	0x200000fc
 8000534:	20000050 	.word	0x20000050

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <Error_Handler+0x8>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <HAL_MspInit+0x44>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a0e      	ldr	r2, [pc, #56]	@ (8000588 <HAL_MspInit+0x44>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <HAL_MspInit+0x44>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <HAL_MspInit+0x44>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <HAL_MspInit+0x44>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <HAL_MspInit+0x44>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	@ 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <HAL_CAN_MspInit+0xb4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d143      	bne.n	8000636 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a24      	ldr	r2, [pc, #144]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_CAN_MspInit+0xb8>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005f0:	2309      	movs	r3, #9
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f001 f957 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000614:	2309      	movs	r3, #9
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f001 f945 	bl	80018b0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2014      	movs	r0, #20
 800062c:	f001 f88d 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000630:	2014      	movs	r0, #20
 8000632:	f001 f8a6 	bl	8001782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40006400 	.word	0x40006400
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <HAL_UART_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d131      	bne.n	80006ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_UART_MspInit+0x94>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_UART_MspInit+0x94>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <HAL_UART_MspInit+0x94>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <HAL_UART_MspInit+0x94>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <HAL_UART_MspInit+0x94>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <HAL_UART_MspInit+0x94>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800069a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ac:	2307      	movs	r3, #7
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 f8f9 	bl	80018b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2026      	movs	r0, #38	@ 0x26
 80006c4:	f001 f841 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c8:	2026      	movs	r0, #38	@ 0x26
 80006ca:	f001 f85a 	bl	8001782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40004400 	.word	0x40004400
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f899 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <CAN_RX0_IRQHandler+0x10>)
 8000746:	f000 fcf6 	bl	8001136 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028

08000754 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <USART2_IRQHandler+0x10>)
 800075a:	f002 fd3d 	bl	80031d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000050 	.word	0x20000050

08000768 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <SystemInit+0x20>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000772:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <SystemInit+0x20>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000790:	f7ff ffea 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	@ (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	@ (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ba:	f003 fe25 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007be:	f7ff fd03 	bl	80001c8 <main>

080007c2 <LoopForever>:

LoopForever:
    b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d0:	080044a8 	.word	0x080044a8
  ldr r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d8:	2000010c 	.word	0x2000010c

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 ff9f 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff fea2 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 ffb7 	bl	800179e <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 ff7f 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	20000108 	.word	0x20000108

08000894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;  
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000108 	.word	0x20000108

080008ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff ffee 	bl	8000894 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffde 	bl	8000894 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e0ed      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe3a 	bl	800058c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000928:	f7ff ffb4 	bl	8000894 <HAL_GetTick>
 800092c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800092e:	e012      	b.n	8000956 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000930:	f7ff ffb0 	bl	8000894 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d90b      	bls.n	8000956 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000942:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2205      	movs	r2, #5
 800094e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0c5      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0e5      	beq.n	8000930 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0202 	bic.w	r2, r2, #2
 8000972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000974:	f7ff ff8e 	bl	8000894 <HAL_GetTick>
 8000978:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097a:	e012      	b.n	80009a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800097c:	f7ff ff8a 	bl	8000894 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d90b      	bls.n	80009a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2205      	movs	r2, #5
 800099a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e09f      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e5      	bne.n	800097c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7e1b      	ldrb	r3, [r3, #24]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d108      	bne.n	80009ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e007      	b.n	80009da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7e5b      	ldrb	r3, [r3, #25]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e9b      	ldrb	r3, [r3, #26]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d108      	bne.n	8000a1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0220 	orr.w	r2, r2, #32
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e007      	b.n	8000a2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0220 	bic.w	r2, r2, #32
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7edb      	ldrb	r3, [r3, #27]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0210 	bic.w	r2, r2, #16
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0210 	orr.w	r2, r2, #16
 8000a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7f1b      	ldrb	r3, [r3, #28]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0208 	orr.w	r2, r2, #8
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0208 	bic.w	r2, r2, #8
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7f5b      	ldrb	r3, [r3, #29]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0204 	orr.w	r2, r2, #4
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0204 	bic.w	r2, r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	ea42 0103 	orr.w	r1, r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b087      	sub	sp, #28
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b00:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b02:	7cfb      	ldrb	r3, [r7, #19]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d003      	beq.n	8000b10 <HAL_CAN_ConfigFilter+0x26>
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	f040 80aa 	bne.w	8000c64 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	2201      	movs	r2, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d123      	bne.n	8000b92 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	401a      	ands	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3248      	adds	r2, #72	@ 0x48
 8000b72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b88:	6979      	ldr	r1, [r7, #20]
 8000b8a:	3348      	adds	r3, #72	@ 0x48
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d122      	bne.n	8000be0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3248      	adds	r2, #72	@ 0x48
 8000bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd6:	6979      	ldr	r1, [r7, #20]
 8000bd8:	3348      	adds	r3, #72	@ 0x48
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	440b      	add	r3, r1
 8000bde:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c26:	e007      	b.n	8000c38 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d107      	bne.n	8000c50 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c56:	f023 0201 	bic.w	r2, r3, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e006      	b.n	8000c72 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
  }
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d12e      	bne.n	8000cf0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2202      	movs	r2, #2
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000caa:	f7ff fdf3 	bl	8000894 <HAL_GetTick>
 8000cae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb0:	e012      	b.n	8000cd8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb2:	f7ff fdef 	bl	8000894 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b0a      	cmp	r3, #10
 8000cbe:	d90b      	bls.n	8000cd8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2205      	movs	r2, #5
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e012      	b.n	8000cfe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1e5      	bne.n	8000cb2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e006      	b.n	8000cfe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
  }
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b089      	sub	sp, #36	@ 0x24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d24:	7ffb      	ldrb	r3, [r7, #31]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d003      	beq.n	8000d32 <HAL_CAN_AddTxMessage+0x2c>
 8000d2a:	7ffb      	ldrb	r3, [r7, #31]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	f040 80ad 	bne.w	8000e8c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10a      	bne.n	8000d52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d105      	bne.n	8000d52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8095 	beq.w	8000e7c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	0e1b      	lsrs	r3, r3, #24
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	409a      	lsls	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10d      	bne.n	8000d8a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d78:	68f9      	ldr	r1, [r7, #12]
 8000d7a:	6809      	ldr	r1, [r1, #0]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3318      	adds	r3, #24
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e00f      	b.n	8000daa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d9a:	68f9      	ldr	r1, [r7, #12]
 8000d9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3318      	adds	r3, #24
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	440b      	add	r3, r1
 8000da8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3318      	adds	r3, #24
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	440b      	add	r3, r1
 8000dba:	3304      	adds	r3, #4
 8000dbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	7d1b      	ldrb	r3, [r3, #20]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d111      	bne.n	8000dea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3318      	adds	r3, #24
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	6811      	ldr	r1, [r2, #0]
 8000dda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3318      	adds	r3, #24
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	440b      	add	r3, r1
 8000de6:	3304      	adds	r3, #4
 8000de8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3307      	adds	r3, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	061a      	lsls	r2, r3, #24
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3306      	adds	r3, #6
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3305      	adds	r3, #5
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	4313      	orrs	r3, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	3204      	adds	r2, #4
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	6811      	ldr	r1, [r2, #0]
 8000e12:	ea43 0200 	orr.w	r2, r3, r0
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3303      	adds	r3, #3
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061a      	lsls	r2, r3, #24
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3301      	adds	r3, #1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	4610      	mov	r0, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	6811      	ldr	r1, [r2, #0]
 8000e48:	ea43 0200 	orr.w	r2, r3, r0
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	440b      	add	r3, r1
 8000e52:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	f043 0201 	orr.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3318      	adds	r3, #24
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	440b      	add	r3, r1
 8000e76:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e00e      	b.n	8000e9a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e006      	b.n	8000e9a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
  }
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b087      	sub	sp, #28
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d003      	beq.n	8000eca <HAL_CAN_GetRxMessage+0x24>
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	f040 8103 	bne.w	80010d0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10e      	bne.n	8000eee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d116      	bne.n	8000f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0f7      	b.n	80010de <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0e8      	b.n	80010de <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	331b      	adds	r3, #27
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	4413      	add	r3, r2
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0204 	and.w	r2, r3, #4
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	331b      	adds	r3, #27
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0d5b      	lsrs	r3, r3, #21
 8000f3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	331b      	adds	r3, #27
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	331b      	adds	r3, #27
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4413      	add	r3, r2
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0202 	and.w	r2, r3, #2
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	331b      	adds	r3, #27
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	e00b      	b.n	8000faa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	331b      	adds	r3, #27
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 020f 	and.w	r2, r3, #15
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	331b      	adds	r3, #27
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	331b      	adds	r3, #27
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	4413      	add	r3, r2
 8000fe4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0a1a      	lsrs	r2, r3, #8
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0c1a      	lsrs	r2, r3, #16
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3302      	adds	r3, #2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	4413      	add	r3, r2
 800102e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0e1a      	lsrs	r2, r3, #24
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3303      	adds	r3, #3
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4413      	add	r3, r2
 8001048:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	0a1a      	lsrs	r2, r3, #8
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3305      	adds	r3, #5
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0c1a      	lsrs	r2, r3, #16
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3306      	adds	r3, #6
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0e1a      	lsrs	r2, r3, #24
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	3307      	adds	r3, #7
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0220 	orr.w	r2, r2, #32
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	e007      	b.n	80010cc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e006      	b.n	80010de <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
  }
}
 80010de:	4618      	mov	r0, r3
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d002      	beq.n	8001108 <HAL_CAN_ActivateNotification+0x1e>
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d109      	bne.n	800111c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6959      	ldr	r1, [r3, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e006      	b.n	800112a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
  }
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b08a      	sub	sp, #40	@ 0x28
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d07c      	beq.n	8001276 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d023      	beq.n	80011ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f983 	bl	80014a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800119e:	e016      	b.n	80011ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b2:	e00c      	b.n	80011ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c6:	e002      	b.n	80011ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f989 	bl	80014e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d024      	beq.n	8001222 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f963 	bl	80014b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80011f2:	e016      	b.n	8001222 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
 8001206:	e00c      	b.n	8001222 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
 800121a:	e002      	b.n	8001222 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f969 	bl	80014f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d024      	beq.n	8001276 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f943 	bl	80014cc <HAL_CAN_TxMailbox2CompleteCallback>
 8001246:	e016      	b.n	8001276 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
 800125a:	e00c      	b.n	8001276 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
 800126e:	e002      	b.n	8001276 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f949 	bl	8001508 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2210      	movs	r2, #16
 8001298:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2208      	movs	r2, #8
 80012b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f930 	bl	800151c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f89d 	bl	8000414 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2210      	movs	r2, #16
 80012fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2208      	movs	r2, #8
 8001318:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f912 	bl	8001544 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f8f9 	bl	8001530 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2210      	movs	r2, #16
 8001358:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8fc 	bl	8001558 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2208      	movs	r2, #8
 800137a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f8f5 	bl	800156c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d07b      	beq.n	8001484 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d072      	beq.n	800147c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d043      	beq.n	800147c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d03e      	beq.n	800147c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001404:	2b60      	cmp	r3, #96	@ 0x60
 8001406:	d02b      	beq.n	8001460 <HAL_CAN_IRQHandler+0x32a>
 8001408:	2b60      	cmp	r3, #96	@ 0x60
 800140a:	d82e      	bhi.n	800146a <HAL_CAN_IRQHandler+0x334>
 800140c:	2b50      	cmp	r3, #80	@ 0x50
 800140e:	d022      	beq.n	8001456 <HAL_CAN_IRQHandler+0x320>
 8001410:	2b50      	cmp	r3, #80	@ 0x50
 8001412:	d82a      	bhi.n	800146a <HAL_CAN_IRQHandler+0x334>
 8001414:	2b40      	cmp	r3, #64	@ 0x40
 8001416:	d019      	beq.n	800144c <HAL_CAN_IRQHandler+0x316>
 8001418:	2b40      	cmp	r3, #64	@ 0x40
 800141a:	d826      	bhi.n	800146a <HAL_CAN_IRQHandler+0x334>
 800141c:	2b30      	cmp	r3, #48	@ 0x30
 800141e:	d010      	beq.n	8001442 <HAL_CAN_IRQHandler+0x30c>
 8001420:	2b30      	cmp	r3, #48	@ 0x30
 8001422:	d822      	bhi.n	800146a <HAL_CAN_IRQHandler+0x334>
 8001424:	2b10      	cmp	r3, #16
 8001426:	d002      	beq.n	800142e <HAL_CAN_IRQHandler+0x2f8>
 8001428:	2b20      	cmp	r3, #32
 800142a:	d005      	beq.n	8001438 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800142c:	e01d      	b.n	800146a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001436:	e019      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001440:	e014      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800144a:	e00f      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001454:	e00a      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800145e:	e005      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001468:	e000      	b.n	800146c <HAL_CAN_IRQHandler+0x336>
            break;
 800146a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800147a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2204      	movs	r2, #4
 8001482:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f872 	bl	8001580 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	@ (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e02e      	b.n	8001826 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d008      	beq.n	80017e4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2204      	movs	r2, #4
 80017d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e020      	b.n	8001826 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 020e 	bic.w	r2, r2, #14
 80017f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001844:	2b02      	cmp	r3, #2
 8001846:	d005      	beq.n	8001854 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2204      	movs	r2, #4
 800184c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e027      	b.n	80018a4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020e 	bic.w	r2, r2, #14
 8001862:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    }
  }
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e14e      	b.n	8001b5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8140 	beq.w	8001b58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 809a 	beq.w	8001b58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b52      	ldr	r3, [pc, #328]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3c:	4a50      	ldr	r2, [pc, #320]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1e0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a46      	ldr	r2, [pc, #280]	@ (8001b84 <HAL_GPIO_Init+0x2d4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a45      	ldr	r2, [pc, #276]	@ (8001b88 <HAL_GPIO_Init+0x2d8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1d8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a44      	ldr	r2, [pc, #272]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1d4>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a84:	2305      	movs	r3, #5
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a90:	2300      	movs	r3, #0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa2:	4937      	ldr	r1, [pc, #220]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afe:	4a24      	ldr	r2, [pc, #144]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b28:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_GPIO_Init+0x2e0>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f aea9 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43d9      	mvns	r1, r3
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	400b      	ands	r3, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f001 b823 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 817d 	beq.w	8001f2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c34:	4bbc      	ldr	r3, [pc, #752]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4bb9      	ldr	r3, [pc, #740]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d15c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x10e>
 8001c4c:	4bb6      	ldr	r3, [pc, #728]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d155      	bne.n	8001d06 <HAL_RCC_OscConfig+0x10e>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0x94>
 8001c86:	4ba8      	ldr	r3, [pc, #672]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e015      	b.n	8001cb8 <HAL_RCC_OscConfig+0xc0>
 8001c8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c90:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ca4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ca8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cbc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001cc0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001cc4:	fa92 f2a2 	rbit	r2, r2
 8001cc8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ccc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 811f 	beq.w	8001f2c <HAL_RCC_OscConfig+0x334>
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8116 	bne.w	8001f2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f000 bfaf 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12e>
 8001d18:	4b83      	ldr	r3, [pc, #524]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a82      	ldr	r2, [pc, #520]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e036      	b.n	8001d94 <HAL_RCC_OscConfig+0x19c>
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x158>
 8001d36:	4b7c      	ldr	r3, [pc, #496]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a78      	ldr	r2, [pc, #480]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e021      	b.n	8001d94 <HAL_RCC_OscConfig+0x19c>
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x184>
 8001d62:	4b71      	ldr	r3, [pc, #452]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a70      	ldr	r2, [pc, #448]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6d      	ldr	r2, [pc, #436]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0x19c>
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b67      	ldr	r3, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d94:	4b64      	ldr	r3, [pc, #400]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f023 020f 	bic.w	r2, r3, #15
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	495f      	ldr	r1, [pc, #380]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d059      	beq.n	8001e72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fd69 	bl	8000894 <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fd64 	bl	8000894 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	@ 0x64
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bf43 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 8001dde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001df2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x218>
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e015      	b.n	8001e3c <HAL_RCC_OscConfig+0x244>
 8001e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e28:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e38:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e40:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e48:	fa92 f2a2 	rbit	r2, r2
 8001e4c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ab      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1d0>
 8001e70:	e05d      	b.n	8001f2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7fe fd0f 	bl	8000894 <HAL_GetTick>
 8001e76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fd0a 	bl	8000894 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	@ 0x64
 8001e8a:	d902      	bls.n	8001e92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	f000 bee9 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 8001e92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e96:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001ea6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2cc>
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	e015      	b.n	8001ef0 <HAL_RCC_OscConfig+0x2f8>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ed8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001edc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ee0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_RCC_OscConfig+0x330>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ef4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ef8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001efc:	fa92 f2a2 	rbit	r2, r2
 8001f00:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f04:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ab      	bne.n	8001e7c <HAL_RCC_OscConfig+0x284>
 8001f24:	e003      	b.n	8001f2e <HAL_RCC_OscConfig+0x336>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 817d 	beq.w	800223e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f44:	4ba6      	ldr	r3, [pc, #664]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f50:	4ba3      	ldr	r3, [pc, #652]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d172      	bne.n	8002042 <HAL_RCC_OscConfig+0x44a>
 8001f5c:	4ba0      	ldr	r3, [pc, #640]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d16c      	bne.n	8002042 <HAL_RCC_OscConfig+0x44a>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3a0>
 8001f92:	4b93      	ldr	r3, [pc, #588]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e013      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3c8>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001fb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001fbc:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001fc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001fd2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f002 021f 	and.w	r2, r2, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCC_OscConfig+0x410>
 8001ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d002      	beq.n	8002008 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	f000 be2e 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b75      	ldr	r3, [pc, #468]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	21f8      	movs	r1, #248	@ 0xf8
 800201e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002026:	fa91 f1a1 	rbit	r1, r1
 800202a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800202e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002032:	fab1 f181 	clz	r1, r1
 8002036:	b2c9      	uxtb	r1, r1
 8002038:	408b      	lsls	r3, r1
 800203a:	4969      	ldr	r1, [pc, #420]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002040:	e0fd      	b.n	800223e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8088 	beq.w	8002164 <HAL_RCC_OscConfig+0x56c>
 8002054:	2301      	movs	r3, #1
 8002056:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002066:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002074:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	2301      	movs	r3, #1
 800207e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fc08 	bl	8000894 <HAL_GetTick>
 8002084:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7fe fc03 	bl	8000894 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d902      	bls.n	80020a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	f000 bde2 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80020b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4d8>
 80020ca:	4b45      	ldr	r3, [pc, #276]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	e013      	b.n	80020f8 <HAL_RCC_OscConfig+0x500>
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020f4:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2202      	movs	r2, #2
 80020fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80020fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800210a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0af      	beq.n	800208a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	21f8      	movs	r1, #248	@ 0xf8
 8002140:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002148:	fa91 f1a1 	rbit	r1, r1
 800214c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002150:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002154:	fab1 f181 	clz	r1, r1
 8002158:	b2c9      	uxtb	r1, r1
 800215a:	408b      	lsls	r3, r1
 800215c:	4920      	ldr	r1, [pc, #128]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
 8002162:	e06c      	b.n	800223e <HAL_RCC_OscConfig+0x646>
 8002164:	2301      	movs	r3, #1
 8002166:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002176:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002184:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	461a      	mov	r2, r3
 800218c:	2300      	movs	r3, #0
 800218e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fb80 	bl	8000894 <HAL_GetTick>
 8002194:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7fe fb7b 	bl	8000894 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d902      	bls.n	80021b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	f000 bd5a 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80021c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d104      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5ec>
 80021da:	4b01      	ldr	r3, [pc, #4]	@ (80021e0 <HAL_RCC_OscConfig+0x5e8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e015      	b.n	800220c <HAL_RCC_OscConfig+0x614>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80021fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002208:	4bc8      	ldr	r3, [pc, #800]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	2202      	movs	r2, #2
 800220e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002212:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800221e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002222:	fab2 f282 	clz	r2, r2
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f042 0220 	orr.w	r2, r2, #32
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f002 021f 	and.w	r2, r2, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ad      	bne.n	800219a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8110 	beq.w	8002474 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d079      	beq.n	8002358 <HAL_RCC_OscConfig+0x760>
 8002264:	2301      	movs	r3, #1
 8002266:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4bab      	ldr	r3, [pc, #684]	@ (8002530 <HAL_RCC_OscConfig+0x938>)
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	461a      	mov	r2, r3
 800228a:	2301      	movs	r3, #1
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fb01 	bl	8000894 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fafc 	bl	8000894 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d902      	bls.n	80022ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f000 bcdb 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022ec:	2202      	movs	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002306:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002308:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 800230a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002314:	2102      	movs	r1, #2
 8002316:	6019      	str	r1, [r3, #0]
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f1a3 	rbit	r1, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800232e:	6019      	str	r1, [r3, #0]
  return result;
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0a0      	beq.n	8002298 <HAL_RCC_OscConfig+0x6a0>
 8002356:	e08d      	b.n	8002474 <HAL_RCC_OscConfig+0x87c>
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002380:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002384:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x938>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fa7b 	bl	8000894 <HAL_GetTick>
 800239e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a4:	f7fe fa76 	bl	8000894 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d902      	bls.n	80023ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f000 bc55 	b.w	8002c64 <HAL_RCC_OscConfig+0x106c>
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023c2:	2202      	movs	r2, #2
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023e6:	2202      	movs	r2, #2
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800240a:	2202      	movs	r2, #2
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fa93 f2a3 	rbit	r2, r3
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002424:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 8002428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002432:	2102      	movs	r1, #2
 8002434:	6019      	str	r1, [r3, #0]
 8002436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f1a3 	rbit	r1, r3
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800244c:	6019      	str	r1, [r3, #0]
  return result;
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d197      	bne.n	80023a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 81a1 	beq.w	80027cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002490:	4b26      	ldr	r3, [pc, #152]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d116      	bne.n	80024ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	4a22      	ldr	r2, [pc, #136]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	61d3      	str	r3, [r2, #28]
 80024a8:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_RCC_OscConfig+0x93c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11a      	bne.n	800250c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <HAL_RCC_OscConfig+0x93c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <HAL_RCC_OscConfig+0x93c>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7fe f9d7 	bl	8000894 <HAL_GetTick>
 80024e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	e009      	b.n	8002500 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7fe f9d2 	bl	8000894 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	@ 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e3b1      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_RCC_OscConfig+0x93c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_OscConfig+0x940>
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a02      	ldr	r2, [pc, #8]	@ (800252c <HAL_RCC_OscConfig+0x934>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e03c      	b.n	80025a4 <HAL_RCC_OscConfig+0x9ac>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	10908120 	.word	0x10908120
 8002534:	40007000 	.word	0x40007000
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0x96a>
 8002548:	4bc1      	ldr	r3, [pc, #772]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4ac0      	ldr	r2, [pc, #768]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4bbe      	ldr	r3, [pc, #760]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4abd      	ldr	r2, [pc, #756]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e020      	b.n	80025a4 <HAL_RCC_OscConfig+0x9ac>
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x994>
 8002572:	4bb7      	ldr	r3, [pc, #732]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4ab6      	ldr	r2, [pc, #728]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4bb4      	ldr	r3, [pc, #720]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4ab3      	ldr	r2, [pc, #716]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0x9ac>
 800258c:	4bb0      	ldr	r3, [pc, #704]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4aaf      	ldr	r2, [pc, #700]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	4bad      	ldr	r3, [pc, #692]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4aac      	ldr	r2, [pc, #688]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8081 	beq.w	80026b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe f96d 	bl	8000894 <HAL_GetTick>
 80025ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe f968 	bl	8000894 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e345      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002604:	2202      	movs	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800261e:	601a      	str	r2, [r3, #0]
  return result;
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002628:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0xa4c>
 800263e:	4b84      	ldr	r3, [pc, #528]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	e013      	b.n	800266c <HAL_RCC_OscConfig+0xa74>
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b79      	ldr	r3, [pc, #484]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002670:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002674:	2102      	movs	r1, #2
 8002676:	6011      	str	r1, [r2, #0]
 8002678:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800267c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	fa92 f1a2 	rbit	r1, r2
 8002686:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800268a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800268e:	6011      	str	r1, [r2, #0]
  return result;
 8002690:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002694:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d084      	beq.n	80025c0 <HAL_RCC_OscConfig+0x9c8>
 80026b6:	e07f      	b.n	80027b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe f8ec 	bl	8000894 <HAL_GetTick>
 80026bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe f8e7 	bl	8000894 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e2c4      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002706:	2202      	movs	r2, #2
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002720:	601a      	str	r2, [r3, #0]
  return result;
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800272a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d102      	bne.n	8002746 <HAL_RCC_OscConfig+0xb4e>
 8002740:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	e013      	b.n	800276e <HAL_RCC_OscConfig+0xb76>
 8002746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800274e:	2202      	movs	r2, #2
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	4b39      	ldr	r3, [pc, #228]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002772:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002776:	2102      	movs	r1, #2
 8002778:	6011      	str	r1, [r2, #0]
 800277a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800277e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	fa92 f1a2 	rbit	r1, r2
 8002788:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800278c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002790:	6011      	str	r1, [r2, #0]
  return result;
 8002792:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002796:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f002 021f 	and.w	r2, r2, #31
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d184      	bne.n	80026c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 80027c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8242 	beq.w	8002c62 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <HAL_RCC_OscConfig+0xc58>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	f000 8213 	beq.w	8002c12 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 8162 	bne.w	8002ac2 <HAL_RCC_OscConfig+0xeca>
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002806:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002822:	601a      	str	r2, [r3, #0]
  return result;
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800282c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002838:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	461a      	mov	r2, r3
 8002840:	2300      	movs	r3, #0
 8002842:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe f826 	bl	8000894 <HAL_GetTick>
 8002848:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284c:	e00c      	b.n	8002868 <HAL_RCC_OscConfig+0xc70>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe f81e 	bl	8000894 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1fd      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800288c:	601a      	str	r2, [r3, #0]
  return result;
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_RCC_OscConfig+0xcba>
 80028ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e027      	b.n	8002902 <HAL_RCC_OscConfig+0xd0a>
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b9c      	ldr	r3, [pc, #624]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002906:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800290a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800290e:	6011      	str	r1, [r2, #0]
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fa92 f1a2 	rbit	r1, r2
 800291e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002922:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002926:	6011      	str	r1, [r2, #0]
  return result;
 8002928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800292c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f042 0220 	orr.w	r2, r2, #32
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f002 021f 	and.w	r2, r2, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d182      	bne.n	8002854 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294e:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	430b      	orrs	r3, r1
 8002970:	497f      	ldr	r1, [pc, #508]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800297e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800299a:	601a      	str	r2, [r3, #0]
  return result;
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	2301      	movs	r3, #1
 80029ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fd ff6a 	bl	8000894 <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	e009      	b.n	80029da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fd ff65 	bl	8000894 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e144      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029fe:	601a      	str	r2, [r3, #0]
  return result;
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0xe2c>
 8002a1e:	4b54      	ldr	r3, [pc, #336]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e027      	b.n	8002a74 <HAL_RCC_OscConfig+0xe7c>
 8002a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b3f      	ldr	r3, [pc, #252]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	fa92 f1a2 	rbit	r1, r2
 8002a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a98:	6011      	str	r1, [r2, #0]
  return result;
 8002a9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d082      	beq.n	80029c6 <HAL_RCC_OscConfig+0xdce>
 8002ac0:	e0cf      	b.n	8002c62 <HAL_RCC_OscConfig+0x106a>
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002aca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ae6:	601a      	str	r2, [r3, #0]
  return result;
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002af0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002afc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	461a      	mov	r2, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd fec4 	bl	8000894 <HAL_GetTick>
 8002b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e009      	b.n	8002b26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fd febf 	bl	8000894 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e09e      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	fa93 f2a3 	rbit	r2, r3
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b4a:	601a      	str	r2, [r3, #0]
  return result;
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d104      	bne.n	8002b74 <HAL_RCC_OscConfig+0xf7c>
 8002b6a:	4b01      	ldr	r3, [pc, #4]	@ (8002b70 <HAL_RCC_OscConfig+0xf78>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e029      	b.n	8002bc4 <HAL_RCC_OscConfig+0xfcc>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_RCC_OscConfig+0x1078>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002bd0:	6011      	str	r1, [r2, #0]
 8002bd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bd6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fa92 f1a2 	rbit	r1, r2
 8002be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002be4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002be8:	6011      	str	r1, [r2, #0]
  return result;
 8002bea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d180      	bne.n	8002b12 <HAL_RCC_OscConfig+0xf1a>
 8002c10:	e027      	b.n	8002c62 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01e      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_OscConfig+0x1078>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c32:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d10b      	bne.n	8002c5e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b09e      	sub	sp, #120	@ 0x78
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e162      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b90      	ldr	r3, [pc, #576]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d910      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	498b      	ldr	r1, [pc, #556]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b89      	ldr	r3, [pc, #548]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e14a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b82      	ldr	r3, [pc, #520]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	497f      	ldr	r1, [pc, #508]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80dc 	beq.w	8002ea0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d13c      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xf6>
 8002cf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xa6>
 8002d14:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	e00f      	b.n	8002d3a <HAL_RCC_ClockConfig+0xc6>
 8002d1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d36:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d42:	fa92 f2a2 	rbit	r2, r2
 8002d46:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d17b      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0f3      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d13c      	bne.n	8002dec <HAL_RCC_ClockConfig+0x178>
 8002d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x128>
 8002d96:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e00f      	b.n	8002dbc <HAL_RCC_ClockConfig+0x148>
 8002d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db8:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002dc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dc4:	fa92 f2a2 	rbit	r2, r2
 8002dc8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0220 	orr.w	r2, r2, #32
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13a      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0b2      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
 8002dec:	2302      	movs	r3, #2
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x1a0>
 8002e0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e00d      	b.n	8002e30 <HAL_RCC_ClockConfig+0x1bc>
 8002e14:	2302      	movs	r3, #2
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	2202      	movs	r2, #2
 8002e32:	61ba      	str	r2, [r7, #24]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	fa92 f2a2 	rbit	r2, r2
 8002e3a:	617a      	str	r2, [r7, #20]
  return result;
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e079      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	491a      	ldr	r1, [pc, #104]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7fd fd10 	bl	8000894 <HAL_GetTick>
 8002e74:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fd fd0c 	bl	8000894 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e061      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d214      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 0207 	bic.w	r2, r3, #7
 8002eb6:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e040      	b.n	8002f52 <HAL_RCC_ClockConfig+0x2de>
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_RCC_ClockConfig+0x2e8>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	491a      	ldr	r1, [pc, #104]	@ (8002f5c <HAL_RCC_ClockConfig+0x2e8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f02:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <HAL_RCC_ClockConfig+0x2e8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4912      	ldr	r1, [pc, #72]	@ (8002f5c <HAL_RCC_ClockConfig+0x2e8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f16:	f000 f829 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_RCC_ClockConfig+0x2e8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f24:	22f0      	movs	r2, #240	@ 0xf0
 8002f26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	fa92 f2a2 	rbit	r2, r2
 8002f2e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	40d3      	lsrs	r3, r2
 8002f3a:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <HAL_RCC_ClockConfig+0x2ec>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
 8002f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <HAL_RCC_ClockConfig+0x2f0>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_RCC_ClockConfig+0x2f4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fc5e 	bl	800080c <HAL_InitTick>
  
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3778      	adds	r7, #120	@ 0x78
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004468 	.word	0x08004468
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f86:	4b1e      	ldr	r3, [pc, #120]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x30>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8002f9a:	e026      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	e026      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a17      	ldr	r2, [pc, #92]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002fb0:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
      break;
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fec:	613b      	str	r3, [r7, #16]
      break;
 8002fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	007a1200 	.word	0x007a1200
 8003008:	08004480 	.word	0x08004480
 800300c:	08004490 	.word	0x08004490
 8003010:	003d0900 	.word	0x003d0900

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCC_GetHCLKFreq+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003032:	f7ff ffef 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003036:	4601      	mov	r1, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003040:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003044:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	fa92 f2a2 	rbit	r2, r2
 800304c:	603a      	str	r2, [r7, #0]
  return result;
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	fab2 f282 	clz	r2, r2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	40d3      	lsrs	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x40>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08004478 	.word	0x08004478

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003076:	f7ff ffcd 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 800307a:	4601      	mov	r1, r0
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003084:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003088:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	fa92 f2a2 	rbit	r2, r2
 8003090:	603a      	str	r2, [r7, #0]
  return result;
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	40d3      	lsrs	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08004478 	.word	0x08004478

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e040      	b.n	8003148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fab6 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	@ 0x24
 80030e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fca8 	bl	8003a50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb6f 	bl	80037e4 <UART_SetConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e01b      	b.n	8003148 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800311e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800312e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fd27 	bl	8003b94 <UART_CheckIdleState>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003164:	2b20      	cmp	r3, #32
 8003166:	d132      	bne.n	80031ce <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Receive_IT+0x24>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e02b      	b.n	80031d0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d018      	beq.n	80031be <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	613b      	str	r3, [r7, #16]
   return(result);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	69f9      	ldr	r1, [r7, #28]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fdfb 	bl	8003dc0 <UART_Start_Receive_IT>
 80031ca:	4603      	mov	r3, r0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3728      	adds	r7, #40	@ 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ba      	sub	sp, #232	@ 0xe8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003202:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003206:	4013      	ands	r3, r2
 8003208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800320c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d115      	bne.n	8003240 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00f      	beq.n	8003240 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 82ab 	beq.w	800378c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
      }
      return;
 800323e:	e2a5      	b.n	800378c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8117 	beq.w	8003478 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800324a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003256:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800325a:	4b85      	ldr	r3, [pc, #532]	@ (8003470 <HAL_UART_IRQHandler+0x298>)
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 810a 	beq.w	8003478 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d011      	beq.n	8003294 <HAL_UART_IRQHandler+0xbc>
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d011      	beq.n	80032c4 <HAL_UART_IRQHandler+0xec>
 80032a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2202      	movs	r2, #2
 80032b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d011      	beq.n	80032f4 <HAL_UART_IRQHandler+0x11c>
 80032d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2204      	movs	r2, #4
 80032e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ea:	f043 0202 	orr.w	r2, r3, #2
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800330c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003310:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003326:	f043 0208 	orr.w	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d012      	beq.n	8003362 <HAL_UART_IRQHandler+0x18a>
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00c      	beq.n	8003362 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8211 	beq.w	8003790 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800337a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800339c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b40      	cmp	r3, #64	@ 0x40
 80033ac:	d005      	beq.n	80033ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d04f      	beq.n	800345a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fdc6 	bl	8003f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d141      	bne.n	8003452 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1d9      	bne.n	80033ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341e:	2b00      	cmp	r3, #0
 8003420:	d013      	beq.n	800344a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003426:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <HAL_UART_IRQHandler+0x29c>)
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe f9ff 	bl	8001832 <HAL_DMA_Abort_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003444:	4610      	mov	r0, r2
 8003446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e00f      	b.n	800346a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9b4 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00b      	b.n	800346a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9b0 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e007      	b.n	800346a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9ac 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003468:	e192      	b.n	8003790 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346a:	bf00      	nop
    return;
 800346c:	e190      	b.n	8003790 <HAL_UART_IRQHandler+0x5b8>
 800346e:	bf00      	nop
 8003470:	04000120 	.word	0x04000120
 8003474:	08004015 	.word	0x08004015

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	2b01      	cmp	r3, #1
 800347e:	f040 814b 	bne.w	8003718 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8144 	beq.w	8003718 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 813d 	beq.w	8003718 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	f040 80b5 	bne.w	8003620 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8164 	beq.w	8003794 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034d6:	429a      	cmp	r2, r3
 80034d8:	f080 815c 	bcs.w	8003794 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f000 8086 	beq.w	80035fe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800350a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800350e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800351c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003520:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003528:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1da      	bne.n	80034f2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3308      	adds	r3, #8
 8003542:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800354c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3308      	adds	r3, #8
 800355c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003568:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e1      	bne.n	800353c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3308      	adds	r3, #8
 800357e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800358e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3308      	adds	r3, #8
 8003598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800359c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800359e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e3      	bne.n	8003578 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ce:	f023 0310 	bic.w	r3, r3, #16
 80035d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e4      	bne.n	80035be <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f8dc 	bl	80017b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003610:	b29b      	uxth	r3, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f8d7 	bl	80037cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800361e:	e0b9      	b.n	8003794 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800362c:	b29b      	uxth	r3, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80ab 	beq.w	8003798 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a6 	beq.w	8003798 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800365a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003670:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e4      	bne.n	800364c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	623b      	str	r3, [r7, #32]
   return(result);
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e3      	bne.n	8003682 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60fb      	str	r3, [r7, #12]
   return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	617b      	str	r3, [r7, #20]
   return(result);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e4      	bne.n	80036ce <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f85b 	bl	80037cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003716:	e03f      	b.n	8003798 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <HAL_UART_IRQHandler+0x56a>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fe52 	bl	80043e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003740:	e02d      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01c      	beq.n	800379c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
    }
    return;
 800376a:	e017      	b.n	800379c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <HAL_UART_IRQHandler+0x5c6>
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fc5b 	bl	8004040 <UART_EndTransmit_IT>
    return;
 800378a:	e008      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
      return;
 800378c:	bf00      	nop
 800378e:	e006      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_UART_IRQHandler+0x5c6>
    return;
 800379c:	bf00      	nop
  }

}
 800379e:	37e8      	adds	r7, #232	@ 0xe8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a38 <UART_SetConfig+0x254>)
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	430b      	orrs	r3, r1
 800381a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a78      	ldr	r2, [pc, #480]	@ (8003a3c <UART_SetConfig+0x258>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d120      	bne.n	80038a2 <UART_SetConfig+0xbe>
 8003860:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <UART_SetConfig+0x25c>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b03      	cmp	r3, #3
 800386a:	d817      	bhi.n	800389c <UART_SetConfig+0xb8>
 800386c:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <UART_SetConfig+0x90>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003885 	.word	0x08003885
 8003878:	08003891 	.word	0x08003891
 800387c:	08003897 	.word	0x08003897
 8003880:	0800388b 	.word	0x0800388b
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e01d      	b.n	80038c6 <UART_SetConfig+0xe2>
 800388a:	2302      	movs	r3, #2
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e01a      	b.n	80038c6 <UART_SetConfig+0xe2>
 8003890:	2304      	movs	r3, #4
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e017      	b.n	80038c6 <UART_SetConfig+0xe2>
 8003896:	2308      	movs	r3, #8
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e014      	b.n	80038c6 <UART_SetConfig+0xe2>
 800389c:	2310      	movs	r3, #16
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e011      	b.n	80038c6 <UART_SetConfig+0xe2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a67      	ldr	r2, [pc, #412]	@ (8003a44 <UART_SetConfig+0x260>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d102      	bne.n	80038b2 <UART_SetConfig+0xce>
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e009      	b.n	80038c6 <UART_SetConfig+0xe2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a64      	ldr	r2, [pc, #400]	@ (8003a48 <UART_SetConfig+0x264>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d102      	bne.n	80038c2 <UART_SetConfig+0xde>
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e001      	b.n	80038c6 <UART_SetConfig+0xe2>
 80038c2:	2310      	movs	r3, #16
 80038c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ce:	d15a      	bne.n	8003986 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80038d0:	7ffb      	ldrb	r3, [r7, #31]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d827      	bhi.n	8003926 <UART_SetConfig+0x142>
 80038d6:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <UART_SetConfig+0xf8>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003909 	.word	0x08003909
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003927 	.word	0x08003927
 80038ec:	08003917 	.word	0x08003917
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003927 	.word	0x08003927
 80038f8:	08003927 	.word	0x08003927
 80038fc:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7ff fb94 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8003904:	61b8      	str	r0, [r7, #24]
        break;
 8003906:	e013      	b.n	8003930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7ff fbb2 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 800390c:	61b8      	str	r0, [r7, #24]
        break;
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b4e      	ldr	r3, [pc, #312]	@ (8003a4c <UART_SetConfig+0x268>)
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e00c      	b.n	8003930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7ff fb29 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 800391a:	61b8      	str	r0, [r7, #24]
        break;
 800391c:	e008      	b.n	8003930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003922:	61bb      	str	r3, [r7, #24]
        break;
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77bb      	strb	r3, [r7, #30]
        break;
 800392e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d074      	beq.n	8003a20 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	005a      	lsls	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	d916      	bls.n	8003980 <UART_SetConfig+0x19c>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d212      	bcs.n	8003980 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f023 030f 	bic.w	r3, r3, #15
 8003962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	b29a      	uxth	r2, r3
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	4313      	orrs	r3, r2
 8003974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	89fa      	ldrh	r2, [r7, #14]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	e04f      	b.n	8003a20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	77bb      	strb	r3, [r7, #30]
 8003984:	e04c      	b.n	8003a20 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003986:	7ffb      	ldrb	r3, [r7, #31]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d828      	bhi.n	80039de <UART_SetConfig+0x1fa>
 800398c:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <UART_SetConfig+0x1b0>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039c1 	.word	0x080039c1
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	080039df 	.word	0x080039df
 80039a4:	080039cf 	.word	0x080039cf
 80039a8:	080039df 	.word	0x080039df
 80039ac:	080039df 	.word	0x080039df
 80039b0:	080039df 	.word	0x080039df
 80039b4:	080039d7 	.word	0x080039d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7ff fb38 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 80039bc:	61b8      	str	r0, [r7, #24]
        break;
 80039be:	e013      	b.n	80039e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7ff fb56 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80039c4:	61b8      	str	r0, [r7, #24]
        break;
 80039c6:	e00f      	b.n	80039e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c8:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <UART_SetConfig+0x268>)
 80039ca:	61bb      	str	r3, [r7, #24]
        break;
 80039cc:	e00c      	b.n	80039e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ce:	f7ff facd 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 80039d2:	61b8      	str	r0, [r7, #24]
        break;
 80039d4:	e008      	b.n	80039e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039da:	61bb      	str	r3, [r7, #24]
        break;
 80039dc:	e004      	b.n	80039e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	77bb      	strb	r3, [r7, #30]
        break;
 80039e6:	bf00      	nop
    }

    if (pclk != 0U)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	085a      	lsrs	r2, r3, #1
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d909      	bls.n	8003a1c <UART_SetConfig+0x238>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0e:	d205      	bcs.n	8003a1c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e001      	b.n	8003a20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	efff69f3 	.word	0xefff69f3
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40004400 	.word	0x40004400
 8003a48:	40004800 	.word	0x40004800
 8003a4c:	007a1200 	.word	0x007a1200

08003a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01a      	beq.n	8003b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b4e:	d10a      	bne.n	8003b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b098      	sub	sp, #96	@ 0x60
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba4:	f7fc fe76 	bl	8000894 <HAL_GetTick>
 8003ba8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d12e      	bne.n	8003c16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f88c 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d021      	beq.n	8003c16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e6      	bne.n	8003bd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e062      	b.n	8003cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d149      	bne.n	8003cb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f856 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03c      	beq.n	8003cb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e6      	bne.n	8003c3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3308      	adds	r3, #8
 8003c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e011      	b.n	8003cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3758      	adds	r7, #88	@ 0x58
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	e04f      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d04b      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fc fdc9 	bl	8000894 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e04e      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d037      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b80      	cmp	r3, #128	@ 0x80
 8003d2a:	d034      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d031      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d110      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f8ff 	bl	8003f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2208      	movs	r2, #8
 8003d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e029      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d70:	d111      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8e5 	bl	8003f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e00f      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d0a0      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b097      	sub	sp, #92	@ 0x5c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df2:	d10e      	bne.n	8003e12 <UART_Start_Receive_IT+0x52>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <UART_Start_Receive_IT+0x48>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e06:	e02d      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	22ff      	movs	r2, #255	@ 0xff
 8003e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e10:	e028      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <UART_Start_Receive_IT+0x76>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <UART_Start_Receive_IT+0x6c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e2a:	e01b      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	227f      	movs	r2, #127	@ 0x7f
 8003e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e34:	e016      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3e:	d10d      	bne.n	8003e5c <UART_Start_Receive_IT+0x9c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <UART_Start_Receive_IT+0x92>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	227f      	movs	r2, #127	@ 0x7f
 8003e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e50:	e008      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	223f      	movs	r2, #63	@ 0x3f
 8003e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e5a:	e003      	b.n	8003e64 <UART_Start_Receive_IT+0xa4>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	@ 0x22
 8003e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb0:	d107      	bne.n	8003ec2 <UART_Start_Receive_IT+0x102>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <UART_Start_Receive_IT+0x184>)
 8003ebe:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ec0:	e002      	b.n	8003ec8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <UART_Start_Receive_IT+0x188>)
 8003ec6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d019      	beq.n	8003f04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_Start_Receive_IT+0x110>
 8003f02:	e018      	b.n	8003f36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	613b      	str	r3, [r7, #16]
   return(result);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	69f9      	ldr	r1, [r7, #28]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e6      	bne.n	8003f04 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	375c      	adds	r7, #92	@ 0x5c
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	0800423d 	.word	0x0800423d
 8003f48:	08004095 	.word	0x08004095

08003f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b095      	sub	sp, #84	@ 0x54
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d118      	bne.n	8003ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0310 	bic.w	r3, r3, #16
 8003fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	613b      	str	r3, [r7, #16]
   return(result);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004008:	bf00      	nop
 800400a:	3754      	adds	r7, #84	@ 0x54
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fbc0 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60bb      	str	r3, [r7, #8]
   return(result);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	613b      	str	r3, [r7, #16]
   return(result);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fb8c 	bl	80037a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408c:	bf00      	nop
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b09c      	sub	sp, #112	@ 0x70
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ac:	2b22      	cmp	r3, #34	@ 0x22
 80040ae:	f040 80b9 	bne.w	8004224 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80040b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040c0:	b2d9      	uxtb	r1, r3
 80040c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	400a      	ands	r2, r1
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 809c 	bne.w	8004234 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800410a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800410c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800411a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800411c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3308      	adds	r3, #8
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	667b      	str	r3, [r7, #100]	@ 0x64
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800414e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800415c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e5      	bne.n	800412e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d018      	beq.n	80041b6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	623b      	str	r3, [r7, #32]
   return(result);
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004198:	663b      	str	r3, [r7, #96]	@ 0x60
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d12e      	bne.n	800421c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	617b      	str	r3, [r7, #20]
   return(result);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e6      	bne.n	80041c4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d103      	bne.n	800420c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2210      	movs	r2, #16
 800420a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fad9 	bl	80037cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800421a:	e00b      	b.n	8004234 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc f95b 	bl	80004d8 <HAL_UART_RxCpltCallback>
}
 8004222:	e007      	b.n	8004234 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	619a      	str	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	3770      	adds	r7, #112	@ 0x70
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b09c      	sub	sp, #112	@ 0x70
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800424a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004254:	2b22      	cmp	r3, #34	@ 0x22
 8004256:	f040 80b9 	bne.w	80043cc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004260:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800426a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800426e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004272:	4013      	ands	r3, r2
 8004274:	b29a      	uxth	r2, r3
 8004276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004278:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 809c 	bne.w	80043dc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80042b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80042c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80042d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e6      	bne.n	80042a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	61fb      	str	r3, [r7, #28]
   return(result);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e6      	bne.n	800432c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004362:	2b01      	cmp	r3, #1
 8004364:	d12e      	bne.n	80043c4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	60bb      	str	r3, [r7, #8]
   return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e6      	bne.n	800436c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d103      	bne.n	80043b4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fa05 	bl	80037cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043c2:	e00b      	b.n	80043dc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc f887 	bl	80004d8 <HAL_UART_RxCpltCallback>
}
 80043ca:	e007      	b.n	80043dc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	3770      	adds	r7, #112	@ 0x70
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <memset>:
 80043f8:	4402      	add	r2, r0
 80043fa:	4603      	mov	r3, r0
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d100      	bne.n	8004402 <memset+0xa>
 8004400:	4770      	bx	lr
 8004402:	f803 1b01 	strb.w	r1, [r3], #1
 8004406:	e7f9      	b.n	80043fc <memset+0x4>

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	@ (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	@ (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	@ (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	@ (800444c <__libc_init_array+0x44>)
 800441c:	f000 f818 	bl	8004450 <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	080044a0 	.word	0x080044a0
 8004444:	080044a0 	.word	0x080044a0
 8004448:	080044a0 	.word	0x080044a0
 800444c:	080044a4 	.word	0x080044a4

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
