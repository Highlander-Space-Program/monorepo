
F303_HITL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004588  08004588  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004588  08004588  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004590  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000100  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba0b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b5a  00000000  00000000  00011a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  000135a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000681  00000000  00000000  00013e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a974  00000000  00000000  000144a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b321  00000000  00000000  0002ee1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cae3  00000000  00000000  0003a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d6c21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002214  00000000  00000000  000d6c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000d8e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004538 	.word	0x08004538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004538 	.word	0x08004538

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb15 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f833 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d3 	bl	8000380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8a1 	bl	8000320 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f869 	bl	80002b4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001e2:	2102      	movs	r1, #2
 80001e4:	4812      	ldr	r0, [pc, #72]	@ (8000230 <main+0x68>)
 80001e6:	f000 ff6a 	bl	80010be <HAL_CAN_ActivateNotification>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <main+0x2c>
    	  {
    		  Error_Handler();
 80001f0:	f000 f9b0 	bl	8000554 <Error_Handler>
    	  }
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	623b      	str	r3, [r7, #32]
//  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
  canfilterconfig.FilterBank = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
//  canfilterconfig.FilterIdHigh = 0x446<<5;
//  canfilterconfig.FilterIdLow = 0;
//  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000200:	2300      	movs	r3, #0
 8000202:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000208:	2300      	movs	r3, #0
 800020a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800020c:	2301      	movs	r3, #1
 800020e:	61fb      	str	r3, [r7, #28]
//  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000210:	463b      	mov	r3, r7
 8000212:	4619      	mov	r1, r3
 8000214:	4806      	ldr	r0, [pc, #24]	@ (8000230 <main+0x68>)
 8000216:	f000 fc52 	bl	8000abe <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <main+0x68>)
 800021c:	f000 fd19 	bl	8000c52 <HAL_CAN_Start>
  HAL_UART_Receive_IT(&huart2, urx_buf, 10);
 8000220:	220a      	movs	r2, #10
 8000222:	4904      	ldr	r1, [pc, #16]	@ (8000234 <main+0x6c>)
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <main+0x70>)
 8000226:	f003 f806 	bl	8003236 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x62>
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028
 8000234:	200000fc 	.word	0x200000fc
 8000238:	20000050 	.word	0x20000050

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	@ 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 f948 	bl	80044e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2310      	movs	r3, #16
 8000268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fcaa 	bl	8001bcc <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027e:	f000 f969 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fcd4 	bl	8002c48 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a6:	f000 f955 	bl	8000554 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	@ 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_CAN_Init+0x64>)
 80002ba:	4a18      	ldr	r2, [pc, #96]	@ (800031c <MX_CAN_Init+0x68>)
 80002bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80002be:	4b16      	ldr	r3, [pc, #88]	@ (8000318 <MX_CAN_Init+0x64>)
 80002c0:	2204      	movs	r2, #4
 80002c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_CAN_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ca:	4b13      	ldr	r3, [pc, #76]	@ (8000318 <MX_CAN_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_CAN_Init+0x64>)
 80002d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_CAN_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_CAN_Init+0x64>)
 8000304:	f000 fae0 	bl	80008c8 <HAL_CAN_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800030e:	f000 f921 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	40006400 	.word	0x40006400

08000320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	@ (800037c <MX_USART2_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800032c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_USART2_UART_Init+0x58>)
 8000364:	f002 fe90 	bl	8003088 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f8f1 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000050 	.word	0x20000050
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <MX_GPIO_Init+0x8c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a1c      	ldr	r2, [pc, #112]	@ (800040c <MX_GPIO_Init+0x8c>)
 800039c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a16      	ldr	r2, [pc, #88]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a10      	ldr	r2, [pc, #64]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_GPIO_Init+0x8c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	480b      	ldr	r0, [pc, #44]	@ (8000410 <MX_GPIO_Init+0x90>)
 80003e4:	f001 fbc0 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003e8:	2308      	movs	r3, #8
 80003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_GPIO_Init+0x90>)
 8000400:	f001 fa40 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400

08000414 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800041c:	2108      	movs	r1, #8
 800041e:	4816      	ldr	r0, [pc, #88]	@ (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000420:	f001 fbba 	bl	8001b98 <HAL_GPIO_TogglePin>
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000424:	4b15      	ldr	r3, [pc, #84]	@ (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000426:	4a16      	ldr	r2, [pc, #88]	@ (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 fd25 	bl	8000e7a <HAL_CAN_GetRxMessage>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
  {
    Error_Handler();
 8000436:	f000 f88d 	bl	8000554 <Error_Handler>
  }
  uint8_t relay_buf[10];
  uint16_t rx_id = RxHeader.StdId;
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	82fb      	strh	r3, [r7, #22]
  relay_buf[0] = rx_id >> 8;
 8000440:	8afb      	ldrh	r3, [r7, #22]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b29b      	uxth	r3, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	723b      	strb	r3, [r7, #8]
  uint8_t id_L = rx_id & 0xFF;
 800044a:	8afb      	ldrh	r3, [r7, #22]
 800044c:	757b      	strb	r3, [r7, #21]
  relay_buf[1] = rx_id & 0xFF;
 800044e:	8afb      	ldrh	r3, [r7, #22]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	727b      	strb	r3, [r7, #9]
  memcpy(&relay_buf[2], RxData, 8);
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000456:	f107 020a 	add.w	r2, r7, #10
 800045a:	cb03      	ldmia	r3!, {r0, r1}
 800045c:	6010      	str	r0, [r2, #0]
 800045e:	6051      	str	r1, [r2, #4]
  HAL_UART_Transmit(&huart2, relay_buf, 10, 10);
 8000460:	f107 0108 	add.w	r1, r7, #8
 8000464:	230a      	movs	r3, #10
 8000466:	220a      	movs	r2, #10
 8000468:	4806      	ldr	r0, [pc, #24]	@ (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800046a:	f002 fe5b 	bl	8003124 <HAL_UART_Transmit>
}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	48000400 	.word	0x48000400
 800047c:	200000f4 	.word	0x200000f4
 8000480:	200000d8 	.word	0x200000d8
 8000484:	20000050 	.word	0x20000050

08000488 <Parse_Config_Command>:

void Parse_Config_Command() {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  if (urx_buf[9] == 0x01) {
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <Parse_Config_Command+0x18>)
 800048e:	7a5b      	ldrb	r3, [r3, #9]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d104      	bne.n	800049e <Parse_Config_Command+0x16>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000494:	2108      	movs	r1, #8
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <Parse_Config_Command+0x1c>)
 8000498:	f001 fb7e 	bl	8001b98 <HAL_GPIO_TogglePin>
	  return;
 800049c:	bf00      	nop
  }
}
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000fc 	.word	0x200000fc
 80004a4:	48000400 	.word	0x48000400

080004a8 <send_can_msg>:

HAL_StatusTypeDef send_can_msg(uint16_t destID, const uint8_t *data, size_t len) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	@ 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	81fb      	strh	r3, [r7, #14]
    CAN_TxHeaderTypeDef header;
    header.IDE = CAN_ID_STD;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
    header.StdId = destID;
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	617b      	str	r3, [r7, #20]
    header.RTR = CAN_RTR_DATA;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
    header.TransmitGlobalTime = DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    header.DLC = len;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24

    uint32_t mailbox;

    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	f107 0114 	add.w	r1, r7, #20
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	4806      	ldr	r0, [pc, #24]	@ (80004f0 <send_can_msg+0x48>)
 80004d8:	f000 fbff 	bl	8000cda <HAL_CAN_AddTxMessage>
 80004dc:	4603      	mov	r3, r0
 80004de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != HAL_OK) {

    }

    return status;
 80004e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3730      	adds	r7, #48	@ 0x30
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000028 	.word	0x20000028

080004f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint16_t destID = (urx_buf[0] << 8) | (urx_buf[1]);
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <HAL_UART_RxCpltCallback+0x58>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <HAL_UART_RxCpltCallback+0x58>)
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	b21b      	sxth	r3, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	b21b      	sxth	r3, r3
 800050e:	82fb      	strh	r3, [r7, #22]
  if (destID == 0x0000) {
 8000510:	8afb      	ldrh	r3, [r7, #22]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d102      	bne.n	800051c <HAL_UART_RxCpltCallback+0x28>
	  Parse_Config_Command();
 8000516:	f7ff ffb7 	bl	8000488 <Parse_Config_Command>
 800051a:	e00d      	b.n	8000538 <HAL_UART_RxCpltCallback+0x44>
  }
  else {
	  uint8_t data[8];
	  memcpy(data, &urx_buf[2], 8);
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <HAL_UART_RxCpltCallback+0x58>)
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	3202      	adds	r2, #2
 8000524:	6810      	ldr	r0, [r2, #0]
 8000526:	6851      	ldr	r1, [r2, #4]
 8000528:	c303      	stmia	r3!, {r0, r1}
	  send_can_msg(destID, data, 8);
 800052a:	f107 010c 	add.w	r1, r7, #12
 800052e:	8afb      	ldrh	r3, [r7, #22]
 8000530:	2208      	movs	r2, #8
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffb8 	bl	80004a8 <send_can_msg>
  }
  HAL_UART_Receive_IT(&huart2, urx_buf, 10); //You need to toggle a breakpoint on this line!
 8000538:	220a      	movs	r2, #10
 800053a:	4904      	ldr	r1, [pc, #16]	@ (800054c <HAL_UART_RxCpltCallback+0x58>)
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <HAL_UART_RxCpltCallback+0x5c>)
 800053e:	f002 fe7a 	bl	8003236 <HAL_UART_Receive_IT>
}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000fc 	.word	0x200000fc
 8000550:	20000050 	.word	0x20000050

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a25      	ldr	r2, [pc, #148]	@ (800065c <HAL_CAN_MspInit+0xb4>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d143      	bne.n	8000652 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <HAL_CAN_MspInit+0xb8>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800060c:	2309      	movs	r3, #9
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f001 f933 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000630:	2309      	movs	r3, #9
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 f921 	bl	8001884 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2014      	movs	r0, #20
 8000648:	f001 f869 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800064c:	2014      	movs	r0, #20
 800064e:	f001 f882 	bl	8001756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	@ 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40006400 	.word	0x40006400
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <HAL_UART_MspInit+0x90>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d131      	bne.n	80006ea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 800068c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006b6:	f248 0304 	movw	r3, #32772	@ 0x8004
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c8:	2307      	movs	r3, #7
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f001 f8d5 	bl	8001884 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2026      	movs	r0, #38	@ 0x26
 80006e0:	f001 f81d 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006e4:	2026      	movs	r0, #38	@ 0x26
 80006e6:	f001 f836 	bl	8001756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	@ 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40004400 	.word	0x40004400
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <MemManage_Handler+0x4>

08000714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <UsageFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f000 f899 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000760:	4802      	ldr	r0, [pc, #8]	@ (800076c <CAN_RX0_IRQHandler+0x10>)
 8000762:	f000 fcd2 	bl	800110a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000028 	.word	0x20000028

08000770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <USART2_IRQHandler+0x10>)
 8000776:	f002 fda3 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000050 	.word	0x20000050

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff ffea 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f003 fe8b 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fcf5 	bl	80001c8 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ec:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 80007f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f4:	2000010c 	.word	0x2000010c

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 ff7b 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fea2 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 ff93 	bl	8001772 <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 ff5b 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000108 	.word	0x20000108

080008b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000108 	.word	0x20000108

080008c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e0ed      	b.n	8000ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe5e 	bl	80005a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0201 	orr.w	r2, r2, #1
 80008fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008fc:	f7ff ffd8 	bl	80008b0 <HAL_GetTick>
 8000900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000902:	e012      	b.n	800092a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000904:	f7ff ffd4 	bl	80008b0 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	2b0a      	cmp	r3, #10
 8000910:	d90b      	bls.n	800092a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000916:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2205      	movs	r2, #5
 8000922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e0c5      	b.n	8000ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0e5      	beq.n	8000904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0202 	bic.w	r2, r2, #2
 8000946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000948:	f7ff ffb2 	bl	80008b0 <HAL_GetTick>
 800094c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800094e:	e012      	b.n	8000976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000950:	f7ff ffae 	bl	80008b0 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b0a      	cmp	r3, #10
 800095c:	d90b      	bls.n	8000976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2205      	movs	r2, #5
 800096e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e09f      	b.n	8000ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1e5      	bne.n	8000950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7e1b      	ldrb	r3, [r3, #24]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d108      	bne.n	800099e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e007      	b.n	80009ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7e5b      	ldrb	r3, [r3, #25]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d108      	bne.n	80009c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e007      	b.n	80009d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7e9b      	ldrb	r3, [r3, #26]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d108      	bne.n	80009f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0220 	orr.w	r2, r2, #32
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e007      	b.n	8000a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0220 	bic.w	r2, r2, #32
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7edb      	ldrb	r3, [r3, #27]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d108      	bne.n	8000a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0210 	bic.w	r2, r2, #16
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e007      	b.n	8000a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0210 	orr.w	r2, r2, #16
 8000a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7f1b      	ldrb	r3, [r3, #28]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d108      	bne.n	8000a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0208 	orr.w	r2, r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e007      	b.n	8000a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0208 	bic.w	r2, r2, #8
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7f5b      	ldrb	r3, [r3, #29]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0204 	orr.w	r2, r2, #4
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e007      	b.n	8000a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 0204 	bic.w	r2, r2, #4
 8000a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	ea42 0103 	orr.w	r1, r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b087      	sub	sp, #28
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ad6:	7cfb      	ldrb	r3, [r7, #19]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d003      	beq.n	8000ae4 <HAL_CAN_ConfigFilter+0x26>
 8000adc:	7cfb      	ldrb	r3, [r7, #19]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	f040 80aa 	bne.w	8000c38 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000aea:	f043 0201 	orr.w	r2, r3, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	2201      	movs	r2, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d123      	bne.n	8000b66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3248      	adds	r2, #72	@ 0x48
 8000b46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b5c:	6979      	ldr	r1, [r7, #20]
 8000b5e:	3348      	adds	r3, #72	@ 0x48
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d122      	bne.n	8000bb4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3248      	adds	r2, #72	@ 0x48
 8000b94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ba8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000baa:	6979      	ldr	r1, [r7, #20]
 8000bac:	3348      	adds	r3, #72	@ 0x48
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d109      	bne.n	8000bd0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bce:	e007      	b.n	8000be0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d107      	bne.n	8000c24 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c2a:	f023 0201 	bic.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e006      	b.n	8000c46 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
  }
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d12e      	bne.n	8000cc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c7e:	f7ff fe17 	bl	80008b0 <HAL_GetTick>
 8000c82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c84:	e012      	b.n	8000cac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c86:	f7ff fe13 	bl	80008b0 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b0a      	cmp	r3, #10
 8000c92:	d90b      	bls.n	8000cac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c98:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e012      	b.n	8000cd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1e5      	bne.n	8000c86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e006      	b.n	8000cd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
  }
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b089      	sub	sp, #36	@ 0x24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf8:	7ffb      	ldrb	r3, [r7, #31]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d003      	beq.n	8000d06 <HAL_CAN_AddTxMessage+0x2c>
 8000cfe:	7ffb      	ldrb	r3, [r7, #31]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	f040 80ad 	bne.w	8000e60 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d105      	bne.n	8000d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 8095 	beq.w	8000e50 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	0e1b      	lsrs	r3, r3, #24
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d30:	2201      	movs	r2, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	409a      	lsls	r2, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10d      	bne.n	8000d5e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	6809      	ldr	r1, [r1, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3318      	adds	r3, #24
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	440b      	add	r3, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e00f      	b.n	8000d7e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3318      	adds	r3, #24
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	440b      	add	r3, r1
 8000d7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6819      	ldr	r1, [r3, #0]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3318      	adds	r3, #24
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3304      	adds	r3, #4
 8000d90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	7d1b      	ldrb	r3, [r3, #20]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d111      	bne.n	8000dbe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3318      	adds	r3, #24
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	3304      	adds	r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	6811      	ldr	r1, [r2, #0]
 8000dae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3318      	adds	r3, #24
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	440b      	add	r3, r1
 8000dba:	3304      	adds	r3, #4
 8000dbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	061a      	lsls	r2, r3, #24
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3306      	adds	r3, #6
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	041b      	lsls	r3, r3, #16
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3305      	adds	r3, #5
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	3204      	adds	r2, #4
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	4610      	mov	r0, r2
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	ea43 0200 	orr.w	r2, r3, r0
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	440b      	add	r3, r1
 8000df0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000df4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	061a      	lsls	r2, r3, #24
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3302      	adds	r3, #2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	4610      	mov	r0, r2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	6811      	ldr	r1, [r2, #0]
 8000e1c:	ea43 0200 	orr.w	r2, r3, r0
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	440b      	add	r3, r1
 8000e26:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3318      	adds	r3, #24
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	f043 0201 	orr.w	r2, r3, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3318      	adds	r3, #24
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	440b      	add	r3, r1
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e00e      	b.n	8000e6e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e006      	b.n	8000e6e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
  }
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b087      	sub	sp, #28
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d003      	beq.n	8000e9e <HAL_CAN_GetRxMessage+0x24>
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	f040 8103 	bne.w	80010a4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10e      	bne.n	8000ec2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0f7      	b.n	80010b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d107      	bne.n	8000ee0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0e8      	b.n	80010b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	331b      	adds	r3, #27
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	4413      	add	r3, r2
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0204 	and.w	r2, r3, #4
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	331b      	adds	r3, #27
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	4413      	add	r3, r2
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0d5b      	lsrs	r3, r3, #21
 8000f0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	331b      	adds	r3, #27
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0202 	and.w	r2, r3, #2
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	331b      	adds	r3, #27
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4413      	add	r3, r2
 8000f52:	3304      	adds	r3, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2208      	movs	r2, #8
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	e00b      	b.n	8000f7e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	331b      	adds	r3, #27
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 020f 	and.w	r2, r3, #15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	331b      	adds	r3, #27
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	331b      	adds	r3, #27
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0a1a      	lsrs	r2, r3, #8
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0c1a      	lsrs	r2, r3, #16
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0e1a      	lsrs	r2, r3, #24
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3303      	adds	r3, #3
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0a1a      	lsrs	r2, r3, #8
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3305      	adds	r3, #5
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1a      	lsrs	r2, r3, #16
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3306      	adds	r3, #6
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4413      	add	r3, r2
 8001068:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0e1a      	lsrs	r2, r3, #24
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d108      	bne.n	8001090 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0220 	orr.w	r2, r2, #32
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0220 	orr.w	r2, r2, #32
 800109e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e006      	b.n	80010b2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
  }
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d002      	beq.n	80010dc <HAL_CAN_ActivateNotification+0x1e>
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d109      	bne.n	80010f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6959      	ldr	r1, [r3, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e006      	b.n	80010fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
  }
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b08a      	sub	sp, #40	@ 0x28
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d07c      	beq.n	800124a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d023      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f983 	bl	8001478 <HAL_CAN_TxMailbox0CompleteCallback>
 8001172:	e016      	b.n	80011a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e00c      	b.n	80011a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
 800119a:	e002      	b.n	80011a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f989 	bl	80014b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d024      	beq.n	80011f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f963 	bl	800148c <HAL_CAN_TxMailbox1CompleteCallback>
 80011c6:	e016      	b.n	80011f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011da:	e00c      	b.n	80011f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e002      	b.n	80011f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f969 	bl	80014c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d024      	beq.n	800124a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001208:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f943 	bl	80014a0 <HAL_CAN_TxMailbox2CompleteCallback>
 800121a:	e016      	b.n	800124a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
 800122e:	e00c      	b.n	800124a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	e002      	b.n	800124a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f949 	bl	80014dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2210      	movs	r2, #16
 800126c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2208      	movs	r2, #8
 8001288:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f930 	bl	80014f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f8b3 	bl	8000414 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2210      	movs	r2, #16
 80012d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2208      	movs	r2, #8
 80012ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f912 	bl	8001518 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f8f9 	bl	8001504 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2210      	movs	r2, #16
 800132c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8fc 	bl	800152c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2208      	movs	r2, #8
 800134e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f8f5 	bl	8001540 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d07b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d072      	beq.n	8001450 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d043      	beq.n	8001450 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03e      	beq.n	8001450 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013d8:	2b60      	cmp	r3, #96	@ 0x60
 80013da:	d02b      	beq.n	8001434 <HAL_CAN_IRQHandler+0x32a>
 80013dc:	2b60      	cmp	r3, #96	@ 0x60
 80013de:	d82e      	bhi.n	800143e <HAL_CAN_IRQHandler+0x334>
 80013e0:	2b50      	cmp	r3, #80	@ 0x50
 80013e2:	d022      	beq.n	800142a <HAL_CAN_IRQHandler+0x320>
 80013e4:	2b50      	cmp	r3, #80	@ 0x50
 80013e6:	d82a      	bhi.n	800143e <HAL_CAN_IRQHandler+0x334>
 80013e8:	2b40      	cmp	r3, #64	@ 0x40
 80013ea:	d019      	beq.n	8001420 <HAL_CAN_IRQHandler+0x316>
 80013ec:	2b40      	cmp	r3, #64	@ 0x40
 80013ee:	d826      	bhi.n	800143e <HAL_CAN_IRQHandler+0x334>
 80013f0:	2b30      	cmp	r3, #48	@ 0x30
 80013f2:	d010      	beq.n	8001416 <HAL_CAN_IRQHandler+0x30c>
 80013f4:	2b30      	cmp	r3, #48	@ 0x30
 80013f6:	d822      	bhi.n	800143e <HAL_CAN_IRQHandler+0x334>
 80013f8:	2b10      	cmp	r3, #16
 80013fa:	d002      	beq.n	8001402 <HAL_CAN_IRQHandler+0x2f8>
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d005      	beq.n	800140c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001400:	e01d      	b.n	800143e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800140a:	e019      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001414:	e014      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f043 0320 	orr.w	r3, r3, #32
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800141e:	e00f      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001428:	e00a      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001432:	e005      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800143c:	e000      	b.n	8001440 <HAL_CAN_IRQHandler+0x336>
            break;
 800143e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800144e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2204      	movs	r2, #4
 8001456:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f872 	bl	8001554 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	@ (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	@ (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	@ (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e02e      	b.n	80017fa <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d008      	beq.n	80017b8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e020      	b.n	80017fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 020e 	bic.w	r2, r2, #14
 80017c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001818:	2b02      	cmp	r3, #2
 800181a:	d005      	beq.n	8001828 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2204      	movs	r2, #4
 8001820:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e027      	b.n	8001878 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020e 	bic.w	r2, r2, #14
 8001836:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    }
  }
  return status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e14e      	b.n	8001b32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8140 	beq.w	8001b2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x40>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 809a 	beq.w	8001b2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b55      	ldr	r3, [pc, #340]	@ (8001b50 <HAL_GPIO_Init+0x2cc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a54      	ldr	r2, [pc, #336]	@ (8001b50 <HAL_GPIO_Init+0x2cc>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b52      	ldr	r3, [pc, #328]	@ (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a50      	ldr	r2, [pc, #320]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1e0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a46      	ldr	r2, [pc, #280]	@ (8001b58 <HAL_GPIO_Init+0x2d4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1dc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a45      	ldr	r2, [pc, #276]	@ (8001b5c <HAL_GPIO_Init+0x2d8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1d8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a44      	ldr	r2, [pc, #272]	@ (8001b60 <HAL_GPIO_Init+0x2dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1d4>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a58:	2305      	movs	r3, #5
 8001a5a:	e004      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x1e2>
 8001a64:	2300      	movs	r3, #0
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	f002 0203 	and.w	r2, r2, #3
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a76:	4937      	ldr	r1, [pc, #220]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a84:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ad2:	4a24      	ldr	r2, [pc, #144]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001afc:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b26:	4a0f      	ldr	r2, [pc, #60]	@ (8001b64 <HAL_GPIO_Init+0x2e0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f aea9 	bne.w	8001894 <HAL_GPIO_Init+0x10>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43d9      	mvns	r1, r3
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f001 b823 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 817d 	beq.w	8001f02 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c08:	4bbc      	ldr	r3, [pc, #752]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4bb9      	ldr	r3, [pc, #740]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d15c      	bne.n	8001cda <HAL_RCC_OscConfig+0x10e>
 8001c20:	4bb6      	ldr	r3, [pc, #728]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d155      	bne.n	8001cda <HAL_RCC_OscConfig+0x10e>
 8001c2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c32:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0x94>
 8001c5a:	4ba8      	ldr	r3, [pc, #672]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e015      	b.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001c60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c64:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001c88:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c90:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001c94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c98:	fa92 f2a2 	rbit	r2, r2
 8001c9c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ca0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 811f 	beq.w	8001f00 <HAL_RCC_OscConfig+0x334>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 8116 	bne.w	8001f00 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f000 bfaf 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12e>
 8001cec:	4b83      	ldr	r3, [pc, #524]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a82      	ldr	r2, [pc, #520]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e036      	b.n	8001d68 <HAL_RCC_OscConfig+0x19c>
 8001cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x158>
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7b      	ldr	r2, [pc, #492]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e021      	b.n	8001d68 <HAL_RCC_OscConfig+0x19c>
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x184>
 8001d36:	4b71      	ldr	r3, [pc, #452]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a70      	ldr	r2, [pc, #448]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b6e      	ldr	r3, [pc, #440]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x19c>
 8001d50:	4b6a      	ldr	r3, [pc, #424]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a69      	ldr	r2, [pc, #420]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b67      	ldr	r3, [pc, #412]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a66      	ldr	r2, [pc, #408]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d68:	4b64      	ldr	r3, [pc, #400]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	f023 020f 	bic.w	r2, r3, #15
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	495f      	ldr	r1, [pc, #380]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d059      	beq.n	8001e46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fd8d 	bl	80008b0 <HAL_GetTick>
 8001d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7fe fd88 	bl	80008b0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	@ 0x64
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 bf43 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001dc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x218>
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e015      	b.n	8001e10 <HAL_RCC_OscConfig+0x244>
 8001de4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dfc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e14:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e1c:	fa92 f2a2 	rbit	r2, r2
 8001e20:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f042 0220 	orr.w	r2, r2, #32
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f002 021f 	and.w	r2, r2, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ab      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1d0>
 8001e44:	e05d      	b.n	8001f02 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe fd33 	bl	80008b0 <HAL_GetTick>
 8001e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e50:	f7fe fd2e 	bl	80008b0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	@ 0x64
 8001e5e:	d902      	bls.n	8001e66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	f000 bee9 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 8001e66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e6a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2cc>
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e015      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f8>
 8001e98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001eb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ec8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ecc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ed8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ab      	bne.n	8001e50 <HAL_RCC_OscConfig+0x284>
 8001ef8:	e003      	b.n	8001f02 <HAL_RCC_OscConfig+0x336>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 817d 	beq.w	8002212 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f18:	4ba6      	ldr	r3, [pc, #664]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f24:	4ba3      	ldr	r3, [pc, #652]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d172      	bne.n	8002016 <HAL_RCC_OscConfig+0x44a>
 8001f30:	4ba0      	ldr	r3, [pc, #640]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d16c      	bne.n	8002016 <HAL_RCC_OscConfig+0x44a>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3a0>
 8001f66:	4b93      	ldr	r3, [pc, #588]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e013      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c8>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f90:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	2202      	movs	r2, #2
 8001f96:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001f9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f9e:	fa92 f2a2 	rbit	r2, r2
 8001fa2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001fa6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f042 0220 	orr.w	r2, r2, #32
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 021f 	and.w	r2, r2, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCC_OscConfig+0x410>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f000 be2e 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	21f8      	movs	r1, #248	@ 0xf8
 8001ff2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ffa:	fa91 f1a1 	rbit	r1, r1
 8001ffe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002002:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002006:	fab1 f181 	clz	r1, r1
 800200a:	b2c9      	uxtb	r1, r1
 800200c:	408b      	lsls	r3, r1
 800200e:	4969      	ldr	r1, [pc, #420]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002014:	e0fd      	b.n	8002212 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8088 	beq.w	8002138 <HAL_RCC_OscConfig+0x56c>
 8002028:	2301      	movs	r3, #1
 800202a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800203a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002048:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	461a      	mov	r2, r3
 8002050:	2301      	movs	r3, #1
 8002052:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fc2c 	bl	80008b0 <HAL_GetTick>
 8002058:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe fc27 	bl	80008b0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	f000 bde2 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 8002074:	2302      	movs	r3, #2
 8002076:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002086:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d8>
 800209e:	4b45      	ldr	r3, [pc, #276]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x500>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020c8:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	2202      	movs	r2, #2
 80020ce:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80020d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80020de:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0af      	beq.n	800205e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	21f8      	movs	r1, #248	@ 0xf8
 8002114:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800211c:	fa91 f1a1 	rbit	r1, r1
 8002120:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002124:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002128:	fab1 f181 	clz	r1, r1
 800212c:	b2c9      	uxtb	r1, r1
 800212e:	408b      	lsls	r3, r1
 8002130:	4920      	ldr	r1, [pc, #128]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
 8002136:	e06c      	b.n	8002212 <HAL_RCC_OscConfig+0x646>
 8002138:	2301      	movs	r3, #1
 800213a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800214a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002158:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	461a      	mov	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fba4 	bl	80008b0 <HAL_GetTick>
 8002168:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe fb9f 	bl	80008b0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d902      	bls.n	8002184 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f000 bd5a 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d104      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5ec>
 80021ae:	4b01      	ldr	r3, [pc, #4]	@ (80021b4 <HAL_RCC_OscConfig+0x5e8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e015      	b.n	80021e0 <HAL_RCC_OscConfig+0x614>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	2302      	movs	r3, #2
 80021ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80021d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80021dc:	4bc8      	ldr	r3, [pc, #800]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	2202      	movs	r2, #2
 80021e2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80021e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80021f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f002 021f 	and.w	r2, r2, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ad      	bne.n	800216e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8110 	beq.w	8002448 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d079      	beq.n	800232c <HAL_RCC_OscConfig+0x760>
 8002238:	2301      	movs	r3, #1
 800223a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800224a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4bab      	ldr	r3, [pc, #684]	@ (8002504 <HAL_RCC_OscConfig+0x938>)
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	461a      	mov	r2, r3
 800225e:	2301      	movs	r3, #1
 8002260:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fb25 	bl	80008b0 <HAL_GetTick>
 8002266:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe fb20 	bl	80008b0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d902      	bls.n	8002282 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	f000 bcdb 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 8002282:	2302      	movs	r3, #2
 8002284:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002298:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800229c:	2202      	movs	r2, #2
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fa93 f2a3 	rbit	r2, r3
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022c0:	2202      	movs	r2, #2
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022dc:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 80022de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022e8:	2102      	movs	r1, #2
 80022ea:	6019      	str	r1, [r3, #0]
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f1a3 	rbit	r1, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002302:	6019      	str	r1, [r3, #0]
  return result;
 8002304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002308:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0a0      	beq.n	800226c <HAL_RCC_OscConfig+0x6a0>
 800232a:	e08d      	b.n	8002448 <HAL_RCC_OscConfig+0x87c>
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800234e:	601a      	str	r2, [r3, #0]
  return result;
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002358:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4b68      	ldr	r3, [pc, #416]	@ (8002504 <HAL_RCC_OscConfig+0x938>)
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	461a      	mov	r2, r3
 800236a:	2300      	movs	r3, #0
 800236c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fa9f 	bl	80008b0 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fa9a 	bl	80008b0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d902      	bls.n	800238e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f000 bc55 	b.w	8002c38 <HAL_RCC_OscConfig+0x106c>
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023de:	2202      	movs	r2, #2
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 80023fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002406:	2102      	movs	r1, #2
 8002408:	6019      	str	r1, [r3, #0]
 800240a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f1a3 	rbit	r1, r3
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002420:	6019      	str	r1, [r3, #0]
  return result;
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d197      	bne.n	8002378 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 81a1 	beq.w	80027a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002464:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d116      	bne.n	800249e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4a22      	ldr	r2, [pc, #136]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247a:	61d3      	str	r3, [r2, #28]
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002496:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_RCC_OscConfig+0x93c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_RCC_OscConfig+0x93c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <HAL_RCC_OscConfig+0x93c>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe f9fb 	bl	80008b0 <HAL_GetTick>
 80024ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	e009      	b.n	80024d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe f9f6 	bl	80008b0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	@ 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e3b1      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <HAL_RCC_OscConfig+0x93c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ef      	beq.n	80024c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d10d      	bne.n	800250c <HAL_RCC_OscConfig+0x940>
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a02      	ldr	r2, [pc, #8]	@ (8002500 <HAL_RCC_OscConfig+0x934>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	e03c      	b.n	8002578 <HAL_RCC_OscConfig+0x9ac>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	10908120 	.word	0x10908120
 8002508:	40007000 	.word	0x40007000
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x96a>
 800251c:	4bc1      	ldr	r3, [pc, #772]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4ac0      	ldr	r2, [pc, #768]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	4bbe      	ldr	r3, [pc, #760]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4abd      	ldr	r2, [pc, #756]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e020      	b.n	8002578 <HAL_RCC_OscConfig+0x9ac>
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b05      	cmp	r3, #5
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x994>
 8002546:	4bb7      	ldr	r3, [pc, #732]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4ab6      	ldr	r2, [pc, #728]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4bb4      	ldr	r3, [pc, #720]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4ab3      	ldr	r2, [pc, #716]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0x9ac>
 8002560:	4bb0      	ldr	r3, [pc, #704]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4aaf      	ldr	r2, [pc, #700]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	4bad      	ldr	r3, [pc, #692]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4aac      	ldr	r2, [pc, #688]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8081 	beq.w	800268c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe f991 	bl	80008b0 <HAL_GetTick>
 800258e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe f98c 	bl	80008b0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e345      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025d8:	2202      	movs	r2, #2
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d102      	bne.n	8002618 <HAL_RCC_OscConfig+0xa4c>
 8002612:	4b84      	ldr	r3, [pc, #528]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0xa74>
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002620:	2202      	movs	r2, #2
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002644:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002648:	2102      	movs	r1, #2
 800264a:	6011      	str	r1, [r2, #0]
 800264c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002650:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	fa92 f1a2 	rbit	r1, r2
 800265a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002662:	6011      	str	r1, [r2, #0]
  return result;
 8002664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002668:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d084      	beq.n	8002594 <HAL_RCC_OscConfig+0x9c8>
 800268a:	e07f      	b.n	800278c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7fe f910 	bl	80008b0 <HAL_GetTick>
 8002690:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe f90b 	bl	80008b0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e2c4      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026f4:	601a      	str	r2, [r3, #0]
  return result;
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d102      	bne.n	800271a <HAL_RCC_OscConfig+0xb4e>
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	e013      	b.n	8002742 <HAL_RCC_OscConfig+0xb76>
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002746:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800274a:	2102      	movs	r1, #2
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002752:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002760:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002764:	6011      	str	r1, [r2, #0]
  return result;
 8002766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f002 021f 	and.w	r2, r2, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d184      	bne.n	8002696 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800278c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a22      	ldr	r2, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8242 	beq.w	8002c36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_RCC_OscConfig+0xc58>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	f000 8213 	beq.w	8002be6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 8162 	bne.w	8002a96 <HAL_RCC_OscConfig+0xeca>
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027f6:	601a      	str	r2, [r3, #0]
  return result;
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002800:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800280c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	461a      	mov	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe f84a 	bl	80008b0 <HAL_GetTick>
 800281c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002820:	e00c      	b.n	800283c <HAL_RCC_OscConfig+0xc70>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe f842 	bl	80008b0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1fd      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002844:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fa93 f2a3 	rbit	r2, r3
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002860:	601a      	str	r2, [r3, #0]
  return result;
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800286a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_OscConfig+0xcba>
 8002880:	4bb0      	ldr	r3, [pc, #704]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e027      	b.n	80028d6 <HAL_RCC_OscConfig+0xd0a>
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800288e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028da:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028e2:	6011      	str	r1, [r2, #0]
 80028e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	fa92 f1a2 	rbit	r1, r2
 80028f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028fa:	6011      	str	r1, [r2, #0]
  return result;
 80028fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002900:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d182      	bne.n	8002828 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	430b      	orrs	r3, r1
 8002944:	497f      	ldr	r1, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002952:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800296e:	601a      	str	r2, [r3, #0]
  return result;
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002978:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002984:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	461a      	mov	r2, r3
 800298c:	2301      	movs	r3, #1
 800298e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fd ff8e 	bl	80008b0 <HAL_GetTick>
 8002994:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002998:	e009      	b.n	80029ae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299a:	f7fd ff89 	bl	80008b0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e144      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0xe2c>
 80029f2:	4b54      	ldr	r3, [pc, #336]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e027      	b.n	8002a48 <HAL_RCC_OscConfig+0xe7c>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a5a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	fa92 f1a2 	rbit	r1, r2
 8002a64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a68:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a6c:	6011      	str	r1, [r2, #0]
  return result;
 8002a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a72:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d082      	beq.n	800299a <HAL_RCC_OscConfig+0xdce>
 8002a94:	e0cf      	b.n	8002c36 <HAL_RCC_OscConfig+0x106a>
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002aba:	601a      	str	r2, [r3, #0]
  return result;
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ac4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ad0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fd fee8 	bl	80008b0 <HAL_GetTick>
 8002ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fd fee3 	bl	80008b0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e09e      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b1e:	601a      	str	r2, [r3, #0]
  return result;
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <HAL_RCC_OscConfig+0xf7c>
 8002b3e:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <HAL_RCC_OscConfig+0xf78>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e029      	b.n	8002b98 <HAL_RCC_OscConfig+0xfcc>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_OscConfig+0x1078>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b9c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ba0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ba4:	6011      	str	r1, [r2, #0]
 8002ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002baa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	fa92 f1a2 	rbit	r1, r2
 8002bb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bb8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bbc:	6011      	str	r1, [r2, #0]
  return result;
 8002bbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d180      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf1a>
 8002be4:	e027      	b.n	8002c36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01e      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_RCC_OscConfig+0x1078>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b09e      	sub	sp, #120	@ 0x78
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e162      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b90      	ldr	r3, [pc, #576]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	498b      	ldr	r1, [pc, #556]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e14a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b82      	ldr	r3, [pc, #520]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	497f      	ldr	r1, [pc, #508]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80dc 	beq.w	8002e74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d13c      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xf6>
 8002cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_ClockConfig+0xa6>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	e00f      	b.n	8002d0e <HAL_RCC_ClockConfig+0xc6>
 8002cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d17b      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0f3      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d13c      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x178>
 8002d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x128>
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCC_ClockConfig+0x148>
 8002d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13a      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b2      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1a0>
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e00d      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1bc>
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	2302      	movs	r3, #2
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2202      	movs	r2, #2
 8002e06:	61ba      	str	r2, [r7, #24]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	617a      	str	r2, [r7, #20]
  return result;
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e079      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	491a      	ldr	r1, [pc, #104]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7fd fd34 	bl	80008b0 <HAL_GetTick>
 8002e48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fd fd30 	bl	80008b0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e061      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d214      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e040      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2de>
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	491a      	ldr	r1, [pc, #104]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eea:	f000 f829 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	22f0      	movs	r2, #240	@ 0xf0
 8002efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	60fa      	str	r2, [r7, #12]
  return result;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	40d3      	lsrs	r3, r2
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x2ec>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	fa21 f303 	lsr.w	r3, r1, r3
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_RCC_ClockConfig+0x2f0>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <HAL_RCC_ClockConfig+0x2f4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fc82 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3778      	adds	r7, #120	@ 0x78
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08004550 	.word	0x08004550
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000004 	.word	0x20000004

08002f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6e:	e026      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e026      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0c9b      	lsrs	r3, r3, #18
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc0:	613b      	str	r3, [r7, #16]
      break;
 8002fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc4:	693b      	ldr	r3, [r7, #16]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	007a1200 	.word	0x007a1200
 8002fdc:	08004568 	.word	0x08004568
 8002fe0:	08004578 	.word	0x08004578
 8002fe4:	003d0900 	.word	0x003d0900

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003006:	f7ff ffef 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800300a:	4601      	mov	r1, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003014:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003018:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	603a      	str	r2, [r7, #0]
  return result;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	40d3      	lsrs	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x40>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08004560 	.word	0x08004560

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800304a:	f7ff ffcd 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800304e:	4601      	mov	r1, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003058:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800305c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	fa92 f2a2 	rbit	r2, r2
 8003064:	603a      	str	r2, [r7, #0]
  return result;
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	40d3      	lsrs	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08004560 	.word	0x08004560

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fada 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fd32 	bl	8003b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fbf9 	bl	80038cc <UART_SetConfig>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e01b      	b.n	800311c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fdb1 	bl	8003c7c <UART_CheckIdleState>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	@ 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003138:	2b20      	cmp	r3, #32
 800313a:	d177      	bne.n	800322c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_UART_Transmit+0x24>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e070      	b.n	800322e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	@ 0x21
 8003158:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315a:	f7fd fba9 	bl	80008b0 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Transmit+0x68>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003194:	e02f      	b.n	80031f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fe13 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e03b      	b.n	800322e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	881a      	ldrh	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c8:	b292      	uxth	r2, r2
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3302      	adds	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e007      	b.n	80031e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1c9      	bne.n	8003196 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	@ 0x40
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fddd 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e005      	b.n	800322e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b08a      	sub	sp, #40	@ 0x28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324a:	2b20      	cmp	r3, #32
 800324c:	d132      	bne.n	80032b4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Receive_IT+0x24>
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e02b      	b.n	80032b6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	613b      	str	r3, [r7, #16]
   return(result);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	61bb      	str	r3, [r7, #24]
   return(result);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fdfc 	bl	8003ea8 <UART_Start_Receive_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0ba      	sub	sp, #232	@ 0xe8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032ee:	4013      	ands	r3, r2
 80032f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d115      	bne.n	8003328 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 82ab 	beq.w	8003874 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
      }
      return;
 8003326:	e2a5      	b.n	8003874 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8117 	beq.w	8003560 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800333e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003342:	4b85      	ldr	r3, [pc, #532]	@ (8003558 <HAL_UART_IRQHandler+0x298>)
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 810a 	beq.w	8003560 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800334c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d011      	beq.n	800337c <HAL_UART_IRQHandler+0xbc>
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <HAL_UART_IRQHandler+0xec>
 8003388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2202      	movs	r2, #2
 800339a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d011      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
 80033b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2204      	movs	r2, #4
 80033ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800340e:	f043 0208 	orr.w	r2, r3, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_UART_IRQHandler+0x18a>
 8003424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003428:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8211 	beq.w	8003878 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003484:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800349a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04f      	beq.n	8003542 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fdc6 	bl	8004034 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b2:	2b40      	cmp	r3, #64	@ 0x40
 80034b4:	d141      	bne.n	800353a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1d9      	bne.n	80034b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	2b00      	cmp	r3, #0
 8003508:	d013      	beq.n	8003532 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	4a13      	ldr	r2, [pc, #76]	@ (800355c <HAL_UART_IRQHandler+0x29c>)
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f975 	bl	8001806 <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d017      	beq.n	8003552 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e00f      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9b4 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	e00b      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9b0 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e007      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9ac 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003550:	e192      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003552:	bf00      	nop
    return;
 8003554:	e190      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
 8003556:	bf00      	nop
 8003558:	04000120 	.word	0x04000120
 800355c:	080040fd 	.word	0x080040fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 814b 	bne.w	8003800 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8144 	beq.w	8003800 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 813d 	beq.w	8003800 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	f040 80b5 	bne.w	8003708 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8164 	beq.w	800387c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80035ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035be:	429a      	cmp	r2, r3
 80035c0:	f080 815c 	bcs.w	800387c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f000 8086 	beq.w	80036e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003604:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003608:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003610:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800361c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1da      	bne.n	80035da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003634:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003648:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800364c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003650:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800365a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e1      	bne.n	8003624 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003684:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003686:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800368a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e3      	bne.n	8003660 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e4      	bne.n	80036a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe f852 	bl	800178a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8d7 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003706:	e0b9      	b.n	800387c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003714:	b29b      	uxth	r3, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80ab 	beq.w	8003880 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800372a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80a6 	beq.w	8003880 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003748:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003756:	647b      	str	r3, [r7, #68]	@ 0x44
 8003758:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800375c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e4      	bne.n	8003734 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	623b      	str	r3, [r7, #32]
   return(result);
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800378e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0310 	bic.w	r3, r3, #16
 80037ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e4      	bne.n	80037b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f85b 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037fe:	e03f      	b.n	8003880 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_UART_IRQHandler+0x56a>
 800380c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fe52 	bl	80044cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003828:	e02d      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01c      	beq.n	8003884 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
    }
    return;
 8003852:	e017      	b.n	8003884 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <HAL_UART_IRQHandler+0x5c6>
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fc5b 	bl	8004128 <UART_EndTransmit_IT>
    return;
 8003872:	e008      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003874:	bf00      	nop
 8003876:	e006      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003878:	bf00      	nop
 800387a:	e004      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
      return;
 800387c:	bf00      	nop
 800387e:	e002      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003884:	bf00      	nop
  }

}
 8003886:	37e8      	adds	r7, #232	@ 0xe8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003b20 <UART_SetConfig+0x254>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	430b      	orrs	r3, r1
 8003902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	430a      	orrs	r2, r1
 800393c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a78      	ldr	r2, [pc, #480]	@ (8003b24 <UART_SetConfig+0x258>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d120      	bne.n	800398a <UART_SetConfig+0xbe>
 8003948:	4b77      	ldr	r3, [pc, #476]	@ (8003b28 <UART_SetConfig+0x25c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b03      	cmp	r3, #3
 8003952:	d817      	bhi.n	8003984 <UART_SetConfig+0xb8>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <UART_SetConfig+0x90>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003979 	.word	0x08003979
 8003964:	0800397f 	.word	0x0800397f
 8003968:	08003973 	.word	0x08003973
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e01d      	b.n	80039ae <UART_SetConfig+0xe2>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e01a      	b.n	80039ae <UART_SetConfig+0xe2>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e017      	b.n	80039ae <UART_SetConfig+0xe2>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e014      	b.n	80039ae <UART_SetConfig+0xe2>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e011      	b.n	80039ae <UART_SetConfig+0xe2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a67      	ldr	r2, [pc, #412]	@ (8003b2c <UART_SetConfig+0x260>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d102      	bne.n	800399a <UART_SetConfig+0xce>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e009      	b.n	80039ae <UART_SetConfig+0xe2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a64      	ldr	r2, [pc, #400]	@ (8003b30 <UART_SetConfig+0x264>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <UART_SetConfig+0xde>
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e001      	b.n	80039ae <UART_SetConfig+0xe2>
 80039aa:	2310      	movs	r3, #16
 80039ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b6:	d15a      	bne.n	8003a6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80039b8:	7ffb      	ldrb	r3, [r7, #31]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d827      	bhi.n	8003a0e <UART_SetConfig+0x142>
 80039be:	a201      	add	r2, pc, #4	@ (adr r2, 80039c4 <UART_SetConfig+0xf8>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	08003a0f 	.word	0x08003a0f
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a07 	.word	0x08003a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7ff fb0a 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80039ec:	61b8      	str	r0, [r7, #24]
        break;
 80039ee:	e013      	b.n	8003a18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7ff fb28 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 80039f4:	61b8      	str	r0, [r7, #24]
        break;
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b34 <UART_SetConfig+0x268>)
 80039fa:	61bb      	str	r3, [r7, #24]
        break;
 80039fc:	e00c      	b.n	8003a18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fe:	f7ff fa9f 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8003a02:	61b8      	str	r0, [r7, #24]
        break;
 8003a04:	e008      	b.n	8003a18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a0a:	61bb      	str	r3, [r7, #24]
        break;
 8003a0c:	e004      	b.n	8003a18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	77bb      	strb	r3, [r7, #30]
        break;
 8003a16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d074      	beq.n	8003b08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	d916      	bls.n	8003a68 <UART_SetConfig+0x19c>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a40:	d212      	bcs.n	8003a68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f023 030f 	bic.w	r3, r3, #15
 8003a4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	89fb      	ldrh	r3, [r7, #14]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	89fa      	ldrh	r2, [r7, #14]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e04f      	b.n	8003b08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77bb      	strb	r3, [r7, #30]
 8003a6c:	e04c      	b.n	8003b08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a6e:	7ffb      	ldrb	r3, [r7, #31]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d828      	bhi.n	8003ac6 <UART_SetConfig+0x1fa>
 8003a74:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <UART_SetConfig+0x1b0>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac7 	.word	0x08003ac7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003ac7 	.word	0x08003ac7
 8003a9c:	08003abf 	.word	0x08003abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7ff faae 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	61b8      	str	r0, [r7, #24]
        break;
 8003aa6:	e013      	b.n	8003ad0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7ff facc 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8003aac:	61b8      	str	r0, [r7, #24]
        break;
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <UART_SetConfig+0x268>)
 8003ab2:	61bb      	str	r3, [r7, #24]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab6:	f7ff fa43 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8003aba:	61b8      	str	r0, [r7, #24]
        break;
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ac2:	61bb      	str	r3, [r7, #24]
        break;
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ace:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085a      	lsrs	r2, r3, #1
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d909      	bls.n	8003b04 <UART_SetConfig+0x238>
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d205      	bcs.n	8003b04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e001      	b.n	8003b08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b14:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	efff69f3 	.word	0xefff69f3
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40004400 	.word	0x40004400
 8003b30:	40004800 	.word	0x40004800
 8003b34:	007a1200 	.word	0x007a1200

08003b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c36:	d10a      	bne.n	8003c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b098      	sub	sp, #96	@ 0x60
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c8c:	f7fc fe10 	bl	80008b0 <HAL_GetTick>
 8003c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d12e      	bne.n	8003cfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f88c 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d021      	beq.n	8003cfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e062      	b.n	8003dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d149      	bne.n	8003da0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f856 	bl	8003dcc <UART_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03c      	beq.n	8003da0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	623b      	str	r3, [r7, #32]
   return(result);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e6      	bne.n	8003d26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d78:	61fa      	str	r2, [r7, #28]
 8003d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	617b      	str	r3, [r7, #20]
   return(result);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e011      	b.n	8003dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3758      	adds	r7, #88	@ 0x58
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ddc:	e04f      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d04b      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fc fd63 	bl	80008b0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e04e      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d037      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b80      	cmp	r3, #128	@ 0x80
 8003e12:	d034      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b40      	cmp	r3, #64	@ 0x40
 8003e18:	d031      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d110      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f8ff 	bl	8004034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e029      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e58:	d111      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8e5 	bl	8004034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e00f      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d0a0      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b097      	sub	sp, #92	@ 0x5c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d10e      	bne.n	8003efa <UART_Start_Receive_IT+0x52>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <UART_Start_Receive_IT+0x48>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003eea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eee:	e02d      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	22ff      	movs	r2, #255	@ 0xff
 8003ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ef8:	e028      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <UART_Start_Receive_IT+0x76>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <UART_Start_Receive_IT+0x6c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	@ 0xff
 8003f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f12:	e01b      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	227f      	movs	r2, #127	@ 0x7f
 8003f18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f1c:	e016      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f26:	d10d      	bne.n	8003f44 <UART_Start_Receive_IT+0x9c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <UART_Start_Receive_IT+0x92>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	227f      	movs	r2, #127	@ 0x7f
 8003f34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f38:	e008      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	223f      	movs	r2, #63	@ 0x3f
 8003f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f42:	e003      	b.n	8003f4c <UART_Start_Receive_IT+0xa4>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2222      	movs	r2, #34	@ 0x22
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d107      	bne.n	8003faa <UART_Start_Receive_IT+0x102>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a21      	ldr	r2, [pc, #132]	@ (800402c <UART_Start_Receive_IT+0x184>)
 8003fa6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003fa8:	e002      	b.n	8003fb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a20      	ldr	r2, [pc, #128]	@ (8004030 <UART_Start_Receive_IT+0x188>)
 8003fae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d019      	beq.n	8003fec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <UART_Start_Receive_IT+0x110>
 8003fea:	e018      	b.n	800401e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f043 0320 	orr.w	r3, r3, #32
 8004000:	653b      	str	r3, [r7, #80]	@ 0x50
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	61bb      	str	r3, [r7, #24]
   return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e6      	bne.n	8003fec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	375c      	adds	r7, #92	@ 0x5c
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	08004325 	.word	0x08004325
 8004030:	0800417d 	.word	0x0800417d

08004034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b095      	sub	sp, #84	@ 0x54
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405a:	643b      	str	r3, [r7, #64]	@ 0x40
 800405c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	61fb      	str	r3, [r7, #28]
   return(result);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800408e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d118      	bne.n	80040dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	613b      	str	r3, [r7, #16]
   return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040f0:	bf00      	nop
 80040f2:	3754      	adds	r7, #84	@ 0x54
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fbc0 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	60bb      	str	r3, [r7, #8]
   return(result);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	613b      	str	r3, [r7, #16]
   return(result);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e6      	bne.n	8004130 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fb8c 	bl	800388c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b09c      	sub	sp, #112	@ 0x70
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800418a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004194:	2b22      	cmp	r3, #34	@ 0x22
 8004196:	f040 80b9 	bne.w	800430c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80041a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041a8:	b2d9      	uxtb	r1, r3
 80041aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	400a      	ands	r2, r1
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 809c 	bne.w	800431c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004202:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004204:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004208:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e6      	bne.n	80041e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	667b      	str	r3, [r7, #100]	@ 0x64
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004236:	647a      	str	r2, [r7, #68]	@ 0x44
 8004238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800423c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e5      	bne.n	8004216 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d018      	beq.n	800429e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	623b      	str	r3, [r7, #32]
   return(result);
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004280:	663b      	str	r3, [r7, #96]	@ 0x60
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
 800428c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e6      	bne.n	800426c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d12e      	bne.n	8004304 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f023 0310 	bic.w	r3, r3, #16
 80042c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	69b9      	ldr	r1, [r7, #24]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	617b      	str	r3, [r7, #20]
   return(result);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d103      	bne.n	80042f4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fad9 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004302:	e00b      	b.n	800431c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fc f8f5 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 800430a:	e007      	b.n	800431c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0208 	orr.w	r2, r2, #8
 800431a:	619a      	str	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	3770      	adds	r7, #112	@ 0x70
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b09c      	sub	sp, #112	@ 0x70
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004332:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433c:	2b22      	cmp	r3, #34	@ 0x22
 800433e:	f040 80b9 	bne.w	80044b4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004348:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004350:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004352:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004356:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800435a:	4013      	ands	r3, r2
 800435c:	b29a      	uxth	r2, r3
 800435e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 809c 	bne.w	80044c4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800439a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80043b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043de:	643a      	str	r2, [r7, #64]	@ 0x40
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d018      	beq.n	8004446 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	61fb      	str	r3, [r7, #28]
   return(result);
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004434:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	2b01      	cmp	r3, #1
 800444c:	d12e      	bne.n	80044ac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	60bb      	str	r3, [r7, #8]
   return(result);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f023 0310 	bic.w	r3, r3, #16
 8004468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6979      	ldr	r1, [r7, #20]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d103      	bne.n	800449c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2210      	movs	r2, #16
 800449a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fa05 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044aa:	e00b      	b.n	80044c4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc f821 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 80044b2:	e007      	b.n	80044c4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0208 	orr.w	r2, r2, #8
 80044c2:	619a      	str	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	3770      	adds	r7, #112	@ 0x70
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <memset>:
 80044e0:	4402      	add	r2, r0
 80044e2:	4603      	mov	r3, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d100      	bne.n	80044ea <memset+0xa>
 80044e8:	4770      	bx	lr
 80044ea:	f803 1b01 	strb.w	r1, [r3], #1
 80044ee:	e7f9      	b.n	80044e4 <memset+0x4>

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	@ (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	@ (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	@ (8004534 <__libc_init_array+0x44>)
 8004504:	f000 f818 	bl	8004538 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08004588 	.word	0x08004588
 800452c:	08004588 	.word	0x08004588
 8004530:	08004588 	.word	0x08004588
 8004534:	0800458c 	.word	0x0800458c

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
