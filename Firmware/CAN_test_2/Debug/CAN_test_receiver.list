
CAN_test_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800323c  0800323c  0000423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003274  08003274  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003274  08003274  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003274  08003274  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00004274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003278  08003278  00004278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800327c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dea  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015c1  00000000  00000000  0000ee26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  000103e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ad  00000000  00000000  00010b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d4a  00000000  00000000  000110fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098a6  00000000  00000000  0002ae47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009957c  00000000  00000000  000346ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cdc69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001db8  00000000  00000000  000cdcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000cfa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003224 	.word	0x08003224

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003224 	.word	0x08003224

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa72 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8be 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f88c 	bl	80002f4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001dc:	f000 f854 	bl	8000288 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80001e0:	2102      	movs	r1, #2
 80001e2:	4805      	ldr	r0, [pc, #20]	@ (80001f8 <main+0x30>)
 80001e4:	f000 fce9 	bl	8000bba <HAL_CAN_ActivateNotification>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <main+0x2c>
	  Error_Handler();
 80001ee:	f000 f91f 	bl	8000430 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	e7fd      	b.n	80001f4 <main+0x2c>
 80001f8:	20000028 	.word	0x20000028

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	@ 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 ffdd 	bl	80031ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000222:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f001 f9c3 	bl	80015d0 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f8ee 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f9ec 	bl	800264c <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 f8d9 	bl	8000430 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	@ 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800028c:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <MX_CAN_Init+0x64>)
 800028e:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <MX_CAN_Init+0x68>)
 8000290:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000292:	4b16      	ldr	r3, [pc, #88]	@ (80002ec <MX_CAN_Init+0x64>)
 8000294:	2212      	movs	r2, #18
 8000296:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000298:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <MX_CAN_Init+0x64>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800029e:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <MX_CAN_Init+0x64>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <MX_CAN_Init+0x64>)
 80002a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002aa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	@ (80002ec <MX_CAN_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <MX_CAN_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <MX_CAN_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <MX_CAN_Init+0x64>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <MX_CAN_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <MX_CAN_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	@ (80002ec <MX_CAN_Init+0x64>)
 80002d8:	f000 fa52 	bl	8000780 <HAL_CAN_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80002e2:	f000 f8a5 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40006400 	.word	0x40006400

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	@ (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	f002 fba8 	bl	8002a8c <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f875 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000050 	.word	0x20000050
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800036a:	4b1d      	ldr	r3, [pc, #116]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a1c      	ldr	r2, [pc, #112]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 8000370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a16      	ldr	r2, [pc, #88]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 8000388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 80003a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_GPIO_Init+0x8c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2108      	movs	r1, #8
 80003b6:	480b      	ldr	r0, [pc, #44]	@ (80003e4 <MX_GPIO_Init+0x90>)
 80003b8:	f001 f8d8 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003bc:	2308      	movs	r3, #8
 80003be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4619      	mov	r1, r3
 80003d2:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <MX_GPIO_Init+0x90>)
 80003d4:	f000 ff58 	bl	8001288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	48000400 	.word	0x48000400

080003e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_Buf) != HAL_OK) {
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80003f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80003f4:	2100      	movs	r1, #0
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 fabd 	bl	8000976 <HAL_CAN_GetRxMessage>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000402:	f000 f815 	bl	8000430 <Error_Handler>
	}
	if (RxHeader.StdId == 0x103) {
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f240 1203 	movw	r2, #259	@ 0x103
 800040e:	4293      	cmp	r3, r2
 8000410:	d103      	bne.n	800041a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000412:	2108      	movs	r1, #8
 8000414:	4805      	ldr	r0, [pc, #20]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000416:	f001 f8c1 	bl	800159c <HAL_GPIO_TogglePin>
	}
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000f4 	.word	0x200000f4
 8000428:	200000d8 	.word	0x200000d8
 800042c:	48000400 	.word	0x48000400

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_MspInit+0x44>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	@ 0x28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a25      	ldr	r2, [pc, #148]	@ (8000538 <HAL_CAN_MspInit+0xb4>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d143      	bne.n	800052e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004a6:	4b25      	ldr	r3, [pc, #148]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a24      	ldr	r2, [pc, #144]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a1e      	ldr	r2, [pc, #120]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <HAL_CAN_MspInit+0xb8>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004e8:	2309      	movs	r3, #9
 80004ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f6:	f000 fec7 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800050c:	2309      	movs	r3, #9
 800050e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051a:	f000 feb5 	bl	8001288 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2014      	movs	r0, #20
 8000524:	f000 fe79 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000528:	2014      	movs	r0, #20
 800052a:	f000 fe92 	bl	8001252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	@ 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40006400 	.word	0x40006400
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	@ 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a18      	ldr	r2, [pc, #96]	@ (80005c0 <HAL_UART_MspInit+0x80>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d129      	bne.n	80005b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a11      	ldr	r2, [pc, #68]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 8000580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_UART_MspInit+0x84>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000592:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	2302      	movs	r3, #2
 800059a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a0:	2303      	movs	r3, #3
 80005a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a4:	2307      	movs	r3, #7
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f000 fe69 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	@ 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40004400 	.word	0x40004400
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 f88f 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <CAN_RX0_IRQHandler+0x10>)
 800062e:	f000 faea 	bl	8000c06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <SystemInit+0x20>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000646:	4a05      	ldr	r2, [pc, #20]	@ (800065c <SystemInit+0x20>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000698 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff ffea 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	@ (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	@ (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f002 fda5 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000692:	f7ff fd99 	bl	80001c8 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000698:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a4:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 80006a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ac:	200000fc 	.word	0x200000fc

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <HAL_Init+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <HAL_Init+0x28>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 fd9d 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff feb4 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fdb5 	bl	800126e <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 fd7d 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	200000f8 	.word	0x200000f8

08000768 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;  
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	200000f8 	.word	0x200000f8

08000780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e0ed      	b.n	800096e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fe70 	bl	8000484 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007b4:	f7ff ffd8 	bl	8000768 <HAL_GetTick>
 80007b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ba:	e012      	b.n	80007e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007bc:	f7ff ffd4 	bl	8000768 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b0a      	cmp	r3, #10
 80007c8:	d90b      	bls.n	80007e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2205      	movs	r2, #5
 80007da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e0c5      	b.n	800096e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0e5      	beq.n	80007bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 0202 	bic.w	r2, r2, #2
 80007fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000800:	f7ff ffb2 	bl	8000768 <HAL_GetTick>
 8000804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000806:	e012      	b.n	800082e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000808:	f7ff ffae 	bl	8000768 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b0a      	cmp	r3, #10
 8000814:	d90b      	bls.n	800082e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2205      	movs	r2, #5
 8000826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e09f      	b.n	800096e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e5      	bne.n	8000808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7e1b      	ldrb	r3, [r3, #24]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e007      	b.n	8000866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7e5b      	ldrb	r3, [r3, #25]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d108      	bne.n	8000880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e007      	b.n	8000890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800088e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7e9b      	ldrb	r3, [r3, #26]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d108      	bne.n	80008aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0220 	orr.w	r2, r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e007      	b.n	80008ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f022 0220 	bic.w	r2, r2, #32
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7edb      	ldrb	r3, [r3, #27]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d108      	bne.n	80008d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0210 	bic.w	r2, r2, #16
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e007      	b.n	80008e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0210 	orr.w	r2, r2, #16
 80008e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7f1b      	ldrb	r3, [r3, #28]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d108      	bne.n	80008fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0208 	orr.w	r2, r2, #8
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e007      	b.n	800090e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0208 	bic.w	r2, r2, #8
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7f5b      	ldrb	r3, [r3, #29]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0204 	orr.w	r2, r2, #4
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e007      	b.n	8000938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 0204 	bic.w	r2, r2, #4
 8000936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	ea42 0103 	orr.w	r1, r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000976:	b480      	push	{r7}
 8000978:	b087      	sub	sp, #28
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800098a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d003      	beq.n	800099a <HAL_CAN_GetRxMessage+0x24>
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	2b02      	cmp	r3, #2
 8000996:	f040 8103 	bne.w	8000ba0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10e      	bne.n	80009be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d116      	bne.n	80009dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e0f7      	b.n	8000bae <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d107      	bne.n	80009dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e0e8      	b.n	8000bae <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	331b      	adds	r3, #27
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	4413      	add	r3, r2
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0204 	and.w	r2, r3, #4
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10c      	bne.n	8000a14 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	331b      	adds	r3, #27
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	4413      	add	r3, r2
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	0d5b      	lsrs	r3, r3, #21
 8000a0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	e00b      	b.n	8000a2c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	331b      	adds	r3, #27
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	4413      	add	r3, r2
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	331b      	adds	r3, #27
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	4413      	add	r3, r2
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0202 	and.w	r2, r3, #2
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	331b      	adds	r3, #27
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3304      	adds	r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	e00b      	b.n	8000a7a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	331b      	adds	r3, #27
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 020f 	and.w	r2, r3, #15
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	331b      	adds	r3, #27
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	4413      	add	r3, r2
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	331b      	adds	r3, #27
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	4413      	add	r3, r2
 8000aca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	0a1a      	lsrs	r2, r3, #8
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0c1a      	lsrs	r2, r3, #16
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	3302      	adds	r3, #2
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	4413      	add	r3, r2
 8000afe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	0e1a      	lsrs	r2, r3, #24
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	4413      	add	r3, r2
 8000b18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	3304      	adds	r3, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	4413      	add	r3, r2
 8000b30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0a1a      	lsrs	r2, r3, #8
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3305      	adds	r3, #5
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	0c1a      	lsrs	r2, r3, #16
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	3306      	adds	r3, #6
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	4413      	add	r3, r2
 8000b64:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	0e1a      	lsrs	r2, r3, #24
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3307      	adds	r3, #7
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d108      	bne.n	8000b8c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0220 	orr.w	r2, r2, #32
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	e007      	b.n	8000b9c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0220 	orr.w	r2, r2, #32
 8000b9a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e006      	b.n	8000bae <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
  }
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d002      	beq.n	8000bd8 <HAL_CAN_ActivateNotification+0x1e>
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d109      	bne.n	8000bec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6959      	ldr	r1, [r3, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e006      	b.n	8000bfa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
  }
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b08a      	sub	sp, #40	@ 0x28
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d07c      	beq.n	8000d46 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d023      	beq.n	8000c9e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f983 	bl	8000f74 <HAL_CAN_TxMailbox0CompleteCallback>
 8000c6e:	e016      	b.n	8000c9e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c82:	e00c      	b.n	8000c9e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d004      	beq.n	8000c98 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c96:	e002      	b.n	8000c9e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f989 	bl	8000fb0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d024      	beq.n	8000cf2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f963 	bl	8000f88 <HAL_CAN_TxMailbox1CompleteCallback>
 8000cc2:	e016      	b.n	8000cf2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd6:	e00c      	b.n	8000cf2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cea:	e002      	b.n	8000cf2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f969 	bl	8000fc4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d024      	beq.n	8000d46 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f943 	bl	8000f9c <HAL_CAN_TxMailbox2CompleteCallback>
 8000d16:	e016      	b.n	8000d46 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2a:	e00c      	b.n	8000d46 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d3e:	e002      	b.n	8000d46 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f949 	bl	8000fd8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00c      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2210      	movs	r2, #16
 8000d68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00b      	beq.n	8000d8c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2208      	movs	r2, #8
 8000d84:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f930 	bl	8000fec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d009      	beq.n	8000daa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fb1f 	bl	80003e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00c      	beq.n	8000dce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2210      	movs	r2, #16
 8000dcc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00b      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2208      	movs	r2, #8
 8000de8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f912 	bl	8001014 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d009      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f8f9 	bl	8001000 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2210      	movs	r2, #16
 8000e28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f8fc 	bl	8001028 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2208      	movs	r2, #8
 8000e4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f8f5 	bl	800103c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d07b      	beq.n	8000f54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d072      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d008      	beq.n	8000e9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d043      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03e      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000ed4:	2b60      	cmp	r3, #96	@ 0x60
 8000ed6:	d02b      	beq.n	8000f30 <HAL_CAN_IRQHandler+0x32a>
 8000ed8:	2b60      	cmp	r3, #96	@ 0x60
 8000eda:	d82e      	bhi.n	8000f3a <HAL_CAN_IRQHandler+0x334>
 8000edc:	2b50      	cmp	r3, #80	@ 0x50
 8000ede:	d022      	beq.n	8000f26 <HAL_CAN_IRQHandler+0x320>
 8000ee0:	2b50      	cmp	r3, #80	@ 0x50
 8000ee2:	d82a      	bhi.n	8000f3a <HAL_CAN_IRQHandler+0x334>
 8000ee4:	2b40      	cmp	r3, #64	@ 0x40
 8000ee6:	d019      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x316>
 8000ee8:	2b40      	cmp	r3, #64	@ 0x40
 8000eea:	d826      	bhi.n	8000f3a <HAL_CAN_IRQHandler+0x334>
 8000eec:	2b30      	cmp	r3, #48	@ 0x30
 8000eee:	d010      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x30c>
 8000ef0:	2b30      	cmp	r3, #48	@ 0x30
 8000ef2:	d822      	bhi.n	8000f3a <HAL_CAN_IRQHandler+0x334>
 8000ef4:	2b10      	cmp	r3, #16
 8000ef6:	d002      	beq.n	8000efe <HAL_CAN_IRQHandler+0x2f8>
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d005      	beq.n	8000f08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000efc:	e01d      	b.n	8000f3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f06:	e019      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f10:	e014      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f1a:	e00f      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f24:	e00a      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f2e:	e005      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f38:	e000      	b.n	8000f3c <HAL_CAN_IRQHandler+0x336>
            break;
 8000f3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000f4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2204      	movs	r2, #4
 8000f52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f872 	bl	8001050 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	@ 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	@ (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	@ (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff3e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff31 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	e14e      	b.n	8001536 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8140 	beq.w	8001530 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_GPIO_Init+0x40>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d017      	beq.n	8001366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d123      	bne.n	80013ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	6939      	ldr	r1, [r7, #16]
 80013b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0203 	and.w	r2, r3, #3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 809a 	beq.w	8001530 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a54      	ldr	r2, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001414:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a46      	ldr	r2, [pc, #280]	@ (800155c <HAL_GPIO_Init+0x2d4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1dc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a45      	ldr	r2, [pc, #276]	@ (8001560 <HAL_GPIO_Init+0x2d8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1d8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a44      	ldr	r2, [pc, #272]	@ (8001564 <HAL_GPIO_Init+0x2dc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1d4>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 800145c:	2305      	movs	r3, #5
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001468:	2300      	movs	r3, #0
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147a:	4937      	ldr	r1, [pc, #220]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001488:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014d6:	4a24      	ldr	r2, [pc, #144]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f aea9 	bne.w	8001298 <HAL_GPIO_Init+0x10>
  }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	48000c00 	.word	0x48000c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001588:	e002      	b.n	8001590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43d9      	mvns	r1, r3
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	400b      	ands	r3, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f001 b823 	b.w	800263c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 817d 	beq.w	8001906 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800160c:	4bbc      	ldr	r3, [pc, #752]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d00c      	beq.n	8001632 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001618:	4bb9      	ldr	r3, [pc, #740]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d15c      	bne.n	80016de <HAL_RCC_OscConfig+0x10e>
 8001624:	4bb6      	ldr	r3, [pc, #728]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001630:	d155      	bne.n	80016de <HAL_RCC_OscConfig+0x10e>
 8001632:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001636:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001646:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x94>
 800165e:	4ba8      	ldr	r3, [pc, #672]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0xc0>
 8001664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001668:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001678:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800167c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001680:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800168c:	4b9c      	ldr	r3, [pc, #624]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001694:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001698:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800169c:	fa92 f2a2 	rbit	r2, r2
 80016a0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80016a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80016a8:	fab2 f282 	clz	r2, r2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 811f 	beq.w	8001904 <HAL_RCC_OscConfig+0x334>
 80016c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8116 	bne.w	8001904 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f000 bfaf 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x12e>
 80016f0:	4b83      	ldr	r3, [pc, #524]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a82      	ldr	r2, [pc, #520]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e036      	b.n	800176c <HAL_RCC_OscConfig+0x19c>
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x158>
 800170e:	4b7c      	ldr	r3, [pc, #496]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7b      	ldr	r2, [pc, #492]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b79      	ldr	r3, [pc, #484]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a78      	ldr	r2, [pc, #480]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e021      	b.n	800176c <HAL_RCC_OscConfig+0x19c>
 8001728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x184>
 800173a:	4b71      	ldr	r3, [pc, #452]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a70      	ldr	r2, [pc, #448]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6e      	ldr	r3, [pc, #440]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6d      	ldr	r2, [pc, #436]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0x19c>
 8001754:	4b6a      	ldr	r3, [pc, #424]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a66      	ldr	r2, [pc, #408]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176c:	4b64      	ldr	r3, [pc, #400]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	f023 020f 	bic.w	r2, r3, #15
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	495f      	ldr	r1, [pc, #380]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001782:	4313      	orrs	r3, r2
 8001784:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d059      	beq.n	800184a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7fe ffe7 	bl	8000768 <HAL_GetTick>
 800179a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a0:	f7fe ffe2 	bl	8000768 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	@ 0x64
 80017ae:	d902      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f000 bf43 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 80017b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80017ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0x218>
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e015      	b.n	8001814 <HAL_RCC_OscConfig+0x244>
 80017e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80017fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001800:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001804:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001810:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001818:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800181c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001820:	fa92 f2a2 	rbit	r2, r2
 8001824:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001828:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f002 021f 	and.w	r2, r2, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ab      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1d0>
 8001848:	e05d      	b.n	8001906 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7fe ff8d 	bl	8000768 <HAL_GetTick>
 800184e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7fe ff88 	bl	8000768 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	@ 0x64
 8001862:	d902      	bls.n	800186a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	f000 bee9 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 800186a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800186e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800187e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0x2cc>
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x2f8>
 800189c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018a0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018b4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_RCC_OscConfig+0x330>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018cc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80018d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80018d4:	fa92 f2a2 	rbit	r2, r2
 80018d8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80018dc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ab      	bne.n	8001854 <HAL_RCC_OscConfig+0x284>
 80018fc:	e003      	b.n	8001906 <HAL_RCC_OscConfig+0x336>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 817d 	beq.w	8001c16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800191c:	4ba6      	ldr	r3, [pc, #664]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001928:	4ba3      	ldr	r3, [pc, #652]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d172      	bne.n	8001a1a <HAL_RCC_OscConfig+0x44a>
 8001934:	4ba0      	ldr	r3, [pc, #640]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d16c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x44a>
 8001940:	2302      	movs	r3, #2
 8001942:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001952:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x3a0>
 800196a:	4b93      	ldr	r3, [pc, #588]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e013      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001988:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001994:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	2202      	movs	r2, #2
 800199a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800199e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80019a2:	fa92 f2a2 	rbit	r2, r2
 80019a6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80019aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 021f 	and.w	r2, r2, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00a      	beq.n	80019e0 <HAL_RCC_OscConfig+0x410>
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	f000 be2e 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b75      	ldr	r3, [pc, #468]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	21f8      	movs	r1, #248	@ 0xf8
 80019f6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80019fe:	fa91 f1a1 	rbit	r1, r1
 8001a02:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a06:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a0a:	fab1 f181 	clz	r1, r1
 8001a0e:	b2c9      	uxtb	r1, r1
 8001a10:	408b      	lsls	r3, r1
 8001a12:	4969      	ldr	r1, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a18:	e0fd      	b.n	8001c16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8088 	beq.w	8001b3c <HAL_RCC_OscConfig+0x56c>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001a3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	461a      	mov	r2, r3
 8001a54:	2301      	movs	r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe fe86 	bl	8000768 <HAL_GetTick>
 8001a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7fe fe81 	bl	8000768 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d902      	bls.n	8001a78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	f000 bde2 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001a8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4d8>
 8001aa2:	4b45      	ldr	r3, [pc, #276]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e013      	b.n	8001ad0 <HAL_RCC_OscConfig+0x500>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ac0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001acc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ad6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ada:	fa92 f2a2 	rbit	r2, r2
 8001ade:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ae2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f002 021f 	and.w	r2, r2, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0af      	beq.n	8001a62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	21f8      	movs	r1, #248	@ 0xf8
 8001b18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b20:	fa91 f1a1 	rbit	r1, r1
 8001b24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001b28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001b2c:	fab1 f181 	clz	r1, r1
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	408b      	lsls	r3, r1
 8001b34:	4920      	ldr	r1, [pc, #128]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
 8001b3a:	e06c      	b.n	8001c16 <HAL_RCC_OscConfig+0x646>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001b4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	461a      	mov	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe fdfe 	bl	8000768 <HAL_GetTick>
 8001b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7fe fdf9 	bl	8000768 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d902      	bls.n	8001b88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f000 bd5a 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d104      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5ec>
 8001bb2:	4b01      	ldr	r3, [pc, #4]	@ (8001bb8 <HAL_RCC_OscConfig+0x5e8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e015      	b.n	8001be4 <HAL_RCC_OscConfig+0x614>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001be0:	4bc8      	ldr	r3, [pc, #800]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	2202      	movs	r2, #2
 8001be6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001bea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001bee:	fa92 f2a2 	rbit	r2, r2
 8001bf2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001bf6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ad      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8110 	beq.w	8001e4c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d079      	beq.n	8001d30 <HAL_RCC_OscConfig+0x760>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4bab      	ldr	r3, [pc, #684]	@ (8001f08 <HAL_RCC_OscConfig+0x938>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	461a      	mov	r2, r3
 8001c62:	2301      	movs	r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe fd7f 	bl	8000768 <HAL_GetTick>
 8001c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c70:	f7fe fd7a 	bl	8000768 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d902      	bls.n	8001c86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f000 bcdb 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce0:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cec:	2102      	movs	r1, #2
 8001cee:	6019      	str	r1, [r3, #0]
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f1a3 	rbit	r1, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d06:	6019      	str	r1, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0a0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6a0>
 8001d2e:	e08d      	b.n	8001e4c <HAL_RCC_OscConfig+0x87c>
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x938>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7fe fcf9 	bl	8000768 <HAL_GetTick>
 8001d76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fcf4 	bl	8000768 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bc55 	b.w	800263c <HAL_RCC_OscConfig+0x106c>
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001dfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	6019      	str	r1, [r3, #0]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f1a3 	rbit	r1, r3
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e24:	6019      	str	r1, [r3, #0]
  return result;
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d197      	bne.n	8001d7c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 81a1 	beq.w	80021a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e68:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d116      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	61d3      	str	r3, [r2, #28]
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e9a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_RCC_OscConfig+0x93c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_RCC_OscConfig+0x93c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a16      	ldr	r2, [pc, #88]	@ (8001f0c <HAL_RCC_OscConfig+0x93c>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7fe fc55 	bl	8000768 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fc50 	bl	8000768 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e3b1      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <HAL_RCC_OscConfig+0x93c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10d      	bne.n	8001f10 <HAL_RCC_OscConfig+0x940>
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a02      	ldr	r2, [pc, #8]	@ (8001f04 <HAL_RCC_OscConfig+0x934>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e03c      	b.n	8001f7c <HAL_RCC_OscConfig+0x9ac>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	10908120 	.word	0x10908120
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x96a>
 8001f20:	4bc1      	ldr	r3, [pc, #772]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4ac0      	ldr	r2, [pc, #768]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4bbe      	ldr	r3, [pc, #760]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4abd      	ldr	r2, [pc, #756]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_OscConfig+0x9ac>
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x994>
 8001f4a:	4bb7      	ldr	r3, [pc, #732]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4ab6      	ldr	r2, [pc, #728]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4bb4      	ldr	r3, [pc, #720]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4ab3      	ldr	r2, [pc, #716]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x9ac>
 8001f64:	4bb0      	ldr	r3, [pc, #704]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4aaf      	ldr	r2, [pc, #700]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	4bad      	ldr	r3, [pc, #692]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4aac      	ldr	r2, [pc, #688]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8001f76:	f023 0304 	bic.w	r3, r3, #4
 8001f7a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8081 	beq.w	8002090 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7fe fbeb 	bl	8000768 <HAL_GetTick>
 8001f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7fe fbe6 	bl	8000768 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e345      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002000:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0xa4c>
 8002016:	4b84      	ldr	r3, [pc, #528]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0xa74>
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002048:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800204c:	2102      	movs	r1, #2
 800204e:	6011      	str	r1, [r2, #0]
 8002050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002054:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002062:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002066:	6011      	str	r1, [r2, #0]
  return result;
 8002068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800206c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d084      	beq.n	8001f98 <HAL_RCC_OscConfig+0x9c8>
 800208e:	e07f      	b.n	8002190 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7fe fb6a 	bl	8000768 <HAL_GetTick>
 8002094:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe fb65 	bl	8000768 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e2c4      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020ba:	2202      	movs	r2, #2
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002102:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0xb4e>
 8002118:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0xb76>
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002126:	2202      	movs	r2, #2
 8002128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800214e:	2102      	movs	r1, #2
 8002150:	6011      	str	r1, [r2, #0]
 8002152:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002156:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fa92 f1a2 	rbit	r1, r2
 8002160:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002164:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002168:	6011      	str	r1, [r2, #0]
  return result;
 800216a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800216e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d184      	bne.n	800209a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002190:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8242 	beq.w	800263a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <HAL_RCC_OscConfig+0xc58>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	f000 8213 	beq.w	80025ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f040 8162 	bne.w	800249a <HAL_RCC_OscConfig+0xeca>
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80021fa:	601a      	str	r2, [r3, #0]
  return result;
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002204:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002210:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	461a      	mov	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe faa4 	bl	8000768 <HAL_GetTick>
 8002220:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	e00c      	b.n	8002240 <HAL_RCC_OscConfig+0xc70>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fa9c 	bl	8000768 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1fd      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800224c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002264:	601a      	str	r2, [r3, #0]
  return result;
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800226e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0xcba>
 8002284:	4bb0      	ldr	r3, [pc, #704]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	e027      	b.n	80022da <HAL_RCC_OscConfig+0xd0a>
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002292:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022e6:	6011      	str	r1, [r2, #0]
 80022e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fa92 f1a2 	rbit	r1, r2
 80022f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80022fe:	6011      	str	r1, [r2, #0]
  return result;
 8002300:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002304:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d182      	bne.n	800222c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	430b      	orrs	r3, r1
 8002348:	497f      	ldr	r1, [pc, #508]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002356:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800237c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002388:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	461a      	mov	r2, r3
 8002390:	2301      	movs	r3, #1
 8002392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe f9e8 	bl	8000768 <HAL_GetTick>
 8002398:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe f9e3 	bl	8000768 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e144      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023d6:	601a      	str	r2, [r3, #0]
  return result;
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0xe2c>
 80023f6:	4b54      	ldr	r3, [pc, #336]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	e027      	b.n	800244c <HAL_RCC_OscConfig+0xe7c>
 80023fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002400:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800242a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	4b3f      	ldr	r3, [pc, #252]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002450:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002454:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	fa92 f1a2 	rbit	r1, r2
 8002468:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800246c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002470:	6011      	str	r1, [r2, #0]
  return result;
 8002472:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002476:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f002 021f 	and.w	r2, r2, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d082      	beq.n	800239e <HAL_RCC_OscConfig+0xdce>
 8002498:	e0cf      	b.n	800263a <HAL_RCC_OscConfig+0x106a>
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80024a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	2300      	movs	r3, #0
 80024de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe f942 	bl	8000768 <HAL_GetTick>
 80024e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe f93d 	bl	8000768 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e09e      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002522:	601a      	str	r2, [r3, #0]
  return result;
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800252c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d104      	bne.n	800254c <HAL_RCC_OscConfig+0xf7c>
 8002542:	4b01      	ldr	r3, [pc, #4]	@ (8002548 <HAL_RCC_OscConfig+0xf78>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	e029      	b.n	800259c <HAL_RCC_OscConfig+0xfcc>
 8002548:	40021000 	.word	0x40021000
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800257a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f2a3 	rbit	r2, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_RCC_OscConfig+0x1078>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80025a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	fa92 f1a2 	rbit	r1, r2
 80025b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025c0:	6011      	str	r1, [r2, #0]
  return result;
 80025c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d180      	bne.n	80024ea <HAL_RCC_OscConfig+0xf1a>
 80025e8:	e027      	b.n	800263a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01e      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_RCC_OscConfig+0x1078>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002606:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800260a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10b      	bne.n	8002636 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800261e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002622:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b09e      	sub	sp, #120	@ 0x78
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e162      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b90      	ldr	r3, [pc, #576]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b8d      	ldr	r3, [pc, #564]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	498b      	ldr	r1, [pc, #556]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b89      	ldr	r3, [pc, #548]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e14a      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	497f      	ldr	r1, [pc, #508]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80dc 	beq.w	8002878 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d13c      	bne.n	8002742 <HAL_RCC_ClockConfig+0xf6>
 80026c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xa6>
 80026ec:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e00f      	b.n	8002712 <HAL_RCC_ClockConfig+0xc6>
 80026f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002704:	663b      	str	r3, [r7, #96]	@ 0x60
 8002706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800270e:	4b67      	ldr	r3, [pc, #412]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002716:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002722:	fab2 f282 	clz	r2, r2
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f042 0220 	orr.w	r2, r2, #32
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f002 021f 	and.w	r2, r2, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d17b      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0f3      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d13c      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x178>
 800274a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_RCC_ClockConfig+0x128>
 800276e:	4b4f      	ldr	r3, [pc, #316]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_RCC_ClockConfig+0x148>
 8002774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	647b      	str	r3, [r7, #68]	@ 0x44
 8002782:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002786:	643b      	str	r3, [r7, #64]	@ 0x40
 8002788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002790:	4b46      	ldr	r3, [pc, #280]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002798:	63ba      	str	r2, [r7, #56]	@ 0x38
 800279a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80027a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d13a      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b2      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
 80027c4:	2302      	movs	r3, #2
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e00d      	b.n	8002808 <HAL_RCC_ClockConfig+0x1bc>
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	2202      	movs	r2, #2
 800280a:	61ba      	str	r2, [r7, #24]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	fa92 f2a2 	rbit	r2, r2
 8002812:	617a      	str	r2, [r7, #20]
  return result;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e079      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	491a      	ldr	r1, [pc, #104]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fd ff8e 	bl	8000768 <HAL_GetTick>
 800284c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fd ff8a 	bl	8000768 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e061      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_RCC_ClockConfig+0x260>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d214      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4906      	ldr	r1, [pc, #24]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <HAL_RCC_ClockConfig+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e040      	b.n	800292a <HAL_RCC_ClockConfig+0x2de>
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	491a      	ldr	r1, [pc, #104]	@ (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4912      	ldr	r1, [pc, #72]	@ (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ee:	f000 f829 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028f2:	4601      	mov	r1, r0
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_RCC_ClockConfig+0x2e8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028fc:	22f0      	movs	r2, #240	@ 0xf0
 80028fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	fa92 f2a2 	rbit	r2, r2
 8002906:	60fa      	str	r2, [r7, #12]
  return result;
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	fab2 f282 	clz	r2, r2
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	40d3      	lsrs	r3, r2
 8002912:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_RCC_ClockConfig+0x2ec>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	fa21 f303 	lsr.w	r3, r1, r3
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_RCC_ClockConfig+0x2f0>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCC_ClockConfig+0x2f4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fedc 	bl	80006e0 <HAL_InitTick>
  
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3778      	adds	r7, #120	@ 0x78
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	0800323c 	.word	0x0800323c
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
 800296e:	2b08      	cmp	r3, #8
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x36>
 8002972:	e026      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	613b      	str	r3, [r7, #16]
      break;
 8002978:	e026      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0c9b      	lsrs	r3, r3, #18
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	4a14      	ldr	r2, [pc, #80]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a0:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e004      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0c      	ldr	r2, [pc, #48]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	e002      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029c4:	613b      	str	r3, [r7, #16]
      break;
 80029c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c8:	693b      	ldr	r3, [r7, #16]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	08003254 	.word	0x08003254
 80029e4:	08003264 	.word	0x08003264
 80029e8:	003d0900 	.word	0x003d0900

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a0a:	f7ff ffef 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a18:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	603a      	str	r2, [r7, #0]
  return result;
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	0800324c 	.word	0x0800324c

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a4e:	f7ff ffcd 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a52:	4601      	mov	r1, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002a5c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	fa92 f2a2 	rbit	r2, r2
 8002a68:	603a      	str	r2, [r7, #0]
  return result;
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	40d3      	lsrs	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	0800324c 	.word	0x0800324c

08002a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e040      	b.n	8002b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd fd46 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	@ 0x24
 8002ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f95e 	bl	8002d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f825 	bl	8002b28 <UART_SetConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01b      	b.n	8002b20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f9dd 	bl	8002ed8 <UART_CheckIdleState>
 8002b1e:	4603      	mov	r3, r0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b8a      	ldr	r3, [pc, #552]	@ (8002d7c <UART_SetConfig+0x254>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	6979      	ldr	r1, [r7, #20]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a78      	ldr	r2, [pc, #480]	@ (8002d80 <UART_SetConfig+0x258>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d120      	bne.n	8002be6 <UART_SetConfig+0xbe>
 8002ba4:	4b77      	ldr	r3, [pc, #476]	@ (8002d84 <UART_SetConfig+0x25c>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d817      	bhi.n	8002be0 <UART_SetConfig+0xb8>
 8002bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb8 <UART_SetConfig+0x90>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bd5 	.word	0x08002bd5
 8002bc0:	08002bdb 	.word	0x08002bdb
 8002bc4:	08002bcf 	.word	0x08002bcf
 8002bc8:	2300      	movs	r3, #0
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e01d      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e01a      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e017      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	77fb      	strb	r3, [r7, #31]
 8002bde:	e014      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002be0:	2310      	movs	r3, #16
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e011      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a67      	ldr	r2, [pc, #412]	@ (8002d88 <UART_SetConfig+0x260>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <UART_SetConfig+0xce>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
 8002bf4:	e009      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a64      	ldr	r2, [pc, #400]	@ (8002d8c <UART_SetConfig+0x264>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <UART_SetConfig+0xde>
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e001      	b.n	8002c0a <UART_SetConfig+0xe2>
 8002c06:	2310      	movs	r3, #16
 8002c08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c12:	d15a      	bne.n	8002cca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002c14:	7ffb      	ldrb	r3, [r7, #31]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d827      	bhi.n	8002c6a <UART_SetConfig+0x142>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <UART_SetConfig+0xf8>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7ff fede 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8002c48:	61b8      	str	r0, [r7, #24]
        break;
 8002c4a:	e013      	b.n	8002c74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff fefc 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8002c50:	61b8      	str	r0, [r7, #24]
        break;
 8002c52:	e00f      	b.n	8002c74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <UART_SetConfig+0x268>)
 8002c56:	61bb      	str	r3, [r7, #24]
        break;
 8002c58:	e00c      	b.n	8002c74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7ff fe73 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002c5e:	61b8      	str	r0, [r7, #24]
        break;
 8002c60:	e008      	b.n	8002c74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c66:	61bb      	str	r3, [r7, #24]
        break;
 8002c68:	e004      	b.n	8002c74 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	77bb      	strb	r3, [r7, #30]
        break;
 8002c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d074      	beq.n	8002d64 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	d916      	bls.n	8002cc4 <UART_SetConfig+0x19c>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9c:	d212      	bcs.n	8002cc4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f023 030f 	bic.w	r3, r3, #15
 8002ca6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	89fa      	ldrh	r2, [r7, #14]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	e04f      	b.n	8002d64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	77bb      	strb	r3, [r7, #30]
 8002cc8:	e04c      	b.n	8002d64 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d828      	bhi.n	8002d22 <UART_SetConfig+0x1fa>
 8002cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <UART_SetConfig+0x1b0>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	08002d05 	.word	0x08002d05
 8002ce0:	08002d0d 	.word	0x08002d0d
 8002ce4:	08002d23 	.word	0x08002d23
 8002ce8:	08002d13 	.word	0x08002d13
 8002cec:	08002d23 	.word	0x08002d23
 8002cf0:	08002d23 	.word	0x08002d23
 8002cf4:	08002d23 	.word	0x08002d23
 8002cf8:	08002d1b 	.word	0x08002d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfc:	f7ff fe82 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8002d00:	61b8      	str	r0, [r7, #24]
        break;
 8002d02:	e013      	b.n	8002d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7ff fea0 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8002d08:	61b8      	str	r0, [r7, #24]
        break;
 8002d0a:	e00f      	b.n	8002d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0c:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <UART_SetConfig+0x268>)
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e00c      	b.n	8002d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d12:	f7ff fe17 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002d16:	61b8      	str	r0, [r7, #24]
        break;
 8002d18:	e008      	b.n	8002d2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d1e:	61bb      	str	r3, [r7, #24]
        break;
 8002d20:	e004      	b.n	8002d2c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	77bb      	strb	r3, [r7, #30]
        break;
 8002d2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085a      	lsrs	r2, r3, #1
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	441a      	add	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d909      	bls.n	8002d60 <UART_SetConfig+0x238>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d52:	d205      	bcs.n	8002d60 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e001      	b.n	8002d64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	efff69f3 	.word	0xefff69f3
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40004800 	.word	0x40004800
 8002d90:	007a1200 	.word	0x007a1200

08002d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e92:	d10a      	bne.n	8002eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b098      	sub	sp, #96	@ 0x60
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ee8:	f7fd fc3e 	bl	8000768 <HAL_GetTick>
 8002eec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d12e      	bne.n	8002f5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f88c 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d021      	beq.n	8002f5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e6      	bne.n	8002f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e062      	b.n	8003020 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d149      	bne.n	8002ffc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f856 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03c      	beq.n	8002ffc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e011      	b.n	8003020 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3758      	adds	r7, #88	@ 0x58
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	e04f      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d04b      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fd fb91 	bl	8000768 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e04e      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d037      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b80      	cmp	r3, #128	@ 0x80
 800306e:	d034      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	d031      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d110      	bne.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f838 	bl	8003102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2208      	movs	r2, #8
 8003096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e029      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b4:	d111      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f81e 	bl	8003102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d0a0      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003102:	b480      	push	{r7}
 8003104:	b095      	sub	sp, #84	@ 0x54
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800311e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003128:	643b      	str	r3, [r7, #64]	@ 0x40
 800312a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e6      	bne.n	800310a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3308      	adds	r3, #8
 8003142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3308      	adds	r3, #8
 800315a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800315c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003174:	2b01      	cmp	r3, #1
 8003176:	d118      	bne.n	80031aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	60bb      	str	r3, [r7, #8]
   return(result);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e6      	bne.n	8003178 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031be:	bf00      	nop
 80031c0:	3754      	adds	r7, #84	@ 0x54
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <memset>:
 80031ca:	4402      	add	r2, r0
 80031cc:	4603      	mov	r3, r0
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d100      	bne.n	80031d4 <memset+0xa>
 80031d2:	4770      	bx	lr
 80031d4:	f803 1b01 	strb.w	r1, [r3], #1
 80031d8:	e7f9      	b.n	80031ce <memset+0x4>
	...

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d0d      	ldr	r5, [pc, #52]	@ (8003214 <__libc_init_array+0x38>)
 80031e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003218 <__libc_init_array+0x3c>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	2600      	movs	r6, #0
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	4d0b      	ldr	r5, [pc, #44]	@ (800321c <__libc_init_array+0x40>)
 80031ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003220 <__libc_init_array+0x44>)
 80031f0:	f000 f818 	bl	8003224 <_init>
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	2600      	movs	r6, #0
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003274 	.word	0x08003274
 8003218:	08003274 	.word	0x08003274
 800321c:	08003274 	.word	0x08003274
 8003220:	08003278 	.word	0x08003278

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
