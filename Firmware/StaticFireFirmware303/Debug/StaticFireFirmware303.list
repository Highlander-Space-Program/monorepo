
StaticFireFirmware303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006518  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080066a0  080066a0  000076a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  00008048  2**0
                  CONTENTS
  4 .ARM          00000000  080066ec  080066ec  00008048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066ec  080066ec  00008048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  080066f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008048  2**0
                  CONTENTS
 10 .bss          000002a4  20000048  20000048  00008048  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00008048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f34e  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212c  00000000  00000000  000173c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  000194f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a77  00000000  00000000  0001a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001acc7  00000000  00000000  0001acb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010637  00000000  00000000  0003597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a160f  00000000  00000000  00045fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e75c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003920  00000000  00000000  000e7608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000eaf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006688 	.word	0x08006688

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08006688 	.word	0x08006688

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <Deg_To_CCR>:
#ifndef INC_DEG_TO_CCR_H_
#define INC_DEG_TO_CCR_H_
#include "config.h"

//returns ccr needed to move servo to the degree passed in in deg variable
uint32_t Deg_To_CCR(uint8_t deg, const struct Servo *servo, const int max_deg) {
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	73fb      	strb	r3, [r7, #15]
  uint32_t arr = servo->timer->Init.Period;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	61fb      	str	r3, [r7, #28]
  double pulse_width = ((double)HSP_SERVO_MAX_PULSE_WIDTH-HSP_SERVO_MIN_PULSE_WIDTH)/max_deg * deg + HSP_SERVO_MIN_PULSE_WIDTH;
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fd54 	bl	800046c <__aeabi_i2d>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	491e      	ldr	r1, [pc, #120]	@ (8000a48 <Deg_To_CCR+0xa0>)
 80009ce:	f7ff fee1 	bl	8000794 <__aeabi_ddiv>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4614      	mov	r4, r2
 80009d8:	461d      	mov	r5, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd45 	bl	800046c <__aeabi_i2d>
 80009e2:	4602      	mov	r2, r0
 80009e4:	460b      	mov	r3, r1
 80009e6:	4620      	mov	r0, r4
 80009e8:	4629      	mov	r1, r5
 80009ea:	f7ff fda9 	bl	8000540 <__aeabi_dmul>
 80009ee:	4602      	mov	r2, r0
 80009f0:	460b      	mov	r3, r1
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <Deg_To_CCR+0xa4>)
 80009fc:	f7ff fbea 	bl	80001d4 <__adddf3>
 8000a00:	4602      	mov	r2, r0
 8000a02:	460b      	mov	r3, r1
 8000a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return pulse_width*arr/HSP_SERVO_PWM_PERIOD;
 8000a08:	69f8      	ldr	r0, [r7, #28]
 8000a0a:	f7ff fd1f 	bl	800044c <__aeabi_ui2d>
 8000a0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a12:	f7ff fd95 	bl	8000540 <__aeabi_dmul>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	a308      	add	r3, pc, #32	@ (adr r3, 8000a40 <Deg_To_CCR+0x98>)
 8000a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a24:	f7ff feb6 	bl	8000794 <__aeabi_ddiv>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff ff98 	bl	8000964 <__aeabi_d2uiz>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	00000000 	.word	0x00000000
 8000a44:	40d38800 	.word	0x40d38800
 8000a48:	409f4000 	.word	0x409f4000
 8000a4c:	407f4000 	.word	0x407f4000

08000a50 <Create_Ack>:
#ifndef INC_CREATE_ACK_H_
#define INC_CREATE_ACK_H_

#include "config.h"

uint8_t Create_Ack() {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	if (no2State == SERVO_OPENED_ON || no2State == SERVO_OPENED_OFF) {
 8000a54:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <Create_Ack+0xf0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d003      	beq.n	8000a64 <Create_Ack+0x14>
 8000a5c:	4b38      	ldr	r3, [pc, #224]	@ (8000b40 <Create_Ack+0xf0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d105      	bne.n	8000a70 <Create_Ack+0x20>
		++ack;
 8000a64:	4b37      	ldr	r3, [pc, #220]	@ (8000b44 <Create_Ack+0xf4>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <Create_Ack+0xf4>)
 8000a6e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000a70:	4b34      	ldr	r3, [pc, #208]	@ (8000b44 <Create_Ack+0xf4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b32      	ldr	r3, [pc, #200]	@ (8000b44 <Create_Ack+0xf4>)
 8000a7a:	701a      	strb	r2, [r3, #0]
	if (no3State == SERVO_OPENED_ON || no3State == SERVO_OPENED_OFF) {
 8000a7c:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <Create_Ack+0xf8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d003      	beq.n	8000a8c <Create_Ack+0x3c>
 8000a84:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <Create_Ack+0xf8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d105      	bne.n	8000a98 <Create_Ack+0x48>
		++ack;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <Create_Ack+0xf4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <Create_Ack+0xf4>)
 8000a96:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <Create_Ack+0xf4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <Create_Ack+0xf4>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	if (no4State == SERVO_OPENED_ON || no4State == SERVO_OPENED_OFF) {
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <Create_Ack+0xfc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d003      	beq.n	8000ab4 <Create_Ack+0x64>
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <Create_Ack+0xfc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d105      	bne.n	8000ac0 <Create_Ack+0x70>
		++ack;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <Create_Ack+0xf4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <Create_Ack+0xf4>)
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <Create_Ack+0xf4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <Create_Ack+0xf4>)
 8000aca:	701a      	strb	r2, [r3, #0]
	if (no6State == SERVO_OPENED_ON || no6State == SERVO_OPENED_OFF) {
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <Create_Ack+0x100>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d003      	beq.n	8000adc <Create_Ack+0x8c>
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <Create_Ack+0x100>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d105      	bne.n	8000ae8 <Create_Ack+0x98>
		++ack;
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <Create_Ack+0xf4>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <Create_Ack+0xf4>)
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <Create_Ack+0xf4>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <Create_Ack+0xf4>)
 8000af2:	701a      	strb	r2, [r3, #0]
	if (eo1State == SERVO_OPENED_ON || eo1State == SERVO_OPENED_OFF) {
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <Create_Ack+0x104>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d003      	beq.n	8000b04 <Create_Ack+0xb4>
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <Create_Ack+0x104>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d105      	bne.n	8000b10 <Create_Ack+0xc0>
		++ack;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <Create_Ack+0xf4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <Create_Ack+0xf4>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Create_Ack+0xf4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <Create_Ack+0xf4>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	if (igniterState == IGNITER_ACTIVATED) {
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <Create_Ack+0x108>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d105      	bne.n	8000b30 <Create_Ack+0xe0>
		++ack;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <Create_Ack+0xf4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <Create_Ack+0xf4>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	}
	return ack;
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <Create_Ack+0xf4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000072 	.word	0x20000072
 8000b44:	2000006c 	.word	0x2000006c
 8000b48:	20000071 	.word	0x20000071
 8000b4c:	20000070 	.word	0x20000070
 8000b50:	2000006f 	.word	0x2000006f
 8000b54:	2000006e 	.word	0x2000006e
 8000b58:	2000006d 	.word	0x2000006d

08000b5c <Tick_EO1>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_EO1 (uint8_t cmd, struct Servo *servo) {
 8000b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b60:	b090      	sub	sp, #64	@ 0x40
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000b6c:	f001 fc66 	bl	800243c <HAL_GetTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2200      	movs	r2, #0
 8000b74:	4698      	mov	r8, r3
 8000b76:	4691      	mov	r9, r2
 8000b78:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - eo1_on_time;
 8000b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d7c <Tick_EO1+0x220>)
 8000b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000b86:	1a14      	subs	r4, r2, r0
 8000b88:	eb63 0501 	sbc.w	r5, r3, r1
 8000b8c:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(eo1State) {
 8000b90:	4b7b      	ldr	r3, [pc, #492]	@ (8000d80 <Tick_EO1+0x224>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	f200 80ac 	bhi.w	8000cf2 <Tick_EO1+0x196>
 8000b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <Tick_EO1+0x44>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000c11 	.word	0x08000c11
 8000bac:	08000cab 	.word	0x08000cab
 8000bb0:	08000c57 	.word	0x08000c57
		case SERVO_INIT:
		eo1State = SERVO_CLOSED_OFF;
 8000bb4:	4b72      	ldr	r3, [pc, #456]	@ (8000d80 <Tick_EO1+0x224>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e09a      	b.n	8000cf2 <Tick_EO1+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_EO1) {
 8000bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10e      	bne.n	8000be2 <Tick_EO1+0x86>
			eo1_on_time = HAL_GetTick();
 8000bc4:	f001 fc3a 	bl	800243c <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	627a      	str	r2, [r7, #36]	@ 0x24
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d7c <Tick_EO1+0x220>)
 8000bd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000bd6:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000bda:	4b69      	ldr	r3, [pc, #420]	@ (8000d80 <Tick_EO1+0x224>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 8000be0:	e080      	b.n	8000ce4 <Tick_EO1+0x188>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 8000be2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <Tick_EO1+0x96>
 8000bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d178      	bne.n	8000ce4 <Tick_EO1+0x188>
			eo1_on_time = HAL_GetTick();
 8000bf2:	f001 fc23 	bl	800243c <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	61fa      	str	r2, [r7, #28]
 8000bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8000d7c <Tick_EO1+0x220>)
 8000c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000c04:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000c08:	4b5d      	ldr	r3, [pc, #372]	@ (8000d80 <Tick_EO1+0x224>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e069      	b.n	8000ce4 <Tick_EO1+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_EO1 || cmd == START_1) {
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <Tick_EO1+0xc4>
 8000c18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d10e      	bne.n	8000c3e <Tick_EO1+0xe2>
			eo1_on_time = HAL_GetTick();
 8000c20:	f001 fc0c 	bl	800243c <HAL_GetTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2200      	movs	r2, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	617a      	str	r2, [r7, #20]
 8000c2c:	4b53      	ldr	r3, [pc, #332]	@ (8000d7c <Tick_EO1+0x220>)
 8000c2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c32:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000c36:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <Tick_EO1+0x224>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_CLOSED_OFF;
		}
		break;
 8000c3c:	e054      	b.n	8000ce8 <Tick_EO1+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000c3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c42:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000c46:	428a      	cmp	r2, r1
 8000c48:	f173 0300 	sbcs.w	r3, r3, #0
 8000c4c:	d34c      	bcc.n	8000ce8 <Tick_EO1+0x18c>
			eo1State = SERVO_CLOSED_OFF;
 8000c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d80 <Tick_EO1+0x224>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
		break;
 8000c54:	e048      	b.n	8000ce8 <Tick_EO1+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_EO1) {
 8000c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10e      	bne.n	8000c7c <Tick_EO1+0x120>
			eo1_on_time = HAL_GetTick();
 8000c5e:	f001 fbed 	bl	800243c <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2200      	movs	r2, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	60fa      	str	r2, [r7, #12]
 8000c6a:	4b44      	ldr	r3, [pc, #272]	@ (8000d7c <Tick_EO1+0x220>)
 8000c6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000c70:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000c74:	4b42      	ldr	r3, [pc, #264]	@ (8000d80 <Tick_EO1+0x224>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 8000c7a:	e037      	b.n	8000cec <Tick_EO1+0x190>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 8000c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <Tick_EO1+0x130>
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d12f      	bne.n	8000cec <Tick_EO1+0x190>
			eo1_on_time = HAL_GetTick();
 8000c8c:	f001 fbd6 	bl	800243c <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2200      	movs	r2, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <Tick_EO1+0x220>)
 8000c9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000c9e:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <Tick_EO1+0x224>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	701a      	strb	r2, [r3, #0]
		break;
 8000ca8:	e020      	b.n	8000cec <Tick_EO1+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_EO1) {
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10c      	bne.n	8000ccc <Tick_EO1+0x170>
			eo1_on_time = HAL_GetTick();
 8000cb2:	f001 fbc3 	bl	800243c <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	469a      	mov	sl, r3
 8000cbc:	4693      	mov	fp, r2
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <Tick_EO1+0x220>)
 8000cc0:	e9c3 ab00 	strd	sl, fp, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d80 <Tick_EO1+0x224>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_OPENED_OFF;
		}
		break;
 8000cca:	e011      	b.n	8000cf0 <Tick_EO1+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000cd0:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	f173 0300 	sbcs.w	r3, r3, #0
 8000cda:	d309      	bcc.n	8000cf0 <Tick_EO1+0x194>
			eo1State = SERVO_OPENED_OFF;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <Tick_EO1+0x224>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	701a      	strb	r2, [r3, #0]
		break;
 8000ce2:	e005      	b.n	8000cf0 <Tick_EO1+0x194>
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e004      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e002      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000cf0:	bf00      	nop
	}

	//actions
	switch(eo1State) {
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <Tick_EO1+0x224>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d83b      	bhi.n	8000d72 <Tick_EO1+0x216>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <Tick_EO1+0x1a4>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d71 	.word	0x08000d71
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d23 	.word	0x08000d23
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d43 	.word	0x08000d43
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f001 febe 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8000d20:	e027      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2120      	movs	r1, #32
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f001 feb7 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d30:	689c      	ldr	r4, [r3, #8]
 8000d32:	22b4      	movs	r2, #180	@ 0xb4
 8000d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d36:	205a      	movs	r0, #90	@ 0x5a
 8000d38:	f7ff fe36 	bl	80009a8 <Deg_To_CCR>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	6023      	str	r3, [r4, #0]
		break;
 8000d40:	e017      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4a:	f001 fea7 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8000d4e:	e010      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	f001 fea0 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5e:	689c      	ldr	r4, [r3, #8]
 8000d60:	22b4      	movs	r2, #180	@ 0xb4
 8000d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe1f 	bl	80009a8 <Deg_To_CCR>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6023      	str	r3, [r4, #0]
		break;
 8000d6e:	e000      	b.n	8000d72 <Tick_EO1+0x216>
		break;
 8000d70:	bf00      	nop

	}
}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	@ 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	2000006e 	.word	0x2000006e

08000d84 <Tick_NO6>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO6 (uint8_t cmd, struct Servo *servo) {
 8000d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d88:	b090      	sub	sp, #64	@ 0x40
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000d94:	f001 fb52 	bl	800243c <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	4691      	mov	r9, r2
 8000da0:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no6_on_time;
 8000da4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa4 <Tick_NO6+0x220>)
 8000da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000daa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000dae:	1a14      	subs	r4, r2, r0
 8000db0:	eb63 0501 	sbc.w	r5, r3, r1
 8000db4:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no6State) {
 8000db8:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa8 <Tick_NO6+0x224>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	f200 80ac 	bhi.w	8000f1a <Tick_NO6+0x196>
 8000dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc8 <Tick_NO6+0x44>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000ddd 	.word	0x08000ddd
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000ed3 	.word	0x08000ed3
 8000dd8:	08000e7f 	.word	0x08000e7f
		case SERVO_INIT:
		no6State = SERVO_CLOSED_OFF;
 8000ddc:	4b72      	ldr	r3, [pc, #456]	@ (8000fa8 <Tick_NO6+0x224>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e09a      	b.n	8000f1a <Tick_NO6+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO6) {
 8000de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d10e      	bne.n	8000e0a <Tick_NO6+0x86>
			no6_on_time = HAL_GetTick();
 8000dec:	f001 fb26 	bl	800243c <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2200      	movs	r2, #0
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	627a      	str	r2, [r7, #36]	@ 0x24
 8000df8:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa4 <Tick_NO6+0x220>)
 8000dfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000dfe:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 8000e02:	4b69      	ldr	r3, [pc, #420]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 8000e08:	e080      	b.n	8000f0c <Tick_NO6+0x188>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d003      	beq.n	8000e1a <Tick_NO6+0x96>
 8000e12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d178      	bne.n	8000f0c <Tick_NO6+0x188>
			no6_on_time = HAL_GetTick();
 8000e1a:	f001 fb0f 	bl	800243c <HAL_GetTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2200      	movs	r2, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	61fa      	str	r2, [r7, #28]
 8000e26:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e2c:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000e30:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	701a      	strb	r2, [r3, #0]
		break;
 8000e36:	e069      	b.n	8000f0c <Tick_NO6+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO6 || cmd == START_1) {
 8000e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d003      	beq.n	8000e48 <Tick_NO6+0xc4>
 8000e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d10e      	bne.n	8000e66 <Tick_NO6+0xe2>
			no6_on_time = HAL_GetTick();
 8000e48:	f001 faf8 	bl	800243c <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	617a      	str	r2, [r7, #20]
 8000e54:	4b53      	ldr	r3, [pc, #332]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e5a:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000e5e:	4b52      	ldr	r3, [pc, #328]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_CLOSED_OFF;
		}
		break;
 8000e64:	e054      	b.n	8000f10 <Tick_NO6+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e6a:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	f173 0300 	sbcs.w	r3, r3, #0
 8000e74:	d34c      	bcc.n	8000f10 <Tick_NO6+0x18c>
			no6State = SERVO_CLOSED_OFF;
 8000e76:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e048      	b.n	8000f10 <Tick_NO6+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO6) {
 8000e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d10e      	bne.n	8000ea4 <Tick_NO6+0x120>
			no6_on_time = HAL_GetTick();
 8000e86:	f001 fad9 	bl	800243c <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	60fa      	str	r2, [r7, #12]
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e98:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 8000e9c:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 8000ea2:	e037      	b.n	8000f14 <Tick_NO6+0x190>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 8000ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d003      	beq.n	8000eb4 <Tick_NO6+0x130>
 8000eac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d12f      	bne.n	8000f14 <Tick_NO6+0x190>
			no6_on_time = HAL_GetTick();
 8000eb4:	f001 fac2 	bl	800243c <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <Tick_NO6+0x220>)
 8000ec2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000ec6:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000eca:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <Tick_NO6+0x224>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	701a      	strb	r2, [r3, #0]
		break;
 8000ed0:	e020      	b.n	8000f14 <Tick_NO6+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO6) {
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d10c      	bne.n	8000ef4 <Tick_NO6+0x170>
			no6_on_time = HAL_GetTick();
 8000eda:	f001 faaf 	bl	800243c <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	4693      	mov	fp, r2
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <Tick_NO6+0x220>)
 8000ee8:	e9c3 ab00 	strd	sl, fp, [r3]
			no6State = SERVO_CLOSED_ON;
 8000eec:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <Tick_NO6+0x224>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_OPENED_OFF;
		}
		break;
 8000ef2:	e011      	b.n	8000f18 <Tick_NO6+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000ef4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ef8:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000efc:	428a      	cmp	r2, r1
 8000efe:	f173 0300 	sbcs.w	r3, r3, #0
 8000f02:	d309      	bcc.n	8000f18 <Tick_NO6+0x194>
			no6State = SERVO_OPENED_OFF;
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <Tick_NO6+0x224>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	701a      	strb	r2, [r3, #0]
		break;
 8000f0a:	e005      	b.n	8000f18 <Tick_NO6+0x194>
		break;
 8000f0c:	bf00      	nop
 8000f0e:	e004      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f10:	bf00      	nop
 8000f12:	e002      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f14:	bf00      	nop
 8000f16:	e000      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f18:	bf00      	nop
	}

	//actions
	switch(no6State) {
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <Tick_NO6+0x224>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d83b      	bhi.n	8000f9a <Tick_NO6+0x216>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <Tick_NO6+0x1a4>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f4b 	.word	0x08000f4b
 8000f34:	08000f79 	.word	0x08000f79
 8000f38:	08000f6b 	.word	0x08000f6b
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f44:	f001 fdaa 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8000f48:	e027      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f52:	f001 fda3 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f58:	689c      	ldr	r4, [r3, #8]
 8000f5a:	22b4      	movs	r2, #180	@ 0xb4
 8000f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f5e:	205a      	movs	r0, #90	@ 0x5a
 8000f60:	f7ff fd22 	bl	80009a8 <Deg_To_CCR>
 8000f64:	4603      	mov	r3, r0
 8000f66:	6023      	str	r3, [r4, #0]
		break;
 8000f68:	e017      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f001 fd93 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8000f76:	e010      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f001 fd8c 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	689c      	ldr	r4, [r3, #8]
 8000f88:	22b4      	movs	r2, #180	@ 0xb4
 8000f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fd0b 	bl	80009a8 <Deg_To_CCR>
 8000f92:	4603      	mov	r3, r0
 8000f94:	6023      	str	r3, [r4, #0]
		break;
 8000f96:	e000      	b.n	8000f9a <Tick_NO6+0x216>
		break;
 8000f98:	bf00      	nop

	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3740      	adds	r7, #64	@ 0x40
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fa4:	20000090 	.word	0x20000090
 8000fa8:	2000006f 	.word	0x2000006f

08000fac <Tick_NO4>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO4 (uint8_t cmd, struct Servo *servo) {
 8000fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb0:	b090      	sub	sp, #64	@ 0x40
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000fbc:	f001 fa3e 	bl	800243c <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no4_on_time;
 8000fcc:	4b79      	ldr	r3, [pc, #484]	@ (80011b4 <Tick_NO4+0x208>)
 8000fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000fd6:	1a14      	subs	r4, r2, r0
 8000fd8:	eb63 0501 	sbc.w	r5, r3, r1
 8000fdc:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no4State) {
 8000fe0:	4b75      	ldr	r3, [pc, #468]	@ (80011b8 <Tick_NO4+0x20c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	f200 80a0 	bhi.w	800112a <Tick_NO4+0x17e>
 8000fea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <Tick_NO4+0x44>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001059 	.word	0x08001059
 8000ffc:	080010e3 	.word	0x080010e3
 8001000:	08001097 	.word	0x08001097
		case SERVO_INIT:
		no4State = SERVO_CLOSED_OFF;
 8001004:	4b6c      	ldr	r3, [pc, #432]	@ (80011b8 <Tick_NO4+0x20c>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		break;
 800100a:	e08e      	b.n	800112a <Tick_NO4+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO4) {
 800100c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001010:	2b05      	cmp	r3, #5
 8001012:	d10e      	bne.n	8001032 <Tick_NO4+0x86>
			no4_on_time = HAL_GetTick();
 8001014:	f001 fa12 	bl	800243c <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2200      	movs	r2, #0
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001020:	4b64      	ldr	r3, [pc, #400]	@ (80011b4 <Tick_NO4+0x208>)
 8001022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001026:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 800102a:	4b63      	ldr	r3, [pc, #396]	@ (80011b8 <Tick_NO4+0x20c>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 8001030:	e074      	b.n	800111c <Tick_NO4+0x170>
		else if (cmd == OPEN_NO4) {
 8001032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001036:	2b04      	cmp	r3, #4
 8001038:	d170      	bne.n	800111c <Tick_NO4+0x170>
			no4_on_time = HAL_GetTick();
 800103a:	f001 f9ff 	bl	800243c <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2200      	movs	r2, #0
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	61fa      	str	r2, [r7, #28]
 8001046:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <Tick_NO4+0x208>)
 8001048:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800104c:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001050:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <Tick_NO4+0x20c>)
 8001052:	2203      	movs	r2, #3
 8001054:	701a      	strb	r2, [r3, #0]
		break;
 8001056:	e061      	b.n	800111c <Tick_NO4+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO4) {
 8001058:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800105c:	2b04      	cmp	r3, #4
 800105e:	d10e      	bne.n	800107e <Tick_NO4+0xd2>
			no4_on_time = HAL_GetTick();
 8001060:	f001 f9ec 	bl	800243c <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2200      	movs	r2, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	617a      	str	r2, [r7, #20]
 800106c:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <Tick_NO4+0x208>)
 800106e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001072:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001076:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <Tick_NO4+0x20c>)
 8001078:	2203      	movs	r2, #3
 800107a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_CLOSED_OFF;
		}
		break;
 800107c:	e050      	b.n	8001120 <Tick_NO4+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800107e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001082:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001086:	428a      	cmp	r2, r1
 8001088:	f173 0300 	sbcs.w	r3, r3, #0
 800108c:	d348      	bcc.n	8001120 <Tick_NO4+0x174>
			no4State = SERVO_CLOSED_OFF;
 800108e:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <Tick_NO4+0x20c>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
		break;
 8001094:	e044      	b.n	8001120 <Tick_NO4+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO4) {
 8001096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800109a:	2b05      	cmp	r3, #5
 800109c:	d10e      	bne.n	80010bc <Tick_NO4+0x110>
			no4_on_time = HAL_GetTick();
 800109e:	f001 f9cd 	bl	800243c <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2200      	movs	r2, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	60fa      	str	r2, [r7, #12]
 80010aa:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <Tick_NO4+0x208>)
 80010ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010b0:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 80010b4:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <Tick_NO4+0x20c>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 80010ba:	e033      	b.n	8001124 <Tick_NO4+0x178>
		else if (cmd == OPEN_NO4) {
 80010bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d12f      	bne.n	8001124 <Tick_NO4+0x178>
			no4_on_time = HAL_GetTick();
 80010c4:	f001 f9ba 	bl	800243c <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2200      	movs	r2, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <Tick_NO4+0x208>)
 80010d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80010d6:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <Tick_NO4+0x20c>)
 80010dc:	2203      	movs	r2, #3
 80010de:	701a      	strb	r2, [r3, #0]
		break;
 80010e0:	e020      	b.n	8001124 <Tick_NO4+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO4) {
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10c      	bne.n	8001104 <Tick_NO4+0x158>
			no4_on_time = HAL_GetTick();
 80010ea:	f001 f9a7 	bl	800243c <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2200      	movs	r2, #0
 80010f2:	469a      	mov	sl, r3
 80010f4:	4693      	mov	fp, r2
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <Tick_NO4+0x208>)
 80010f8:	e9c3 ab00 	strd	sl, fp, [r3]
			no4State = SERVO_CLOSED_ON;
 80010fc:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <Tick_NO4+0x20c>)
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_OPENED_OFF;
		}
		break;
 8001102:	e011      	b.n	8001128 <Tick_NO4+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001104:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001108:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 800110c:	428a      	cmp	r2, r1
 800110e:	f173 0300 	sbcs.w	r3, r3, #0
 8001112:	d309      	bcc.n	8001128 <Tick_NO4+0x17c>
			no4State = SERVO_OPENED_OFF;
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <Tick_NO4+0x20c>)
 8001116:	2204      	movs	r2, #4
 8001118:	701a      	strb	r2, [r3, #0]
		break;
 800111a:	e005      	b.n	8001128 <Tick_NO4+0x17c>
		break;
 800111c:	bf00      	nop
 800111e:	e004      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001120:	bf00      	nop
 8001122:	e002      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001124:	bf00      	nop
 8001126:	e000      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001128:	bf00      	nop
	}

	//actions
	switch(no4State) {
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <Tick_NO4+0x20c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d83b      	bhi.n	80011aa <Tick_NO4+0x1fe>
 8001132:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <Tick_NO4+0x18c>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080011a9 	.word	0x080011a9
 800113c:	0800114d 	.word	0x0800114d
 8001140:	0800115b 	.word	0x0800115b
 8001144:	08001189 	.word	0x08001189
 8001148:	0800117b 	.word	0x0800117b
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f001 fca2 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8001158:	e027      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2108      	movs	r1, #8
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f001 fc9b 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	689c      	ldr	r4, [r3, #8]
 800116a:	22b4      	movs	r2, #180	@ 0xb4
 800116c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800116e:	205c      	movs	r0, #92	@ 0x5c
 8001170:	f7ff fc1a 	bl	80009a8 <Deg_To_CCR>
 8001174:	4603      	mov	r3, r0
 8001176:	6023      	str	r3, [r4, #0]
		break;
 8001178:	e017      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f001 fc8b 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8001186:	e010      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f001 fc84 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001196:	689c      	ldr	r4, [r3, #8]
 8001198:	22b4      	movs	r2, #180	@ 0xb4
 800119a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800119c:	2008      	movs	r0, #8
 800119e:	f7ff fc03 	bl	80009a8 <Deg_To_CCR>
 80011a2:	4603      	mov	r3, r0
 80011a4:	6023      	str	r3, [r4, #0]
		break;
 80011a6:	e000      	b.n	80011aa <Tick_NO4+0x1fe>
		break;
 80011a8:	bf00      	nop

	}
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	@ 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011b4:	20000088 	.word	0x20000088
 80011b8:	20000070 	.word	0x20000070

080011bc <Tick_NO3>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO3 (uint8_t cmd, struct Servo *servo) {
 80011bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c0:	b090      	sub	sp, #64	@ 0x40
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80011c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80011cc:	f001 f936 	bl	800243c <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	4698      	mov	r8, r3
 80011d6:	4691      	mov	r9, r2
 80011d8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no3_on_time;
 80011dc:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <Tick_NO3+0x20c>)
 80011de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011e6:	1a14      	subs	r4, r2, r0
 80011e8:	eb63 0501 	sbc.w	r5, r3, r1
 80011ec:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no3State) {
 80011f0:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <Tick_NO3+0x210>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	f200 80a0 	bhi.w	800133a <Tick_NO3+0x17e>
 80011fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <Tick_NO3+0x44>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001215 	.word	0x08001215
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001269 	.word	0x08001269
 800120c:	080012f3 	.word	0x080012f3
 8001210:	080012a7 	.word	0x080012a7
		case SERVO_INIT:
		no3State = SERVO_CLOSED_OFF;
 8001214:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <Tick_NO3+0x210>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
		break;
 800121a:	e08e      	b.n	800133a <Tick_NO3+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO3) {
 800121c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001220:	2b07      	cmp	r3, #7
 8001222:	d10e      	bne.n	8001242 <Tick_NO3+0x86>
			no3_on_time = HAL_GetTick();
 8001224:	f001 f90a 	bl	800243c <HAL_GetTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2200      	movs	r2, #0
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001230:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <Tick_NO3+0x20c>)
 8001232:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001236:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 800123a:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <Tick_NO3+0x210>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 8001240:	e074      	b.n	800132c <Tick_NO3+0x170>
		else if (cmd == OPEN_NO3) {
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001246:	2b06      	cmp	r3, #6
 8001248:	d170      	bne.n	800132c <Tick_NO3+0x170>
			no3_on_time = HAL_GetTick();
 800124a:	f001 f8f7 	bl	800243c <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	2200      	movs	r2, #0
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	61fa      	str	r2, [r7, #28]
 8001256:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <Tick_NO3+0x20c>)
 8001258:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800125c:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 8001260:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <Tick_NO3+0x210>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
		break;
 8001266:	e061      	b.n	800132c <Tick_NO3+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO3) {
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126c:	2b06      	cmp	r3, #6
 800126e:	d10e      	bne.n	800128e <Tick_NO3+0xd2>
			no3_on_time = HAL_GetTick();
 8001270:	f001 f8e4 	bl	800243c <HAL_GetTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2200      	movs	r2, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <Tick_NO3+0x20c>)
 800127e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001282:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 8001286:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <Tick_NO3+0x210>)
 8001288:	2203      	movs	r2, #3
 800128a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_CLOSED_OFF;
		}
		break;
 800128c:	e050      	b.n	8001330 <Tick_NO3+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001292:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001296:	428a      	cmp	r2, r1
 8001298:	f173 0300 	sbcs.w	r3, r3, #0
 800129c:	d348      	bcc.n	8001330 <Tick_NO3+0x174>
			no3State = SERVO_CLOSED_OFF;
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <Tick_NO3+0x210>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
		break;
 80012a4:	e044      	b.n	8001330 <Tick_NO3+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO3) {
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d10e      	bne.n	80012cc <Tick_NO3+0x110>
			no3_on_time = HAL_GetTick();
 80012ae:	f001 f8c5 	bl	800243c <HAL_GetTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2200      	movs	r2, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	60fa      	str	r2, [r7, #12]
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <Tick_NO3+0x20c>)
 80012bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80012c0:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <Tick_NO3+0x210>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 80012ca:	e033      	b.n	8001334 <Tick_NO3+0x178>
		else if (cmd == OPEN_NO3) {
 80012cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d12f      	bne.n	8001334 <Tick_NO3+0x178>
			no3_on_time = HAL_GetTick();
 80012d4:	f001 f8b2 	bl	800243c <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2200      	movs	r2, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <Tick_NO3+0x20c>)
 80012e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012e6:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 80012ea:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <Tick_NO3+0x210>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	701a      	strb	r2, [r3, #0]
		break;
 80012f0:	e020      	b.n	8001334 <Tick_NO3+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO3) {
 80012f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d10c      	bne.n	8001314 <Tick_NO3+0x158>
			no3_on_time = HAL_GetTick();
 80012fa:	f001 f89f 	bl	800243c <HAL_GetTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	2200      	movs	r2, #0
 8001302:	469a      	mov	sl, r3
 8001304:	4693      	mov	fp, r2
 8001306:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <Tick_NO3+0x20c>)
 8001308:	e9c3 ab00 	strd	sl, fp, [r3]
			no3State = SERVO_CLOSED_ON;
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <Tick_NO3+0x210>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_OPENED_OFF;
		}
		break;
 8001312:	e011      	b.n	8001338 <Tick_NO3+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001318:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 800131c:	428a      	cmp	r2, r1
 800131e:	f173 0300 	sbcs.w	r3, r3, #0
 8001322:	d309      	bcc.n	8001338 <Tick_NO3+0x17c>
			no3State = SERVO_OPENED_OFF;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <Tick_NO3+0x210>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
		break;
 800132a:	e005      	b.n	8001338 <Tick_NO3+0x17c>
		break;
 800132c:	bf00      	nop
 800132e:	e004      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001330:	bf00      	nop
 8001332:	e002      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001338:	bf00      	nop
	}

	//actions
	switch(no3State) {
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <Tick_NO3+0x210>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d83d      	bhi.n	80013be <Tick_NO3+0x202>
 8001342:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <Tick_NO3+0x18c>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013bd 	.word	0x080013bd
 800134c:	0800135d 	.word	0x0800135d
 8001350:	0800136b 	.word	0x0800136b
 8001354:	0800139b 	.word	0x0800139b
 8001358:	0800138d 	.word	0x0800138d
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2102      	movs	r1, #2
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f001 fb9a 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8001368:	e029      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2102      	movs	r1, #2
 800136e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001372:	f001 fb93 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_CLOSED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	689c      	ldr	r4, [r3, #8]
 800137a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800137e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001380:	205a      	movs	r0, #90	@ 0x5a
 8001382:	f7ff fb11 	bl	80009a8 <Deg_To_CCR>
 8001386:	4603      	mov	r3, r0
 8001388:	6023      	str	r3, [r4, #0]
		break;
 800138a:	e018      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2102      	movs	r1, #2
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f001 fb82 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8001398:	e011      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2102      	movs	r1, #2
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f001 fb7b 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_OPENED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	689c      	ldr	r4, [r3, #8]
 80013aa:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80013ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff faf9 	bl	80009a8 <Deg_To_CCR>
 80013b6:	4603      	mov	r3, r0
 80013b8:	6023      	str	r3, [r4, #0]
		break;
 80013ba:	e000      	b.n	80013be <Tick_NO3+0x202>
		break;
 80013bc:	bf00      	nop

	}
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013c8:	20000080 	.word	0x20000080
 80013cc:	20000071 	.word	0x20000071

080013d0 <Tick_NO2>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO2 (uint8_t cmd, struct Servo *servo) {
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b090      	sub	sp, #64	@ 0x40
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80013e0:	f001 f82c 	bl	800243c <HAL_GetTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2200      	movs	r2, #0
 80013e8:	4698      	mov	r8, r3
 80013ea:	4691      	mov	r9, r2
 80013ec:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no2_on_time;
 80013f0:	4b79      	ldr	r3, [pc, #484]	@ (80015d8 <Tick_NO2+0x208>)
 80013f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013fa:	1a14      	subs	r4, r2, r0
 80013fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001400:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no2State) {
 8001404:	4b75      	ldr	r3, [pc, #468]	@ (80015dc <Tick_NO2+0x20c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	f200 80a0 	bhi.w	800154e <Tick_NO2+0x17e>
 800140e:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <Tick_NO2+0x44>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001429 	.word	0x08001429
 8001418:	08001431 	.word	0x08001431
 800141c:	0800147d 	.word	0x0800147d
 8001420:	08001507 	.word	0x08001507
 8001424:	080014bb 	.word	0x080014bb
		case SERVO_INIT:
		no2State = SERVO_CLOSED_OFF;
 8001428:	4b6c      	ldr	r3, [pc, #432]	@ (80015dc <Tick_NO2+0x20c>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
		break;
 800142e:	e08e      	b.n	800154e <Tick_NO2+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO2) {
 8001430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001434:	2b0a      	cmp	r3, #10
 8001436:	d10e      	bne.n	8001456 <Tick_NO2+0x86>
			no2_on_time = HAL_GetTick();
 8001438:	f001 f800 	bl	800243c <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2200      	movs	r2, #0
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	627a      	str	r2, [r7, #36]	@ 0x24
 8001444:	4b64      	ldr	r3, [pc, #400]	@ (80015d8 <Tick_NO2+0x208>)
 8001446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800144a:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 800144e:	4b63      	ldr	r3, [pc, #396]	@ (80015dc <Tick_NO2+0x20c>)
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 8001454:	e074      	b.n	8001540 <Tick_NO2+0x170>
		else if (cmd == OPEN_NO2) {
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800145a:	2b09      	cmp	r3, #9
 800145c:	d170      	bne.n	8001540 <Tick_NO2+0x170>
			no2_on_time = HAL_GetTick();
 800145e:	f000 ffed 	bl	800243c <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	2200      	movs	r2, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	61fa      	str	r2, [r7, #28]
 800146a:	4b5b      	ldr	r3, [pc, #364]	@ (80015d8 <Tick_NO2+0x208>)
 800146c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001470:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 8001474:	4b59      	ldr	r3, [pc, #356]	@ (80015dc <Tick_NO2+0x20c>)
 8001476:	2203      	movs	r2, #3
 8001478:	701a      	strb	r2, [r3, #0]
		break;
 800147a:	e061      	b.n	8001540 <Tick_NO2+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO2) {
 800147c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001480:	2b09      	cmp	r3, #9
 8001482:	d10e      	bne.n	80014a2 <Tick_NO2+0xd2>
			no2_on_time = HAL_GetTick();
 8001484:	f000 ffda 	bl	800243c <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2200      	movs	r2, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	617a      	str	r2, [r7, #20]
 8001490:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <Tick_NO2+0x208>)
 8001492:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001496:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 800149a:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <Tick_NO2+0x20c>)
 800149c:	2203      	movs	r2, #3
 800149e:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_CLOSED_OFF;
		}
		break;
 80014a0:	e050      	b.n	8001544 <Tick_NO2+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 80014a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014a6:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 80014aa:	428a      	cmp	r2, r1
 80014ac:	f173 0300 	sbcs.w	r3, r3, #0
 80014b0:	d348      	bcc.n	8001544 <Tick_NO2+0x174>
			no2State = SERVO_CLOSED_OFF;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <Tick_NO2+0x20c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
		break;
 80014b8:	e044      	b.n	8001544 <Tick_NO2+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO2) {
 80014ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d10e      	bne.n	80014e0 <Tick_NO2+0x110>
			no2_on_time = HAL_GetTick();
 80014c2:	f000 ffbb 	bl	800243c <HAL_GetTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2200      	movs	r2, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	60fa      	str	r2, [r7, #12]
 80014ce:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <Tick_NO2+0x208>)
 80014d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014d4:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 80014d8:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <Tick_NO2+0x20c>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 80014de:	e033      	b.n	8001548 <Tick_NO2+0x178>
		else if (cmd == OPEN_NO2) {
 80014e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d12f      	bne.n	8001548 <Tick_NO2+0x178>
			no2_on_time = HAL_GetTick();
 80014e8:	f000 ffa8 	bl	800243c <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2200      	movs	r2, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <Tick_NO2+0x208>)
 80014f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014fa:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <Tick_NO2+0x20c>)
 8001500:	2203      	movs	r2, #3
 8001502:	701a      	strb	r2, [r3, #0]
		break;
 8001504:	e020      	b.n	8001548 <Tick_NO2+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO2) {
 8001506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d10c      	bne.n	8001528 <Tick_NO2+0x158>
			no2_on_time = HAL_GetTick();
 800150e:	f000 ff95 	bl	800243c <HAL_GetTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2200      	movs	r2, #0
 8001516:	469a      	mov	sl, r3
 8001518:	4693      	mov	fp, r2
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <Tick_NO2+0x208>)
 800151c:	e9c3 ab00 	strd	sl, fp, [r3]
			no2State = SERVO_CLOSED_ON;
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <Tick_NO2+0x20c>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_OPENED_OFF;
		}
		break;
 8001526:	e011      	b.n	800154c <Tick_NO2+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001528:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800152c:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001530:	428a      	cmp	r2, r1
 8001532:	f173 0300 	sbcs.w	r3, r3, #0
 8001536:	d309      	bcc.n	800154c <Tick_NO2+0x17c>
			no2State = SERVO_OPENED_OFF;
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <Tick_NO2+0x20c>)
 800153a:	2204      	movs	r2, #4
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	e005      	b.n	800154c <Tick_NO2+0x17c>
		break;
 8001540:	bf00      	nop
 8001542:	e004      	b.n	800154e <Tick_NO2+0x17e>
		break;
 8001544:	bf00      	nop
 8001546:	e002      	b.n	800154e <Tick_NO2+0x17e>
		break;
 8001548:	bf00      	nop
 800154a:	e000      	b.n	800154e <Tick_NO2+0x17e>
		break;
 800154c:	bf00      	nop
	}

	//actions
	switch(no2State) {
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <Tick_NO2+0x20c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d83b      	bhi.n	80015ce <Tick_NO2+0x1fe>
 8001556:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <Tick_NO2+0x18c>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015cd 	.word	0x080015cd
 8001560:	08001571 	.word	0x08001571
 8001564:	0800157f 	.word	0x0800157f
 8001568:	080015ad 	.word	0x080015ad
 800156c:	0800159f 	.word	0x0800159f
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f001 fa90 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 800157c:	e027      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001586:	f001 fa89 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	689c      	ldr	r4, [r3, #8]
 800158e:	22b4      	movs	r2, #180	@ 0xb4
 8001590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001592:	2056      	movs	r0, #86	@ 0x56
 8001594:	f7ff fa08 	bl	80009a8 <Deg_To_CCR>
 8001598:	4603      	mov	r3, r0
 800159a:	6023      	str	r3, [r4, #0]
		break;
 800159c:	e017      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f001 fa79 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 80015aa:	e010      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f001 fa72 	bl	8002a9c <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 80015b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ba:	689c      	ldr	r4, [r3, #8]
 80015bc:	22b4      	movs	r2, #180	@ 0xb4
 80015be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff f9f1 	bl	80009a8 <Deg_To_CCR>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6023      	str	r3, [r4, #0]
		break;
 80015ca:	e000      	b.n	80015ce <Tick_NO2+0x1fe>
		break;
 80015cc:	bf00      	nop

	}
}
 80015ce:	bf00      	nop
 80015d0:	3740      	adds	r7, #64	@ 0x40
 80015d2:	46bd      	mov	sp, r7
 80015d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d8:	20000078 	.word	0x20000078
 80015dc:	20000072 	.word	0x20000072

080015e0 <Tick_Igniter>:
#define INC_IGNITER_H_

#include "config.h"

//behavior for igniter
void Tick_Igniter(uint8_t cmd) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	//transitions
	switch(igniterState) {
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <Tick_Igniter+0xdc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d023      	beq.n	800163a <Tick_Igniter+0x5a>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	dc3d      	bgt.n	8001672 <Tick_Igniter+0x92>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <Tick_Igniter+0x20>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d004      	beq.n	8001608 <Tick_Igniter+0x28>
 80015fe:	e038      	b.n	8001672 <Tick_Igniter+0x92>
		case IGNITER_INIT:
		igniterState = IGNITER_DEACTIVATED;
 8001600:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <Tick_Igniter+0xdc>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
		break;
 8001606:	e034      	b.n	8001672 <Tick_Igniter+0x92>

		case IGNITER_DEACTIVATED:
		if (cmd == ACTIVATE_IGNITER && (!isCloseAll && !isAborted)) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b0e      	cmp	r3, #14
 800160c:	d111      	bne.n	8001632 <Tick_Igniter+0x52>
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <Tick_Igniter+0xe0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <Tick_Igniter+0x52>
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <Tick_Igniter+0xe4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <Tick_Igniter+0x52>
			igniterState = IGNITER_ACTIVATED;
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <Tick_Igniter+0xdc>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_DEACTIVATED;
		}
		break;
 8001630:	e01f      	b.n	8001672 <Tick_Igniter+0x92>
			igniterState = IGNITER_DEACTIVATED;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <Tick_Igniter+0xdc>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		break;
 8001638:	e01b      	b.n	8001672 <Tick_Igniter+0x92>

		case IGNITER_ACTIVATED:
		if (((cmd == DEACTIVATE_IGNITER || cmd == CLOSE_ALL || isCloseAll)  && !isStarted) || cmd == ABORT) {
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d006      	beq.n	800164e <Tick_Igniter+0x6e>
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d003      	beq.n	800164e <Tick_Igniter+0x6e>
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <Tick_Igniter+0xe0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <Tick_Igniter+0x7c>
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <Tick_Igniter+0xe8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <Tick_Igniter+0x82>
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b10      	cmp	r3, #16
 8001660:	d103      	bne.n	800166a <Tick_Igniter+0x8a>
			igniterState = IGNITER_DEACTIVATED;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <Tick_Igniter+0xdc>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_ACTIVATED;
		}
		break;
 8001668:	e002      	b.n	8001670 <Tick_Igniter+0x90>
			igniterState = IGNITER_ACTIVATED;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <Tick_Igniter+0xdc>)
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
		break;
 8001670:	bf00      	nop
	}

	//actions
	switch(igniterState) {
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <Tick_Igniter+0xdc>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d014      	beq.n	80016a4 <Tick_Igniter+0xc4>
 800167a:	2b02      	cmp	r3, #2
 800167c:	dc19      	bgt.n	80016b2 <Tick_Igniter+0xd2>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <Tick_Igniter+0xa8>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d007      	beq.n	8001696 <Tick_Igniter+0xb6>

		case IGNITER_ACTIVATED:
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_SET);
		break;
	}
}
 8001686:	e014      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f001 fa04 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 8001694:	e00d      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f001 f9fd 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 80016a2:	e006      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ac:	f001 f9f6 	bl	8002a9c <HAL_GPIO_WritePin>
		break;
 80016b0:	bf00      	nop
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000006d 	.word	0x2000006d
 80016c0:	20000068 	.word	0x20000068
 80016c4:	20000069 	.word	0x20000069
 80016c8:	2000006b 	.word	0x2000006b

080016cc <Servo_Disable>:

#ifndef INC_SERVO_H_
#define INC_SERVO_H_

//disables PWM signal to all servos
void Servo_Disable() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <Servo_Disable+0x3c>)
 80016d4:	f002 ff18 	bl	8004508 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80016d8:	2104      	movs	r1, #4
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <Servo_Disable+0x40>)
 80016dc:	f002 ff14 	bl	8004508 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	480b      	ldr	r0, [pc, #44]	@ (8001710 <Servo_Disable+0x44>)
 80016e4:	f002 ff10 	bl	8004508 <HAL_TIM_PWM_Stop>
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80016e8:	210c      	movs	r1, #12
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <Servo_Disable+0x44>)
 80016ec:	f002 ff0c 	bl	8004508 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80016f0:	2100      	movs	r1, #0
 80016f2:	4808      	ldr	r0, [pc, #32]	@ (8001714 <Servo_Disable+0x48>)
 80016f4:	f002 ff08 	bl	8004508 <HAL_TIM_PWM_Stop>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <Servo_Disable+0x4c>)
 80016fe:	f001 f9cd 	bl	8002a9c <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000018c 	.word	0x2000018c
 800170c:	200000f4 	.word	0x200000f4
 8001710:	200000a8 	.word	0x200000a8
 8001714:	20000140 	.word	0x20000140
 8001718:	48000400 	.word	0x48000400

0800171c <Servo_Enable>:

void Servo_Enable() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001720:	2100      	movs	r1, #0
 8001722:	480d      	ldr	r0, [pc, #52]	@ (8001758 <Servo_Enable+0x3c>)
 8001724:	f002 fe04 	bl	8004330 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001728:	2104      	movs	r1, #4
 800172a:	480c      	ldr	r0, [pc, #48]	@ (800175c <Servo_Enable+0x40>)
 800172c:	f002 fe00 	bl	8004330 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	480b      	ldr	r0, [pc, #44]	@ (8001760 <Servo_Enable+0x44>)
 8001734:	f002 fdfc 	bl	8004330 <HAL_TIM_PWM_Start>
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001738:	210c      	movs	r1, #12
 800173a:	4809      	ldr	r0, [pc, #36]	@ (8001760 <Servo_Enable+0x44>)
 800173c:	f002 fdf8 	bl	8004330 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // <- this makes me want to cry
 8001740:	2100      	movs	r1, #0
 8001742:	4808      	ldr	r0, [pc, #32]	@ (8001764 <Servo_Enable+0x48>)
 8001744:	f002 fdf4 	bl	8004330 <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2120      	movs	r1, #32
 800174c:	4806      	ldr	r0, [pc, #24]	@ (8001768 <Servo_Enable+0x4c>)
 800174e:	f001 f9a5 	bl	8002a9c <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000018c 	.word	0x2000018c
 800175c:	200000f4 	.word	0x200000f4
 8001760:	200000a8 	.word	0x200000a8
 8001764:	20000140 	.word	0x20000140
 8001768:	48000400 	.word	0x48000400

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f000 fe0a 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f890 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 fb14 	bl	8001da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800177c:	f000 fae2 	bl	8001d44 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001780:	f000 fa36 	bl	8001bf0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001784:	f000 faae 	bl	8001ce4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001788:	f000 f8e2 	bl	8001950 <MX_TIM1_Init>
  MX_TIM3_Init();
 800178c:	f000 f9d6 	bl	8001b3c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001790:	f000 f97a 	bl	8001a88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	4937      	ldr	r1, [pc, #220]	@ (8001874 <main+0x108>)
 8001798:	4837      	ldr	r0, [pc, #220]	@ (8001878 <main+0x10c>)
 800179a:	f003 fd39 	bl	8005210 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//activates servos
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <main+0x108>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b11      	cmp	r3, #17
 80017a4:	d105      	bne.n	80017b2 <main+0x46>
		Servo_Enable();
 80017a6:	f7ff ffb9 	bl	800171c <Servo_Enable>
		isServoEnabled = true;
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <main+0x110>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e008      	b.n	80017c4 <main+0x58>
	}
	//deactivates servos
	else if (rx_buff[0] == DEACTIVATE_SERVOS) {
 80017b2:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <main+0x108>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d104      	bne.n	80017c4 <main+0x58>
		Servo_Disable();
 80017ba:	f7ff ff87 	bl	80016cc <Servo_Disable>
		isServoEnabled = false;
 80017be:	4b2f      	ldr	r3, [pc, #188]	@ (800187c <main+0x110>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	}
	//if we get abort command disable servo signals and set flags
	if (rx_buff[0] == ABORT) {
 80017c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <main+0x108>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d108      	bne.n	80017de <main+0x72>
		Servo_Disable();
 80017cc:	f7ff ff7e 	bl	80016cc <Servo_Disable>
		isServoEnabled = false;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <main+0x110>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
		isAborted = true;
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <main+0x114>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e006      	b.n	80017ec <main+0x80>
	}
	//remove abort flag if deabort
	else if (rx_buff[0] == DEABORT) {
 80017de:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <main+0x108>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b13      	cmp	r3, #19
 80017e4:	d102      	bne.n	80017ec <main+0x80>
		isAborted = false;
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <main+0x114>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	}
	//set close all flag if we get close all cmd
	if (rx_buff[0] == CLOSE_ALL) {
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <main+0x108>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d103      	bne.n	80017fc <main+0x90>
		isCloseAll = true;
 80017f4:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <main+0x118>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e006      	b.n	800180a <main+0x9e>
	}
	//remove close all flag if we get declose all cmd
	else if (rx_buff[0] == DECLOSE_ALL) {
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <main+0x108>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0d      	cmp	r3, #13
 8001802:	d102      	bne.n	800180a <main+0x9e>
		isCloseAll = false;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <main+0x118>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	}
	//set started flag if we get start cmd
	if (rx_buff[0] == START_1) {
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <main+0x108>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b08      	cmp	r3, #8
 8001810:	d102      	bne.n	8001818 <main+0xac>
		isStarted = true;
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <main+0x11c>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
	}
	//removes started flag if we get destart cmd
	if (rx_buff[0] == DESTART) {
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <main+0x108>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b15      	cmp	r3, #21
 800181e:	d102      	bne.n	8001826 <main+0xba>
		isStarted = false;
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <main+0x11c>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	}

	Tick_Components();
 8001826:	f000 fb31 	bl	8001e8c <Tick_Components>


    //creates and sends acknowledgement if a new command is received or 5 seconds have passed
    if (rx_buff[0] != 0xF0 || ticks >= 50) {
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <main+0x108>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001830:	d103      	bne.n	800183a <main+0xce>
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <main+0x120>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b31      	cmp	r3, #49	@ 0x31
 8001838:	dd10      	ble.n	800185c <main+0xf0>
    	Create_Ack();
 800183a:	f7ff f909 	bl	8000a50 <Create_Ack>
    	tx_buff[0] = ack;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <main+0x124>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <main+0x128>)
 8001844:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit_IT(&huart1, tx_buff, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	4912      	ldr	r1, [pc, #72]	@ (8001894 <main+0x128>)
 800184a:	480b      	ldr	r0, [pc, #44]	@ (8001878 <main+0x10c>)
 800184c:	f003 fc82 	bl	8005154 <HAL_UART_Transmit_IT>
    	ack = 0x00;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <main+0x124>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    	ticks = 0;
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <main+0x120>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    }
//    HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
    rx_buff[0] = 0xF0;
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <main+0x108>)
 800185e:	22f0      	movs	r2, #240	@ 0xf0
 8001860:	701a      	strb	r2, [r3, #0]
    ++ticks;
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <main+0x120>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a08      	ldr	r2, [pc, #32]	@ (800188c <main+0x120>)
 800186a:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f000 fdf1 	bl	8002454 <HAL_Delay>
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 8001872:	e794      	b.n	800179e <main+0x32>
 8001874:	200000a0 	.word	0x200000a0
 8001878:	200001d8 	.word	0x200001d8
 800187c:	2000006a 	.word	0x2000006a
 8001880:	20000069 	.word	0x20000069
 8001884:	20000068 	.word	0x20000068
 8001888:	2000006b 	.word	0x2000006b
 800188c:	20000064 	.word	0x20000064
 8001890:	2000006c 	.word	0x2000006c
 8001894:	200000a4 	.word	0x200000a4

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b096      	sub	sp, #88	@ 0x58
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018a2:	2228      	movs	r2, #40	@ 0x28
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fec1 	bl	800662e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d4:	2310      	movs	r3, #16
 80018d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d8:	2302      	movs	r3, #2
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018dc:	2300      	movs	r3, #0
 80018de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80018e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f8ee 	bl	8002acc <HAL_RCC_OscConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018f6:	f000 fb0b 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fa:	230f      	movs	r3, #15
 80018fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f916 	bl	8003b48 <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001922:	f000 faf5 	bl	8001f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001926:	f241 0301 	movw	r3, #4097	@ 0x1001
 800192a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fb26 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001942:	f000 fae5 	bl	8001f10 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3758      	adds	r7, #88	@ 0x58
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b096      	sub	sp, #88	@ 0x58
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	222c      	movs	r2, #44	@ 0x2c
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fe56 	bl	800662e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001982:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001984:	4a3f      	ldr	r2, [pc, #252]	@ (8001a84 <MX_TIM1_Init+0x134>)
 8001986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001988:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <MX_TIM1_Init+0x130>)
 800198a:	2204      	movs	r2, #4
 800198c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001996:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800199a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <MX_TIM1_Init+0x130>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a2:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <MX_TIM1_Init+0x130>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <MX_TIM1_Init+0x130>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ae:	4834      	ldr	r0, [pc, #208]	@ (8001a80 <MX_TIM1_Init+0x130>)
 80019b0:	f002 fc67 	bl	8004282 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 faa9 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019ce:	4619      	mov	r1, r3
 80019d0:	482b      	ldr	r0, [pc, #172]	@ (8001a80 <MX_TIM1_Init+0x130>)
 80019d2:	f003 fa8b 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019dc:	f000 fa98 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	@ 0x60
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	481e      	ldr	r0, [pc, #120]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001a06:	f002 fe0d 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a10:	f000 fa7e 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a18:	220c      	movs	r2, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4818      	ldr	r0, [pc, #96]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001a1e:	f002 fe01 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001a28:	f000 fa72 	bl	8001f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001a62:	f003 fab1 	bl	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001a6c:	f000 fa50 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <MX_TIM1_Init+0x130>)
 8001a72:	f000 fadd 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001a76:	bf00      	nop
 8001a78:	3758      	adds	r7, #88	@ 0x58
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200000a8 	.word	0x200000a8
 8001a84:	40012c00 	.word	0x40012c00

08001a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001ac2:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ad4:	4818      	ldr	r0, [pc, #96]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001ad6:	f002 fbd4 	bl	8004282 <HAL_TIM_PWM_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ae0:	f000 fa16 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001af4:	f003 f9fa 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001afe:	f000 fa07 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b02:	2360      	movs	r3, #96	@ 0x60
 8001b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	2204      	movs	r2, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4807      	ldr	r0, [pc, #28]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001b1a:	f002 fd83 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b24:	f000 f9f4 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b28:	4803      	ldr	r0, [pc, #12]	@ (8001b38 <MX_TIM2_Init+0xb0>)
 8001b2a:	f000 fa81 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	@ 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200000f4 	.word	0x200000f4

08001b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <MX_TIM3_Init+0xb0>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b68:	2204      	movs	r2, #4
 8001b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b74:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b86:	4818      	ldr	r0, [pc, #96]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001b88:	f002 fb7b 	bl	8004282 <HAL_TIM_PWM_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001b92:	f000 f9bd 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001ba6:	f003 f9a1 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001bb0:	f000 f9ae 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	@ 0x60
 8001bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001bcc:	f002 fd2a 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001bd6:	f000 f99b 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <MX_TIM3_Init+0xac>)
 8001bdc:	f000 fa28 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000140 	.word	0x20000140
 8001bec:	40000400 	.word	0x40000400

08001bf0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b092      	sub	sp, #72	@ 0x48
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	222c      	movs	r2, #44	@ 0x2c
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fd0c 	bl	800662e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c18:	4a31      	ldr	r2, [pc, #196]	@ (8001ce0 <MX_TIM16_Init+0xf0>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8001c28:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c2a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001c2e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c42:	4826      	ldr	r0, [pc, #152]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c44:	f002 fac6 	bl	80041d4 <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001c4e:	f000 f95f 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001c52:	4822      	ldr	r0, [pc, #136]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c54:	f002 fb15 	bl	8004282 <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001c5e:	f000 f957 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	@ 0x60
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001c88:	f002 fccc 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001c92:	f000 f93d 	bl	8001f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001cbe:	f003 f983 	bl	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001cc8:	f000 f922 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001ccc:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <MX_TIM16_Init+0xec>)
 8001cce:	f000 f9af 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001cd2:	bf00      	nop
 8001cd4:	3748      	adds	r7, #72	@ 0x48
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000018c 	.word	0x2000018c
 8001ce0:	40014400 	.word	0x40014400

08001ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	@ (8001d40 <MX_USART1_UART_Init+0x5c>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d28:	f003 f9c6 	bl	80050b8 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d32:	f000 f8ed 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200001d8 	.word	0x200001d8
 8001d40:	40013800 	.word	0x40013800

08001d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d4a:	4a15      	ldr	r2, [pc, #84]	@ (8001da0 <MX_USART2_UART_Init+0x5c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d88:	f003 f996 	bl	80050b8 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d92:	f000 f8bd 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000260 	.word	0x20000260
 8001da0:	40004400 	.word	0x40004400

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_GPIO_Init+0xb8>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NO2_EN_Pin|NO3_EN_Pin|NO4_EN_Pin|NO6_EN_Pin
 8001e02:	2200      	movs	r2, #0
 8001e04:	21bb      	movs	r1, #187	@ 0xbb
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0a:	f000 fe47 	bl	8002a9c <HAL_GPIO_WritePin>
                          |EO1_EN_Pin|IGNITER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2120      	movs	r1, #32
 8001e12:	4813      	ldr	r0, [pc, #76]	@ (8001e60 <MX_GPIO_Init+0xbc>)
 8001e14:	f000 fe42 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NO2_EN_Pin NO3_EN_Pin NO4_EN_Pin NO6_EN_Pin
                           EO1_EN_Pin IGNITER_Pin */
  GPIO_InitStruct.Pin = NO2_EN_Pin|NO3_EN_Pin|NO4_EN_Pin|NO6_EN_Pin
 8001e18:	23bb      	movs	r3, #187	@ 0xbb
 8001e1a:	60fb      	str	r3, [r7, #12]
                          |EO1_EN_Pin|IGNITER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e32:	f000 fcc1 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_EN_Pin */
  GPIO_InitStruct.Pin = SERVO_EN_Pin;
 8001e36:	2320      	movs	r3, #32
 8001e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SERVO_EN_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_GPIO_Init+0xbc>)
 8001e4e:	f000 fcb3 	bl	80027b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e52:	bf00      	nop
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000400 	.word	0x48000400

08001e64 <HAL_UART_RxCpltCallback>:



//received uart byte gets put into rx_buff and interrupt re-enabled
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  Tick_Components();
 8001e6c:	f000 f80e 	bl	8001e8c <Tick_Components>
  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <HAL_UART_RxCpltCallback+0x20>)
 8001e74:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <HAL_UART_RxCpltCallback+0x24>)
 8001e76:	f003 f9cb 	bl	8005210 <HAL_UART_Receive_IT>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000a0 	.word	0x200000a0
 8001e88:	200001d8 	.word	0x200001d8

08001e8c <Tick_Components>:

void Tick_Components() {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	//ticks calls servo functions if servos have been enabled and abort isn't enabled
	if (isServoEnabled && !isAborted) {
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <Tick_Components+0x64>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d024      	beq.n	8001ee2 <Tick_Components+0x56>
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <Tick_Components+0x68>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01d      	beq.n	8001ee2 <Tick_Components+0x56>
		Tick_NO2(rx_buff[0], &servos[3]);
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <Tick_Components+0x6c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4914      	ldr	r1, [pc, #80]	@ (8001efc <Tick_Components+0x70>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fa8f 	bl	80013d0 <Tick_NO2>
		Tick_NO4(rx_buff[0], &servos[2]);
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <Tick_Components+0x6c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4912      	ldr	r1, [pc, #72]	@ (8001f00 <Tick_Components+0x74>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f877 	bl	8000fac <Tick_NO4>
		Tick_NO6(rx_buff[0], &servos[0]);
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <Tick_Components+0x6c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4910      	ldr	r1, [pc, #64]	@ (8001f04 <Tick_Components+0x78>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe ff5d 	bl	8000d84 <Tick_NO6>
		Tick_EO1(rx_buff[0], &servos[1]);
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <Tick_Components+0x6c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <Tick_Components+0x7c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fe43 	bl	8000b5c <Tick_EO1>
		Tick_NO3(rx_buff[0], &servos[4]);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <Tick_Components+0x6c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <Tick_Components+0x80>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f96d 	bl	80011bc <Tick_NO3>
	}
	Tick_Igniter(rx_buff[0]);
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <Tick_Components+0x6c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fb7a 	bl	80015e0 <Tick_Igniter>
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000006a 	.word	0x2000006a
 8001ef4:	20000069 	.word	0x20000069
 8001ef8:	200000a0 	.word	0x200000a0
 8001efc:	20000024 	.word	0x20000024
 8001f00:	20000018 	.word	0x20000018
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000030 	.word	0x20000030

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <Error_Handler+0x8>

08001f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6193      	str	r3, [r2, #24]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_MspInit+0x44>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <HAL_TIM_PWM_MspInit+0x80>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10c      	bne.n	8001f90 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001f7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f8e:	e022      	b.n	8001fd6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
}
 8001fb2:	e010      	b.n	8001fd6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_TIM_PWM_MspInit+0x88>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40000400 	.word	0x40000400

08001ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <HAL_TIM_Base_MspInit+0x38>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_TIM_Base_MspInit+0x3c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a09      	ldr	r2, [pc, #36]	@ (800202c <HAL_TIM_Base_MspInit+0x3c>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_TIM_Base_MspInit+0x3c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40014400 	.word	0x40014400
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	@ 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_TIM_MspPostInit+0x15c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d130      	bne.n	80020b4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b4f      	ldr	r3, [pc, #316]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4a4e      	ldr	r2, [pc, #312]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	6153      	str	r3, [r2, #20]
 800205e:	4b4c      	ldr	r3, [pc, #304]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800206a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800207c:	2306      	movs	r3, #6
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208a:	f000 fb95 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800208e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80020a0:	230b      	movs	r3, #11
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ae:	f000 fb83 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80020b2:	e066      	b.n	8002182 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020bc:	d11c      	bne.n	80020f8 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4a33      	ldr	r2, [pc, #204]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	6153      	str	r3, [r2, #20]
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d6:	2308      	movs	r3, #8
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e6:	2301      	movs	r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4828      	ldr	r0, [pc, #160]	@ (8002194 <HAL_TIM_MspPostInit+0x164>)
 80020f2:	f000 fb61 	bl	80027b8 <HAL_GPIO_Init>
}
 80020f6:	e044      	b.n	8002182 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <HAL_TIM_MspPostInit+0x168>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11c      	bne.n	800213c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800210c:	6153      	str	r3, [r2, #20]
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800211a:	2310      	movs	r3, #16
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800212a:	2302      	movs	r3, #2
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4817      	ldr	r0, [pc, #92]	@ (8002194 <HAL_TIM_MspPostInit+0x164>)
 8002136:	f000 fb3f 	bl	80027b8 <HAL_GPIO_Init>
}
 800213a:	e022      	b.n	8002182 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a16      	ldr	r2, [pc, #88]	@ (800219c <HAL_TIM_MspPostInit+0x16c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11d      	bne.n	8002182 <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002150:	6153      	str	r3, [r2, #20]
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <HAL_TIM_MspPostInit+0x160>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800215e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002170:	2301      	movs	r3, #1
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217e:	f000 fb1b 	bl	80027b8 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	@ 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40021000 	.word	0x40021000
 8002194:	48000400 	.word	0x48000400
 8002198:	40000400 	.word	0x40000400
 800219c:	40014400 	.word	0x40014400

080021a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	@ 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a34      	ldr	r2, [pc, #208]	@ (8002290 <HAL_UART_MspInit+0xf0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d132      	bne.n	8002228 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	4a33      	ldr	r2, [pc, #204]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6193      	str	r3, [r2, #24]
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	6153      	str	r3, [r2, #20]
 80021e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002204:	2307      	movs	r3, #7
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002212:	f000 fad1 	bl	80027b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2025      	movs	r0, #37	@ 0x25
 800221c:	f000 fa19 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002220:	2025      	movs	r0, #37	@ 0x25
 8002222:	f000 fa32 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002226:	e02e      	b.n	8002286 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <HAL_UART_MspInit+0xf8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d129      	bne.n	8002286 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 8002250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002254:	6153      	str	r3, [r2, #20]
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_UART_MspInit+0xf4>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002262:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002274:	2307      	movs	r3, #7
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002282:	f000 fa99 	bl	80027b8 <HAL_GPIO_Init>
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	@ 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40013800 	.word	0x40013800
 8002294:	40021000 	.word	0x40021000
 8002298:	40004400 	.word	0x40004400

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <NMI_Handler+0x4>

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <MemManage_Handler+0x4>

080022b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f2:	f000 f88f 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <USART1_IRQHandler+0x10>)
 8002302:	f002 ffc9 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200001d8 	.word	0x200001d8

08002310 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800236c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002338:	f7ff ffea 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800233c:	480c      	ldr	r0, [pc, #48]	@ (8002370 <LoopForever+0x6>)
  ldr r1, =_edata
 800233e:	490d      	ldr	r1, [pc, #52]	@ (8002374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <LoopForever+0xe>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002354:	4c0a      	ldr	r4, [pc, #40]	@ (8002380 <LoopForever+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002362:	f004 f96d 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002366:	f7ff fa01 	bl	800176c <main>

0800236a <LoopForever>:

LoopForever:
    b LoopForever
 800236a:	e7fe      	b.n	800236a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800236c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002378:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 800237c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002380:	200002ec 	.word	0x200002ec

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_Init+0x28>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <HAL_Init+0x28>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 f94f 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7ff fdba 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f967 	bl	80026a6 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023f0:	f000 f92f 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	2000003c 	.word	0x2000003c
 800240c:	20000044 	.word	0x20000044
 8002410:	20000040 	.word	0x20000040

08002414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000044 	.word	0x20000044
 8002438:	200002e8 	.word	0x200002e8

0800243c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200002e8 	.word	0x200002e8

08002454 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000044 	.word	0x20000044

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	@ (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	@ (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	@ 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e02e      	b.n	800272e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e020      	b.n	800272e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 020e 	bic.w	r2, r2, #14
 80026fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800274c:	2b02      	cmp	r3, #2
 800274e:	d005      	beq.n	800275c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e027      	b.n	80027ac <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020e 	bic.w	r2, r2, #14
 800276a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    }
  }
  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c6:	e14e      	b.n	8002a66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8140 	beq.w	8002a60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d005      	beq.n	80027f8 <HAL_GPIO_Init+0x40>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800282e:	2201      	movs	r2, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0201 	and.w	r2, r3, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b03      	cmp	r3, #3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d123      	bne.n	80028ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3208      	adds	r2, #8
 80028e4:	6939      	ldr	r1, [r7, #16]
 80028e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 809a 	beq.w	8002a60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292c:	4b55      	ldr	r3, [pc, #340]	@ (8002a84 <HAL_GPIO_Init+0x2cc>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a54      	ldr	r2, [pc, #336]	@ (8002a84 <HAL_GPIO_Init+0x2cc>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b52      	ldr	r3, [pc, #328]	@ (8002a84 <HAL_GPIO_Init+0x2cc>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x1e0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a46      	ldr	r2, [pc, #280]	@ (8002a8c <HAL_GPIO_Init+0x2d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1dc>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a45      	ldr	r2, [pc, #276]	@ (8002a90 <HAL_GPIO_Init+0x2d8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1d8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a44      	ldr	r2, [pc, #272]	@ (8002a94 <HAL_GPIO_Init+0x2dc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1d4>
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_GPIO_Init+0x1e2>
 800298c:	2305      	movs	r3, #5
 800298e:	e004      	b.n	800299a <HAL_GPIO_Init+0x1e2>
 8002990:	2302      	movs	r3, #2
 8002992:	e002      	b.n	800299a <HAL_GPIO_Init+0x1e2>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_GPIO_Init+0x1e2>
 8002998:	2300      	movs	r3, #0
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029aa:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b8:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a06:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0c:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a36:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <HAL_GPIO_Init+0x2e0>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f aea9 	bne.w	80027c8 <HAL_GPIO_Init+0x10>
  }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	48000400 	.word	0x48000400
 8002a90:	48000800 	.word	0x48000800
 8002a94:	48000c00 	.word	0x48000c00
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002adc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f001 b823 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 817d 	beq.w	8002e02 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b08:	4bbc      	ldr	r3, [pc, #752]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b14:	4bb9      	ldr	r3, [pc, #740]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d15c      	bne.n	8002bda <HAL_RCC_OscConfig+0x10e>
 8002b20:	4bb6      	ldr	r3, [pc, #728]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2c:	d155      	bne.n	8002bda <HAL_RCC_OscConfig+0x10e>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x94>
 8002b5a:	4ba8      	ldr	r3, [pc, #672]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b64:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002b7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002b88:	4b9c      	ldr	r3, [pc, #624]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b90:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002b94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ba0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 811f 	beq.w	8002e00 <HAL_RCC_OscConfig+0x334>
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8116 	bne.w	8002e00 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f000 bfaf 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12e>
 8002bec:	4b83      	ldr	r3, [pc, #524]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a82      	ldr	r2, [pc, #520]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e036      	b.n	8002c68 <HAL_RCC_OscConfig+0x19c>
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x158>
 8002c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b79      	ldr	r3, [pc, #484]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a78      	ldr	r2, [pc, #480]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e021      	b.n	8002c68 <HAL_RCC_OscConfig+0x19c>
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x184>
 8002c36:	4b71      	ldr	r3, [pc, #452]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a70      	ldr	r2, [pc, #448]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b6e      	ldr	r3, [pc, #440]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6d      	ldr	r2, [pc, #436]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0x19c>
 8002c50:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a69      	ldr	r2, [pc, #420]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a66      	ldr	r2, [pc, #408]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c68:	4b64      	ldr	r3, [pc, #400]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	f023 020f 	bic.w	r2, r3, #15
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	495f      	ldr	r1, [pc, #380]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d059      	beq.n	8002d46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7ff fbd3 	bl	800243c <HAL_GetTick>
 8002c96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7ff fbce 	bl	800243c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	@ 0x64
 8002caa:	d902      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f000 bf43 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 8002cb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002cc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x218>
 8002cde:	4b47      	ldr	r3, [pc, #284]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e015      	b.n	8002d10 <HAL_RCC_OscConfig+0x244>
 8002ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002cf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cfc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d14:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f042 0220 	orr.w	r2, r2, #32
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f002 021f 	and.w	r2, r2, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ab      	beq.n	8002c9c <HAL_RCC_OscConfig+0x1d0>
 8002d44:	e05d      	b.n	8002e02 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff fb79 	bl	800243c <HAL_GetTick>
 8002d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7ff fb74 	bl	800243c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	@ 0x64
 8002d5e:	d902      	bls.n	8002d66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f000 bee9 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 8002d66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d6a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002d7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2cc>
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e015      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2f8>
 8002d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002dac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002db4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCC_OscConfig+0x330>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002dcc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002dd0:	fa92 f2a2 	rbit	r2, r2
 8002dd4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002dd8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ab      	bne.n	8002d50 <HAL_RCC_OscConfig+0x284>
 8002df8:	e003      	b.n	8002e02 <HAL_RCC_OscConfig+0x336>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 817d 	beq.w	8003112 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e18:	4ba6      	ldr	r3, [pc, #664]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e24:	4ba3      	ldr	r3, [pc, #652]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d172      	bne.n	8002f16 <HAL_RCC_OscConfig+0x44a>
 8002e30:	4ba0      	ldr	r3, [pc, #640]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d16c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x44a>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002e4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x3a0>
 8002e66:	4b93      	ldr	r3, [pc, #588]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e013      	b.n	8002e94 <HAL_RCC_OscConfig+0x3c8>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002e84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002e90:	4b88      	ldr	r3, [pc, #544]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	2202      	movs	r2, #2
 8002e96:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002e9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002ea6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCC_OscConfig+0x410>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f000 be2e 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b75      	ldr	r3, [pc, #468]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	21f8      	movs	r1, #248	@ 0xf8
 8002ef2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002efa:	fa91 f1a1 	rbit	r1, r1
 8002efe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f02:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f06:	fab1 f181 	clz	r1, r1
 8002f0a:	b2c9      	uxtb	r1, r1
 8002f0c:	408b      	lsls	r3, r1
 8002f0e:	4969      	ldr	r1, [pc, #420]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	e0fd      	b.n	8003112 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8088 	beq.w	8003038 <HAL_RCC_OscConfig+0x56c>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002f3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2301      	movs	r3, #1
 8002f52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7ff fa72 	bl	800243c <HAL_GetTick>
 8002f58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7ff fa6d 	bl	800243c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f000 bde2 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002f86:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4d8>
 8002f9e:	4b45      	ldr	r3, [pc, #276]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e013      	b.n	8002fcc <HAL_RCC_OscConfig+0x500>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002fbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002fd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002fde:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002fe2:	fab2 f282 	clz	r2, r2
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f042 0220 	orr.w	r2, r2, #32
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f002 021f 	and.w	r2, r2, #31
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0af      	beq.n	8002f5e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	21f8      	movs	r1, #248	@ 0xf8
 8003014:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800301c:	fa91 f1a1 	rbit	r1, r1
 8003020:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003024:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003028:	fab1 f181 	clz	r1, r1
 800302c:	b2c9      	uxtb	r1, r1
 800302e:	408b      	lsls	r3, r1
 8003030:	4920      	ldr	r1, [pc, #128]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
 8003036:	e06c      	b.n	8003112 <HAL_RCC_OscConfig+0x646>
 8003038:	2301      	movs	r3, #1
 800303a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800304a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003058:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff f9ea 	bl	800243c <HAL_GetTick>
 8003068:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7ff f9e5 	bl	800243c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	f000 bd5a 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 8003084:	2302      	movs	r3, #2
 8003086:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003096:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d104      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5ec>
 80030ae:	4b01      	ldr	r3, [pc, #4]	@ (80030b4 <HAL_RCC_OscConfig+0x5e8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e015      	b.n	80030e0 <HAL_RCC_OscConfig+0x614>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80030d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030dc:	4bc8      	ldr	r3, [pc, #800]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2202      	movs	r2, #2
 80030e2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80030e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80030f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f042 0220 	orr.w	r2, r2, #32
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ad      	bne.n	800306e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8110 	beq.w	8003348 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d079      	beq.n	800322c <HAL_RCC_OscConfig+0x760>
 8003138:	2301      	movs	r3, #1
 800313a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4bab      	ldr	r3, [pc, #684]	@ (8003404 <HAL_RCC_OscConfig+0x938>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	2301      	movs	r3, #1
 8003160:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7ff f96b 	bl	800243c <HAL_GetTick>
 8003166:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316c:	f7ff f966 	bl	800243c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d902      	bls.n	8003182 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	f000 bcdb 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 8003182:	2302      	movs	r3, #2
 8003184:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fa93 f2a3 	rbit	r2, r3
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031dc:	4b88      	ldr	r3, [pc, #544]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 80031de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031e8:	2102      	movs	r1, #2
 80031ea:	6019      	str	r1, [r3, #0]
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fa93 f1a3 	rbit	r1, r3
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003202:	6019      	str	r1, [r3, #0]
  return result;
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0a0      	beq.n	800316c <HAL_RCC_OscConfig+0x6a0>
 800322a:	e08d      	b.n	8003348 <HAL_RCC_OscConfig+0x87c>
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800324e:	601a      	str	r2, [r3, #0]
  return result;
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003258:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4b68      	ldr	r3, [pc, #416]	@ (8003404 <HAL_RCC_OscConfig+0x938>)
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	461a      	mov	r2, r3
 800326a:	2300      	movs	r3, #0
 800326c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7ff f8e5 	bl	800243c <HAL_GetTick>
 8003272:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003278:	f7ff f8e0 	bl	800243c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	f000 bc55 	b.w	8003b38 <HAL_RCC_OscConfig+0x106c>
 800328e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003292:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003296:	2202      	movs	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80032f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fa:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 80032fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003302:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003306:	2102      	movs	r1, #2
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f1a3 	rbit	r1, r3
 8003318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003320:	6019      	str	r1, [r3, #0]
  return result;
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d197      	bne.n	8003278 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 81a1 	beq.w	80036a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003364:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d116      	bne.n	800339e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a22      	ldr	r2, [pc, #136]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
 800337c:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003396:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCC_OscConfig+0x93c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b17      	ldr	r3, [pc, #92]	@ (8003408 <HAL_RCC_OscConfig+0x93c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <HAL_RCC_OscConfig+0x93c>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7ff f841 	bl	800243c <HAL_GetTick>
 80033ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	e009      	b.n	80033d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7ff f83c 	bl	800243c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	@ 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e3b1      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <HAL_RCC_OscConfig+0x93c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_OscConfig+0x940>
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a02      	ldr	r2, [pc, #8]	@ (8003400 <HAL_RCC_OscConfig+0x934>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e03c      	b.n	8003478 <HAL_RCC_OscConfig+0x9ac>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	10908120 	.word	0x10908120
 8003408:	40007000 	.word	0x40007000
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x96a>
 800341c:	4bc1      	ldr	r3, [pc, #772]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4ac0      	ldr	r2, [pc, #768]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	4bbe      	ldr	r3, [pc, #760]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4abd      	ldr	r2, [pc, #756]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	e020      	b.n	8003478 <HAL_RCC_OscConfig+0x9ac>
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x994>
 8003446:	4bb7      	ldr	r3, [pc, #732]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4ab6      	ldr	r2, [pc, #728]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4bb4      	ldr	r3, [pc, #720]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4ab3      	ldr	r2, [pc, #716]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0x9ac>
 8003460:	4bb0      	ldr	r3, [pc, #704]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4aaf      	ldr	r2, [pc, #700]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	4bad      	ldr	r3, [pc, #692]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4aac      	ldr	r2, [pc, #688]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8081 	beq.w	800358c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fe ffd7 	bl	800243c <HAL_GetTick>
 800348e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe ffd2 	bl	800243c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e345      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034b4:	2202      	movs	r2, #2
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80034fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d102      	bne.n	8003518 <HAL_RCC_OscConfig+0xa4c>
 8003512:	4b84      	ldr	r3, [pc, #528]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	e013      	b.n	8003540 <HAL_RCC_OscConfig+0xa74>
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b79      	ldr	r3, [pc, #484]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003544:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003548:	2102      	movs	r1, #2
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003550:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	fa92 f1a2 	rbit	r1, r2
 800355a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003562:	6011      	str	r1, [r2, #0]
  return result;
 8003564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003568:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d084      	beq.n	8003494 <HAL_RCC_OscConfig+0x9c8>
 800358a:	e07f      	b.n	800368c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe ff56 	bl	800243c <HAL_GetTick>
 8003590:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe ff51 	bl	800243c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e2c4      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035b6:	2202      	movs	r2, #2
 80035b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa93 f2a3 	rbit	r2, r3
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80035f4:	601a      	str	r2, [r3, #0]
  return result;
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80035fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d102      	bne.n	800361a <HAL_RCC_OscConfig+0xb4e>
 8003614:	4b43      	ldr	r3, [pc, #268]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0xb76>
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003646:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800364a:	2102      	movs	r1, #2
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003652:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	fa92 f1a2 	rbit	r1, r2
 800365c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003660:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003664:	6011      	str	r1, [r2, #0]
  return result;
 8003666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800366a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f002 021f 	and.w	r2, r2, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d184      	bne.n	8003596 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800368c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8242 	beq.w	8003b36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <HAL_RCC_OscConfig+0xc58>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	f000 8213 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	f040 8162 	bne.w	8003996 <HAL_RCC_OscConfig+0xeca>
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80036da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80036f6:	601a      	str	r2, [r3, #0]
  return result;
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003700:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800370c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	2300      	movs	r3, #0
 8003716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe fe90 	bl	800243c <HAL_GetTick>
 800371c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e00c      	b.n	800373c <HAL_RCC_OscConfig+0xc70>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fe88 	bl	800243c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1fd      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
 800373c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003740:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f2a3 	rbit	r2, r3
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003760:	601a      	str	r2, [r3, #0]
  return result;
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800376a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0xcba>
 8003780:	4bb0      	ldr	r3, [pc, #704]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	e027      	b.n	80037d6 <HAL_RCC_OscConfig+0xd0a>
 8003786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800378e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037da:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80037de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037e2:	6011      	str	r1, [r2, #0]
 80037e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037e8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	fa92 f1a2 	rbit	r1, r2
 80037f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80037fa:	6011      	str	r1, [r2, #0]
  return result;
 80037fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003800:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d182      	bne.n	8003728 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003822:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	430b      	orrs	r3, r1
 8003844:	497f      	ldr	r1, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003852:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800386e:	601a      	str	r2, [r3, #0]
  return result;
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003878:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003884:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	461a      	mov	r2, r3
 800388c:	2301      	movs	r3, #1
 800388e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fdd4 	bl	800243c <HAL_GetTick>
 8003894:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	e009      	b.n	80038ae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389a:	f7fe fdcf 	bl	800243c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e144      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
 80038ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80038d2:	601a      	str	r2, [r3, #0]
  return result;
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80038dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe2c>
 80038f2:	4b54      	ldr	r3, [pc, #336]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e027      	b.n	8003948 <HAL_RCC_OscConfig+0xe7c>
 80038f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003900:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	4b3f      	ldr	r3, [pc, #252]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800394c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003950:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800395a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	fa92 f1a2 	rbit	r1, r2
 8003964:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003968:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800396c:	6011      	str	r1, [r2, #0]
  return result;
 800396e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003972:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	fab2 f282 	clz	r2, r2
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f042 0220 	orr.w	r2, r2, #32
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	f002 021f 	and.w	r2, r2, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f202 	lsl.w	r2, r1, r2
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d082      	beq.n	800389a <HAL_RCC_OscConfig+0xdce>
 8003994:	e0cf      	b.n	8003b36 <HAL_RCC_OscConfig+0x106a>
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800399e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039ba:	601a      	str	r2, [r3, #0]
  return result;
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fd2e 	bl	800243c <HAL_GetTick>
 80039e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e4:	e009      	b.n	80039fa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fd29 	bl	800243c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e09e      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
 80039fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a1e:	601a      	str	r2, [r3, #0]
  return result;
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d104      	bne.n	8003a48 <HAL_RCC_OscConfig+0xf7c>
 8003a3e:	4b01      	ldr	r3, [pc, #4]	@ (8003a44 <HAL_RCC_OscConfig+0xf78>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	e029      	b.n	8003a98 <HAL_RCC_OscConfig+0xfcc>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a68:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	fa93 f2a3 	rbit	r2, r3
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCC_OscConfig+0x1078>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a9c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003aa0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003aa4:	6011      	str	r1, [r2, #0]
 8003aa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003aaa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	fa92 f1a2 	rbit	r1, r2
 8003ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ab8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003abc:	6011      	str	r1, [r2, #0]
  return result;
 8003abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ac2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	f042 0220 	orr.w	r2, r2, #32
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f002 021f 	and.w	r2, r2, #31
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d180      	bne.n	80039e6 <HAL_RCC_OscConfig+0xf1a>
 8003ae4:	e027      	b.n	8003b36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e01e      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCC_OscConfig+0x1078>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b09e      	sub	sp, #120	@ 0x78
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e162      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b90      	ldr	r3, [pc, #576]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 0207 	bic.w	r2, r3, #7
 8003b76:	498b      	ldr	r1, [pc, #556]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b89      	ldr	r3, [pc, #548]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e14a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b82      	ldr	r3, [pc, #520]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	497f      	ldr	r1, [pc, #508]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80dc 	beq.w	8003d74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d13c      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xf6>
 8003bc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_ClockConfig+0xa6>
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	e00f      	b.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
 8003bee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c00:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c0a:	4b67      	ldr	r3, [pc, #412]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f042 0220 	orr.w	r2, r2, #32
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f002 021f 	and.w	r2, r2, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d17b      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0f3      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d13c      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x178>
 8003c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x128>
 8003c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_ClockConfig+0x148>
 8003c70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c8c:	4b46      	ldr	r3, [pc, #280]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003c9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ca0:	fab2 f282 	clz	r2, r2
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	f042 0220 	orr.w	r2, r2, #32
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f002 021f 	and.w	r2, r2, #31
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13a      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b2      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x1a0>
 8003ce2:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e00d      	b.n	8003d04 <HAL_RCC_ClockConfig+0x1bc>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	2202      	movs	r2, #2
 8003d06:	61ba      	str	r2, [r7, #24]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	fa92 f2a2 	rbit	r2, r2
 8003d0e:	617a      	str	r2, [r7, #20]
  return result;
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	fab2 f282 	clz	r2, r2
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f002 021f 	and.w	r2, r2, #31
 8003d22:	2101      	movs	r1, #1
 8003d24:	fa01 f202 	lsl.w	r2, r1, r2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e079      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	491a      	ldr	r1, [pc, #104]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fb7a 	bl	800243c <HAL_GetTick>
 8003d48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe fb76 	bl	800243c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e061      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d214      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4906      	ldr	r1, [pc, #24]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e040      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	491a      	ldr	r1, [pc, #104]	@ (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b16      	ldr	r3, [pc, #88]	@ (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4912      	ldr	r1, [pc, #72]	@ (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dea:	f000 f829 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dee:	4601      	mov	r1, r0
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df8:	22f0      	movs	r2, #240	@ 0xf0
 8003dfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	fa92 f2a2 	rbit	r2, r2
 8003e02:	60fa      	str	r2, [r7, #12]
  return result;
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	fab2 f282 	clz	r2, r2
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	40d3      	lsrs	r3, r2
 8003e0e:	4a09      	ldr	r2, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x2ec>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	fa21 f303 	lsr.w	r3, r1, r3
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <HAL_RCC_ClockConfig+0x2f0>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <HAL_RCC_ClockConfig+0x2f4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fac8 	bl	80023b4 <HAL_InitTick>
  
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3778      	adds	r7, #120	@ 0x78
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	080066b4 	.word	0x080066b4
 8003e38:	2000003c 	.word	0x2000003c
 8003e3c:	20000040 	.word	0x20000040

08003e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x30>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x36>
 8003e6e:	e026      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e72:	613b      	str	r3, [r7, #16]
      break;
 8003e74:	e026      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	0c9b      	lsrs	r3, r3, #18
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e80:	5cd3      	ldrb	r3, [r2, r3]
 8003e82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003e84:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e004      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	613b      	str	r3, [r7, #16]
      break;
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ec0:	613b      	str	r3, [r7, #16]
      break;
 8003ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec4:	693b      	ldr	r3, [r7, #16]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	080066cc 	.word	0x080066cc
 8003ee0:	080066dc 	.word	0x080066dc
 8003ee4:	003d0900 	.word	0x003d0900

08003ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	2000003c 	.word	0x2000003c

08003f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f06:	f7ff ffef 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f14:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	fa92 f2a2 	rbit	r2, r2
 8003f20:	603a      	str	r2, [r7, #0]
  return result;
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	40d3      	lsrs	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	080066c4 	.word	0x080066c4

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f4a:	f7ff ffcd 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003f58:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003f5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	fa92 f2a2 	rbit	r2, r2
 8003f64:	603a      	str	r2, [r7, #0]
  return result;
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	40d3      	lsrs	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	080066c4 	.word	0x080066c4

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b092      	sub	sp, #72	@ 0x48
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80cd 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fac:	4b86      	ldr	r3, [pc, #536]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b83      	ldr	r3, [pc, #524]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4a82      	ldr	r2, [pc, #520]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	61d3      	str	r3, [r2, #28]
 8003fc4:	4b80      	ldr	r3, [pc, #512]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d118      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a79      	ldr	r2, [pc, #484]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fee:	f7fe fa25 	bl	800243c <HAL_GetTick>
 8003ff2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	e008      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fe fa21 	bl	800243c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	@ 0x64
 8004002:	d901      	bls.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0db      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	4b70      	ldr	r3, [pc, #448]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004014:	4b6c      	ldr	r3, [pc, #432]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800401e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d07d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800402e:	429a      	cmp	r2, r3
 8004030:	d076      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004032:	4b65      	ldr	r3, [pc, #404]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800403c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	4b5e      	ldr	r3, [pc, #376]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	2301      	movs	r3, #1
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004064:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	4b55      	ldr	r3, [pc, #340]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004084:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004088:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800408a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d045      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe f9d2 	bl	800243c <HAL_GetTick>
 8004098:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fe f9ce 	bl	800243c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e086      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80040b2:	2302      	movs	r3, #2
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	2302      	movs	r3, #2
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	61fb      	str	r3, [r7, #28]
  return result;
 80040ca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d102      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040e0:	4b39      	ldr	r3, [pc, #228]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	e007      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	4b35      	ldr	r3, [pc, #212]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2202      	movs	r2, #2
 80040f8:	613a      	str	r2, [r7, #16]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	fa92 f2a2 	rbit	r2, r2
 8004100:	60fa      	str	r2, [r7, #12]
  return result;
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	fab2 f282 	clz	r2, r2
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f002 021f 	and.w	r2, r2, #31
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f202 	lsl.w	r2, r1, r2
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0bd      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004120:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4926      	ldr	r1, [pc, #152]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800412e:	4313      	orrs	r3, r2
 8004130:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004132:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413a:	4b23      	ldr	r3, [pc, #140]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4a22      	ldr	r2, [pc, #136]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004144:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004152:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	491a      	ldr	r1, [pc, #104]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004160:	4313      	orrs	r3, r2
 8004162:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004170:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f023 0210 	bic.w	r2, r3, #16
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4912      	ldr	r1, [pc, #72]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417e:	4313      	orrs	r3, r2
 8004180:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800418e:	4b0e      	ldr	r3, [pc, #56]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	490b      	ldr	r1, [pc, #44]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800419c:	4313      	orrs	r3, r2
 800419e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4903      	ldr	r1, [pc, #12]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3748      	adds	r7, #72	@ 0x48
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40007000 	.word	0x40007000
 80041d0:	10908100 	.word	0x10908100

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e049      	b.n	800427a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fef8 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fb1a 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e049      	b.n	8004328 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd fe5b 	bl	8001f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f000 fac3 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x24>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e03c      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start+0x3e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e02f      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x58>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e022      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d109      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x72>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e015      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x8c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e008      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e088      	b.n	80044e8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xb6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	e023      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xc6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	e01b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	e013      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xe6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004414:	e00b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xf6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004424:	e003      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd32 	bl	8004ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_TIM_PWM_Start+0x1c0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_TIM_PWM_Start+0x134>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <HAL_TIM_PWM_Start+0x1c4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_TIM_PWM_Start+0x134>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <HAL_TIM_PWM_Start+0x1c8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_TIM_PWM_Start+0x134>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <HAL_TIM_PWM_Start+0x1cc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_TIM_PWM_Start+0x138>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_TIM_PWM_Start+0x13a>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_TIM_PWM_Start+0x1c0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x176>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004490:	d009      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x176>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <HAL_TIM_PWM_Start+0x1d0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x176>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <HAL_TIM_PWM_Start+0x1c4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d115      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_TIM_PWM_Start+0x1d4>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d015      	beq.n	80044e4 <HAL_TIM_PWM_Start+0x1b4>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044be:	d011      	beq.n	80044e4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	e008      	b.n	80044e4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e000      	b.n	80044e6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800
 8004500:	40000400 	.word	0x40000400
 8004504:	00010007 	.word	0x00010007

08004508 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fcc0 	bl	8004ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a3b      	ldr	r2, [pc, #236]	@ (8004614 <HAL_TIM_PWM_Stop+0x10c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_TIM_PWM_Stop+0x40>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_TIM_PWM_Stop+0x110>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_TIM_PWM_Stop+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a38      	ldr	r2, [pc, #224]	@ (800461c <HAL_TIM_PWM_Stop+0x114>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIM_PWM_Stop+0x40>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a37      	ldr	r2, [pc, #220]	@ (8004620 <HAL_TIM_PWM_Stop+0x118>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_TIM_PWM_Stop+0x44>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_TIM_PWM_Stop+0x46>
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d017      	beq.n	8004582 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	f241 1311 	movw	r3, #4369	@ 0x1111
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_TIM_PWM_Stop+0x7a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	f240 4344 	movw	r3, #1092	@ 0x444
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_TIM_PWM_Stop+0x7a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	f241 1311 	movw	r3, #4369	@ 0x1111
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_TIM_PWM_Stop+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	f240 4344 	movw	r3, #1092	@ 0x444
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_PWM_Stop+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_PWM_Stop+0xba>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c0:	e023      	b.n	800460a <HAL_TIM_PWM_Stop+0x102>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Stop+0xca>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d0:	e01b      	b.n	800460a <HAL_TIM_PWM_Stop+0x102>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0xda>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e0:	e013      	b.n	800460a <HAL_TIM_PWM_Stop+0x102>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Stop+0xea>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f0:	e00b      	b.n	800460a <HAL_TIM_PWM_Stop+0x102>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Stop+0xfa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004600:	e003      	b.n	800460a <HAL_TIM_PWM_Stop+0x102>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800

08004624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800463e:	2302      	movs	r3, #2
 8004640:	e0ff      	b.n	8004842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b14      	cmp	r3, #20
 800464e:	f200 80f0 	bhi.w	8004832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	080046ad 	.word	0x080046ad
 800465c:	08004833 	.word	0x08004833
 8004660:	08004833 	.word	0x08004833
 8004664:	08004833 	.word	0x08004833
 8004668:	080046ed 	.word	0x080046ed
 800466c:	08004833 	.word	0x08004833
 8004670:	08004833 	.word	0x08004833
 8004674:	08004833 	.word	0x08004833
 8004678:	0800472f 	.word	0x0800472f
 800467c:	08004833 	.word	0x08004833
 8004680:	08004833 	.word	0x08004833
 8004684:	08004833 	.word	0x08004833
 8004688:	0800476f 	.word	0x0800476f
 800468c:	08004833 	.word	0x08004833
 8004690:	08004833 	.word	0x08004833
 8004694:	08004833 	.word	0x08004833
 8004698:	080047b1 	.word	0x080047b1
 800469c:	08004833 	.word	0x08004833
 80046a0:	08004833 	.word	0x08004833
 80046a4:	08004833 	.word	0x08004833
 80046a8:	080047f1 	.word	0x080047f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f94e 	bl	8004954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0208 	orr.w	r2, r2, #8
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	619a      	str	r2, [r3, #24]
      break;
 80046ea:	e0a5      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f9b4 	bl	8004a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	021a      	lsls	r2, r3, #8
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]
      break;
 800472c:	e084      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fa13 	bl	8004b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0208 	orr.w	r2, r2, #8
 8004748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	61da      	str	r2, [r3, #28]
      break;
 800476c:	e064      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa71 	bl	8004c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	021a      	lsls	r2, r3, #8
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	61da      	str	r2, [r3, #28]
      break;
 80047ae:	e043      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fab4 	bl	8004d24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0208 	orr.w	r2, r2, #8
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047ee:	e023      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 faf2 	bl	8004de0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800480a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004830:	e002      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
      break;
 8004836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a38      	ldr	r2, [pc, #224]	@ (8004940 <TIM_Base_SetConfig+0xf4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x28>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x28>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a35      	ldr	r2, [pc, #212]	@ (8004944 <TIM_Base_SetConfig+0xf8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <TIM_Base_SetConfig+0xf4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <TIM_Base_SetConfig+0x6a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004894:	d00f      	beq.n	80048b6 <TIM_Base_SetConfig+0x6a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2a      	ldr	r2, [pc, #168]	@ (8004944 <TIM_Base_SetConfig+0xf8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00b      	beq.n	80048b6 <TIM_Base_SetConfig+0x6a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a29      	ldr	r2, [pc, #164]	@ (8004948 <TIM_Base_SetConfig+0xfc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <TIM_Base_SetConfig+0x6a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a28      	ldr	r2, [pc, #160]	@ (800494c <TIM_Base_SetConfig+0x100>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_Base_SetConfig+0x6a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <TIM_Base_SetConfig+0x104>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <TIM_Base_SetConfig+0xf4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0xc0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <TIM_Base_SetConfig+0xfc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0xc0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a13      	ldr	r2, [pc, #76]	@ (800494c <TIM_Base_SetConfig+0x100>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0xc0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <TIM_Base_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d103      	bne.n	8004914 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]
  }
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0201 	bic.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a28      	ldr	r2, [pc, #160]	@ (8004a50 <TIM_OC1_SetConfig+0xfc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_OC1_SetConfig+0x78>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a27      	ldr	r2, [pc, #156]	@ (8004a54 <TIM_OC1_SetConfig+0x100>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC1_SetConfig+0x78>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <TIM_OC1_SetConfig+0x104>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC1_SetConfig+0x78>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a25      	ldr	r2, [pc, #148]	@ (8004a5c <TIM_OC1_SetConfig+0x108>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10c      	bne.n	80049e6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0308 	bic.w	r3, r3, #8
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <TIM_OC1_SetConfig+0xfc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_OC1_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a18      	ldr	r2, [pc, #96]	@ (8004a54 <TIM_OC1_SetConfig+0x100>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_OC1_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <TIM_OC1_SetConfig+0x104>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC1_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <TIM_OC1_SetConfig+0x108>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d111      	bne.n	8004a2a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800

08004a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f023 0210 	bic.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0320 	bic.w	r3, r3, #32
 8004aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a24      	ldr	r2, [pc, #144]	@ (8004b50 <TIM_OC2_SetConfig+0xf0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <TIM_OC2_SetConfig+0xf0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_OC2_SetConfig+0xa0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <TIM_OC2_SetConfig+0xf4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_OC2_SetConfig+0xa0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <TIM_OC2_SetConfig+0xf8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC2_SetConfig+0xa0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <TIM_OC2_SetConfig+0xfc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d113      	bne.n	8004b28 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b06:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b0e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800

08004b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a23      	ldr	r2, [pc, #140]	@ (8004c4c <TIM_OC3_SetConfig+0xec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10d      	bne.n	8004bde <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bdc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c4c <TIM_OC3_SetConfig+0xec>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_OC3_SetConfig+0x9e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a19      	ldr	r2, [pc, #100]	@ (8004c50 <TIM_OC3_SetConfig+0xf0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_OC3_SetConfig+0x9e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <TIM_OC3_SetConfig+0xf4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0x9e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <TIM_OC3_SetConfig+0xf8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d113      	bne.n	8004c26 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	031b      	lsls	r3, r3, #12
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <TIM_OC4_SetConfig+0xb8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x7c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	@ (8004d18 <TIM_OC4_SetConfig+0xbc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x7c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a14      	ldr	r2, [pc, #80]	@ (8004d1c <TIM_OC4_SetConfig+0xc0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x7c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <TIM_OC4_SetConfig+0xc4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800

08004d24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a15      	ldr	r2, [pc, #84]	@ (8004dd0 <TIM_OC5_SetConfig+0xac>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_OC5_SetConfig+0x72>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a14      	ldr	r2, [pc, #80]	@ (8004dd4 <TIM_OC5_SetConfig+0xb0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_OC5_SetConfig+0x72>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a13      	ldr	r2, [pc, #76]	@ (8004dd8 <TIM_OC5_SetConfig+0xb4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_OC5_SetConfig+0x72>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <TIM_OC5_SetConfig+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d109      	bne.n	8004daa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	051b      	lsls	r3, r3, #20
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a16      	ldr	r2, [pc, #88]	@ (8004e90 <TIM_OC6_SetConfig+0xb0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_OC6_SetConfig+0x74>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <TIM_OC6_SetConfig+0xb4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_OC6_SetConfig+0x74>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <TIM_OC6_SetConfig+0xb8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC6_SetConfig+0x74>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <TIM_OC6_SetConfig+0xbc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d109      	bne.n	8004e68 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800

08004ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1a      	ldr	r2, [r3, #32]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e054      	b.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a24      	ldr	r2, [pc, #144]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a13      	ldr	r2, [pc, #76]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a11      	ldr	r2, [pc, #68]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10c      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40014000 	.word	0x40014000

08004fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e060      	b.n	80050a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a14      	ldr	r2, [pc, #80]	@ (80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d115      	bne.n	8005094 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	051b      	lsls	r3, r3, #20
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00

080050b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e040      	b.n	800514c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd f860 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	@ 0x24
 80050e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fd06 	bl	8005b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fbcd 	bl	80058a4 <UART_SetConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e01b      	b.n	800514c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fd85 	bl	8005c54 <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005154:	b480      	push	{r7}
 8005156:	b08b      	sub	sp, #44	@ 0x2c
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005166:	2b20      	cmp	r3, #32
 8005168:	d147      	bne.n	80051fa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_UART_Transmit_IT+0x22>
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e040      	b.n	80051fc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2221      	movs	r2, #33	@ 0x21
 80051a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ac:	d107      	bne.n	80051be <HAL_UART_Transmit_IT+0x6a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <HAL_UART_Transmit_IT+0xb4>)
 80051ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80051bc:	e002      	b.n	80051c4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a12      	ldr	r2, [pc, #72]	@ (800520c <HAL_UART_Transmit_IT+0xb8>)
 80051c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	613b      	str	r3, [r7, #16]
   return(result);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	69f9      	ldr	r1, [r7, #28]
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	372c      	adds	r7, #44	@ 0x2c
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	080061b7 	.word	0x080061b7
 800520c:	08006101 	.word	0x08006101

08005210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	2b20      	cmp	r3, #32
 8005226:	d132      	bne.n	800528e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_UART_Receive_IT+0x24>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e02b      	b.n	8005290 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	613b      	str	r3, [r7, #16]
   return(result);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	69f9      	ldr	r1, [r7, #28]
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	61bb      	str	r3, [r7, #24]
   return(result);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	461a      	mov	r2, r3
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fdfb 	bl	8005e80 <UART_Start_Receive_IT>
 800528a:	4603      	mov	r3, r0
 800528c:	e000      	b.n	8005290 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	@ 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0ba      	sub	sp, #232	@ 0xe8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052c6:	4013      	ands	r3, r2
 80052c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d115      	bne.n	8005300 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00f      	beq.n	8005300 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 82ab 	beq.w	800584c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
      }
      return;
 80052fe:	e2a5      	b.n	800584c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8117 	beq.w	8005538 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005316:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800531a:	4b85      	ldr	r3, [pc, #532]	@ (8005530 <HAL_UART_IRQHandler+0x298>)
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 810a 	beq.w	8005538 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <HAL_UART_IRQHandler+0xbc>
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <HAL_UART_IRQHandler+0xec>
 8005360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2202      	movs	r2, #2
 8005372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d011      	beq.n	80053b4 <HAL_UART_IRQHandler+0x11c>
 8005390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2204      	movs	r2, #4
 80053a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2208      	movs	r2, #8
 80053de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e6:	f043 0208 	orr.w	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d012      	beq.n	8005422 <HAL_UART_IRQHandler+0x18a>
 80053fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005400:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00c      	beq.n	8005422 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8211 	beq.w	8005850 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005472:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04f      	beq.n	800551a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fdc6 	bl	800600c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	d141      	bne.n	8005512 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1d9      	bne.n	800548e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <HAL_UART_IRQHandler+0x29c>)
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd f923 	bl	800273a <HAL_DMA_Abort_IT>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	e00f      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9b4 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	e00b      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9b0 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	e007      	b.n	800552a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9ac 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005528:	e192      	b.n	8005850 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552a:	bf00      	nop
    return;
 800552c:	e190      	b.n	8005850 <HAL_UART_IRQHandler+0x5b8>
 800552e:	bf00      	nop
 8005530:	04000120 	.word	0x04000120
 8005534:	080060d5 	.word	0x080060d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 814b 	bne.w	80057d8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8144 	beq.w	80057d8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 813d 	beq.w	80057d8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2210      	movs	r2, #16
 8005564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b40      	cmp	r3, #64	@ 0x40
 8005572:	f040 80b5 	bne.w	80056e0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005582:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8164 	beq.w	8005854 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005596:	429a      	cmp	r2, r3
 8005598:	f080 815c 	bcs.w	8005854 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	f000 8086 	beq.w	80056be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055e0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1da      	bne.n	80055b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800560c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005620:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005624:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005628:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e1      	bne.n	80055fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800564a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800565c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800565e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800566a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e3      	bne.n	8005638 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800568c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800568e:	f023 0310 	bic.w	r3, r3, #16
 8005692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e4      	bne.n	800567e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fd f800 	bl	80026be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8d7 	bl	800588c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056de:	e0b9      	b.n	8005854 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80ab 	beq.w	8005858 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80a6 	beq.w	8005858 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005730:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e4      	bne.n	800570c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	623b      	str	r3, [r7, #32]
   return(result);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005766:	633a      	str	r2, [r7, #48]	@ 0x30
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800576c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e3      	bne.n	8005742 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	60fb      	str	r3, [r7, #12]
   return(result);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0310 	bic.w	r3, r3, #16
 80057a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	69b9      	ldr	r1, [r7, #24]
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	617b      	str	r3, [r7, #20]
   return(result);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e4      	bne.n	800578e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f85b 	bl	800588c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057d6:	e03f      	b.n	8005858 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <HAL_UART_IRQHandler+0x56a>
 80057e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 ff0d 	bl	800661a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005800:	e02d      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00e      	beq.n	800582c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01c      	beq.n	800585c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
    }
    return;
 800582a:	e017      	b.n	800585c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <HAL_UART_IRQHandler+0x5c6>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fd16 	bl	8006276 <UART_EndTransmit_IT>
    return;
 800584a:	e008      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
      return;
 800584c:	bf00      	nop
 800584e:	e006      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005850:	bf00      	nop
 8005852:	e004      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005854:	bf00      	nop
 8005856:	e002      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005858:	bf00      	nop
 800585a:	e000      	b.n	800585e <HAL_UART_IRQHandler+0x5c6>
    return;
 800585c:	bf00      	nop
  }

}
 800585e:	37e8      	adds	r7, #232	@ 0xe8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b8a      	ldr	r3, [pc, #552]	@ (8005af8 <UART_SetConfig+0x254>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6979      	ldr	r1, [r7, #20]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a78      	ldr	r2, [pc, #480]	@ (8005afc <UART_SetConfig+0x258>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d120      	bne.n	8005962 <UART_SetConfig+0xbe>
 8005920:	4b77      	ldr	r3, [pc, #476]	@ (8005b00 <UART_SetConfig+0x25c>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b03      	cmp	r3, #3
 800592a:	d817      	bhi.n	800595c <UART_SetConfig+0xb8>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x90>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005945 	.word	0x08005945
 8005938:	08005951 	.word	0x08005951
 800593c:	08005957 	.word	0x08005957
 8005940:	0800594b 	.word	0x0800594b
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e01d      	b.n	8005986 <UART_SetConfig+0xe2>
 800594a:	2302      	movs	r3, #2
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e01a      	b.n	8005986 <UART_SetConfig+0xe2>
 8005950:	2304      	movs	r3, #4
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e017      	b.n	8005986 <UART_SetConfig+0xe2>
 8005956:	2308      	movs	r3, #8
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e014      	b.n	8005986 <UART_SetConfig+0xe2>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e011      	b.n	8005986 <UART_SetConfig+0xe2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a67      	ldr	r2, [pc, #412]	@ (8005b04 <UART_SetConfig+0x260>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d102      	bne.n	8005972 <UART_SetConfig+0xce>
 800596c:	2300      	movs	r3, #0
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e009      	b.n	8005986 <UART_SetConfig+0xe2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a64      	ldr	r2, [pc, #400]	@ (8005b08 <UART_SetConfig+0x264>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d102      	bne.n	8005982 <UART_SetConfig+0xde>
 800597c:	2300      	movs	r3, #0
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e001      	b.n	8005986 <UART_SetConfig+0xe2>
 8005982:	2310      	movs	r3, #16
 8005984:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800598e:	d15a      	bne.n	8005a46 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005990:	7ffb      	ldrb	r3, [r7, #31]
 8005992:	2b08      	cmp	r3, #8
 8005994:	d827      	bhi.n	80059e6 <UART_SetConfig+0x142>
 8005996:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0xf8>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fe fa9e 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 80059c4:	61b8      	str	r0, [r7, #24]
        break;
 80059c6:	e013      	b.n	80059f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe fabc 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 80059cc:	61b8      	str	r0, [r7, #24]
        break;
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b4e      	ldr	r3, [pc, #312]	@ (8005b0c <UART_SetConfig+0x268>)
 80059d2:	61bb      	str	r3, [r7, #24]
        break;
 80059d4:	e00c      	b.n	80059f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fe fa33 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80059da:	61b8      	str	r0, [r7, #24]
        break;
 80059dc:	e008      	b.n	80059f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059e2:	61bb      	str	r3, [r7, #24]
        break;
 80059e4:	e004      	b.n	80059f0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	77bb      	strb	r3, [r7, #30]
        break;
 80059ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d074      	beq.n	8005ae0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	005a      	lsls	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d916      	bls.n	8005a40 <UART_SetConfig+0x19c>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a18:	d212      	bcs.n	8005a40 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f023 030f 	bic.w	r3, r3, #15
 8005a22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	89fb      	ldrh	r3, [r7, #14]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	89fa      	ldrh	r2, [r7, #14]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e04f      	b.n	8005ae0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	77bb      	strb	r3, [r7, #30]
 8005a44:	e04c      	b.n	8005ae0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d828      	bhi.n	8005a9e <UART_SetConfig+0x1fa>
 8005a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <UART_SetConfig+0x1b0>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a8f 	.word	0x08005a8f
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a9f 	.word	0x08005a9f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a78:	f7fe fa42 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8005a7c:	61b8      	str	r0, [r7, #24]
        break;
 8005a7e:	e013      	b.n	8005aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fe fa60 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8005a84:	61b8      	str	r0, [r7, #24]
        break;
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b20      	ldr	r3, [pc, #128]	@ (8005b0c <UART_SetConfig+0x268>)
 8005a8a:	61bb      	str	r3, [r7, #24]
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fe f9d7 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8005a92:	61b8      	str	r0, [r7, #24]
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e004      	b.n	8005aa8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa6:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085a      	lsrs	r2, r3, #1
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b0f      	cmp	r3, #15
 8005ac6:	d909      	bls.n	8005adc <UART_SetConfig+0x238>
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ace:	d205      	bcs.n	8005adc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e001      	b.n	8005ae0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005aec:	7fbb      	ldrb	r3, [r7, #30]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	efff69f3 	.word	0xefff69f3
 8005afc:	40013800 	.word	0x40013800
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40004400 	.word	0x40004400
 8005b08:	40004800 	.word	0x40004800
 8005b0c:	007a1200 	.word	0x007a1200

08005b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c0e:	d10a      	bne.n	8005c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b098      	sub	sp, #96	@ 0x60
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c64:	f7fc fbea 	bl	800243c <HAL_GetTick>
 8005c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d12e      	bne.n	8005cd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f88c 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d021      	beq.n	8005cd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e6      	bne.n	8005c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e062      	b.n	8005d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d149      	bne.n	8005d78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cec:	2200      	movs	r2, #0
 8005cee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f856 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03c      	beq.n	8005d78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e6      	bne.n	8005cfe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d50:	61fa      	str	r2, [r7, #28]
 8005d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e011      	b.n	8005d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3758      	adds	r7, #88	@ 0x58
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db4:	e04f      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dbc:	d04b      	beq.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbe:	f7fc fb3d 	bl	800243c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e04e      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d037      	beq.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b80      	cmp	r3, #128	@ 0x80
 8005dea:	d034      	beq.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b40      	cmp	r3, #64	@ 0x40
 8005df0:	d031      	beq.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d110      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2208      	movs	r2, #8
 8005e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f8ff 	bl	800600c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2208      	movs	r2, #8
 8005e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e029      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e30:	d111      	bne.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f8e5 	bl	800600c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e00f      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d0a0      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b097      	sub	sp, #92	@ 0x5c
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb2:	d10e      	bne.n	8005ed2 <UART_Start_Receive_IT+0x52>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <UART_Start_Receive_IT+0x48>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ec6:	e02d      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	22ff      	movs	r2, #255	@ 0xff
 8005ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ed0:	e028      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <UART_Start_Receive_IT+0x76>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <UART_Start_Receive_IT+0x6c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	22ff      	movs	r2, #255	@ 0xff
 8005ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005eea:	e01b      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	227f      	movs	r2, #127	@ 0x7f
 8005ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ef4:	e016      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efe:	d10d      	bne.n	8005f1c <UART_Start_Receive_IT+0x9c>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <UART_Start_Receive_IT+0x92>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	227f      	movs	r2, #127	@ 0x7f
 8005f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f10:	e008      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	223f      	movs	r2, #63	@ 0x3f
 8005f16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f1a:	e003      	b.n	8005f24 <UART_Start_Receive_IT+0xa4>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2222      	movs	r2, #34	@ 0x22
 8005f30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f54:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f70:	d107      	bne.n	8005f82 <UART_Start_Receive_IT+0x102>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a21      	ldr	r2, [pc, #132]	@ (8006004 <UART_Start_Receive_IT+0x184>)
 8005f7e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f80:	e002      	b.n	8005f88 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <UART_Start_Receive_IT+0x188>)
 8005f86:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d019      	beq.n	8005fc4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_Start_Receive_IT+0x110>
 8005fc2:	e018      	b.n	8005ff6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe2:	623b      	str	r3, [r7, #32]
 8005fe4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	69f9      	ldr	r1, [r7, #28]
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e6      	bne.n	8005fc4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	375c      	adds	r7, #92	@ 0x5c
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	08006473 	.word	0x08006473
 8006008:	080062cb 	.word	0x080062cb

0800600c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b095      	sub	sp, #84	@ 0x54
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006032:	643b      	str	r3, [r7, #64]	@ 0x40
 8006034:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	61fb      	str	r3, [r7, #28]
   return(result);
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006068:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800606c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607e:	2b01      	cmp	r3, #1
 8006080:	d118      	bne.n	80060b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f023 0310 	bic.w	r3, r3, #16
 8006096:	647b      	str	r3, [r7, #68]	@ 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	613b      	str	r3, [r7, #16]
   return(result);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e6      	bne.n	8006082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060c8:	bf00      	nop
 80060ca:	3754      	adds	r7, #84	@ 0x54
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fbc0 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b08f      	sub	sp, #60	@ 0x3c
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800610c:	2b21      	cmp	r3, #33	@ 0x21
 800610e:	d14c      	bne.n	80061aa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d132      	bne.n	8006182 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	61fb      	str	r3, [r7, #28]
   return(result);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	60bb      	str	r3, [r7, #8]
   return(result);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6979      	ldr	r1, [r7, #20]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	613b      	str	r3, [r7, #16]
   return(result);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e6      	bne.n	800614e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006180:	e013      	b.n	80061aa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80061aa:	bf00      	nop
 80061ac:	373c      	adds	r7, #60	@ 0x3c
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b091      	sub	sp, #68	@ 0x44
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c2:	2b21      	cmp	r3, #33	@ 0x21
 80061c4:	d151      	bne.n	800626a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d132      	bne.n	8006238 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	623b      	str	r3, [r7, #32]
   return(result);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60fb      	str	r3, [r7, #12]
   return(result);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	69b9      	ldr	r1, [r7, #24]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	617b      	str	r3, [r7, #20]
   return(result);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e6      	bne.n	8006204 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006236:	e018      	b.n	800626a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800623e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006240:	881a      	ldrh	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800624a:	b292      	uxth	r2, r2
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006252:	1c9a      	adds	r2, r3, #2
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800626a:	bf00      	nop
 800626c:	3744      	adds	r7, #68	@ 0x44
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60bb      	str	r3, [r7, #8]
   return(result);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6979      	ldr	r1, [r7, #20]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	613b      	str	r3, [r7, #16]
   return(result);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fad1 	bl	8005864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c2:	bf00      	nop
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b09c      	sub	sp, #112	@ 0x70
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062d8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e2:	2b22      	cmp	r3, #34	@ 0x22
 80062e4:	f040 80b9 	bne.w	800645a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062ee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062f6:	b2d9      	uxtb	r1, r3
 80062f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006302:	400a      	ands	r2, r1
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 809c 	bne.w	800646a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006346:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006350:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006352:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800635e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e6      	bne.n	8006332 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3308      	adds	r3, #8
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	667b      	str	r3, [r7, #100]	@ 0x64
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3308      	adds	r3, #8
 8006382:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006384:	647a      	str	r2, [r7, #68]	@ 0x44
 8006386:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800638a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e5      	bne.n	8006364 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	623b      	str	r3, [r7, #32]
   return(result);
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d12e      	bne.n	8006452 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60fb      	str	r3, [r7, #12]
   return(result);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	69b9      	ldr	r1, [r7, #24]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	617b      	str	r3, [r7, #20]
   return(result);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b10      	cmp	r3, #16
 8006438:	d103      	bne.n	8006442 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2210      	movs	r2, #16
 8006440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fa1e 	bl	800588c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006450:	e00b      	b.n	800646a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fb fd06 	bl	8001e64 <HAL_UART_RxCpltCallback>
}
 8006458:	e007      	b.n	800646a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0208 	orr.w	r2, r2, #8
 8006468:	619a      	str	r2, [r3, #24]
}
 800646a:	bf00      	nop
 800646c:	3770      	adds	r7, #112	@ 0x70
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b09c      	sub	sp, #112	@ 0x70
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006480:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648a:	2b22      	cmp	r3, #34	@ 0x22
 800648c:	f040 80b9 	bne.w	8006602 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006496:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80064a0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80064a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80064a8:	4013      	ands	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b4:	1c9a      	adds	r2, r3, #2
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 809c 	bne.w	8006612 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80064e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80064fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e6      	bne.n	80064da <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	663b      	str	r3, [r7, #96]	@ 0x60
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800652c:	643a      	str	r2, [r7, #64]	@ 0x40
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006532:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006582:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e6      	bne.n	8006562 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006598:	2b01      	cmp	r3, #1
 800659a:	d12e      	bne.n	80065fa <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d103      	bne.n	80065ea <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2210      	movs	r2, #16
 80065e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff f94a 	bl	800588c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065f8:	e00b      	b.n	8006612 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fb fc32 	bl	8001e64 <HAL_UART_RxCpltCallback>
}
 8006600:	e007      	b.n	8006612 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0208 	orr.w	r2, r2, #8
 8006610:	619a      	str	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	3770      	adds	r7, #112	@ 0x70
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <memset>:
 800662e:	4402      	add	r2, r0
 8006630:	4603      	mov	r3, r0
 8006632:	4293      	cmp	r3, r2
 8006634:	d100      	bne.n	8006638 <memset+0xa>
 8006636:	4770      	bx	lr
 8006638:	f803 1b01 	strb.w	r1, [r3], #1
 800663c:	e7f9      	b.n	8006632 <memset+0x4>
	...

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4d0d      	ldr	r5, [pc, #52]	@ (8006678 <__libc_init_array+0x38>)
 8006644:	4c0d      	ldr	r4, [pc, #52]	@ (800667c <__libc_init_array+0x3c>)
 8006646:	1b64      	subs	r4, r4, r5
 8006648:	10a4      	asrs	r4, r4, #2
 800664a:	2600      	movs	r6, #0
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	4d0b      	ldr	r5, [pc, #44]	@ (8006680 <__libc_init_array+0x40>)
 8006652:	4c0c      	ldr	r4, [pc, #48]	@ (8006684 <__libc_init_array+0x44>)
 8006654:	f000 f818 	bl	8006688 <_init>
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	2600      	movs	r6, #0
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f855 3b04 	ldr.w	r3, [r5], #4
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	080066ec 	.word	0x080066ec
 800667c:	080066ec 	.word	0x080066ec
 8006680:	080066ec 	.word	0x080066ec
 8006684:	080066f0 	.word	0x080066f0

08006688 <_init>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

08006694 <_fini>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr
