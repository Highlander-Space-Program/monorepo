
StaticFireFirmware303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006880  08006880  00008048  2**0
                  CONTENTS
  4 .ARM          00000000  08006880  08006880  00008048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006880  08006880  00008048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006880  08006880  00007880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006884  08006884  00007884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08006888  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008048  2**0
                  CONTENTS
 10 .bss          00000258  20000048  20000048  00008048  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  00008048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f317  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212a  00000000  00000000  0001738f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  000194c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6f  00000000  00000000  0001a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001acc7  00000000  00000000  0001ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c15  00000000  00000000  00035936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a15e0  00000000  00000000  0004654b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e7b2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038fc  00000000  00000000  000e7b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000eb46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800681c 	.word	0x0800681c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800681c 	.word	0x0800681c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <Deg_To_CCR>:
#ifndef INC_DEG_TO_CCR_H_
#define INC_DEG_TO_CCR_H_
#include "config.h"

//returns ccr needed to move servo to the degree passed in in deg variable
uint32_t Deg_To_CCR(uint8_t deg, const struct Servo *servo, const int max_deg) {
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	73fb      	strb	r3, [r7, #15]
  uint32_t arr = servo->timer->Init.Period;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	61fb      	str	r3, [r7, #28]
  double pulse_width = ((double)HSP_SERVO_MAX_PULSE_WIDTH-HSP_SERVO_MIN_PULSE_WIDTH)/max_deg * deg + HSP_SERVO_MIN_PULSE_WIDTH;
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fd54 	bl	800046c <__aeabi_i2d>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	491e      	ldr	r1, [pc, #120]	@ (8000a48 <Deg_To_CCR+0xa0>)
 80009ce:	f7ff fee1 	bl	8000794 <__aeabi_ddiv>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4614      	mov	r4, r2
 80009d8:	461d      	mov	r5, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd45 	bl	800046c <__aeabi_i2d>
 80009e2:	4602      	mov	r2, r0
 80009e4:	460b      	mov	r3, r1
 80009e6:	4620      	mov	r0, r4
 80009e8:	4629      	mov	r1, r5
 80009ea:	f7ff fda9 	bl	8000540 <__aeabi_dmul>
 80009ee:	4602      	mov	r2, r0
 80009f0:	460b      	mov	r3, r1
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <Deg_To_CCR+0xa4>)
 80009fc:	f7ff fbea 	bl	80001d4 <__adddf3>
 8000a00:	4602      	mov	r2, r0
 8000a02:	460b      	mov	r3, r1
 8000a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return pulse_width*arr/HSP_SERVO_PWM_PERIOD;
 8000a08:	69f8      	ldr	r0, [r7, #28]
 8000a0a:	f7ff fd1f 	bl	800044c <__aeabi_ui2d>
 8000a0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a12:	f7ff fd95 	bl	8000540 <__aeabi_dmul>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	a308      	add	r3, pc, #32	@ (adr r3, 8000a40 <Deg_To_CCR+0x98>)
 8000a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a24:	f7ff feb6 	bl	8000794 <__aeabi_ddiv>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff ff98 	bl	8000964 <__aeabi_d2uiz>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	00000000 	.word	0x00000000
 8000a44:	40d38800 	.word	0x40d38800
 8000a48:	409f4000 	.word	0x409f4000
 8000a4c:	407f4000 	.word	0x407f4000

08000a50 <Create_Ack>:
#ifndef INC_CREATE_ACK_H_
#define INC_CREATE_ACK_H_

#include "config.h"

uint8_t Create_Ack() {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	if (no2State == SERVO_OPENED_ON || no2State == SERVO_OPENED_OFF) {
 8000a54:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <Create_Ack+0xf0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d003      	beq.n	8000a64 <Create_Ack+0x14>
 8000a5c:	4b38      	ldr	r3, [pc, #224]	@ (8000b40 <Create_Ack+0xf0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d105      	bne.n	8000a70 <Create_Ack+0x20>
		++ack;
 8000a64:	4b37      	ldr	r3, [pc, #220]	@ (8000b44 <Create_Ack+0xf4>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <Create_Ack+0xf4>)
 8000a6e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000a70:	4b34      	ldr	r3, [pc, #208]	@ (8000b44 <Create_Ack+0xf4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b32      	ldr	r3, [pc, #200]	@ (8000b44 <Create_Ack+0xf4>)
 8000a7a:	701a      	strb	r2, [r3, #0]
	if (no3State == SERVO_OPENED_ON || no3State == SERVO_OPENED_OFF) {
 8000a7c:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <Create_Ack+0xf8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d003      	beq.n	8000a8c <Create_Ack+0x3c>
 8000a84:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <Create_Ack+0xf8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d105      	bne.n	8000a98 <Create_Ack+0x48>
		++ack;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <Create_Ack+0xf4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <Create_Ack+0xf4>)
 8000a96:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <Create_Ack+0xf4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <Create_Ack+0xf4>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	if (no4State == SERVO_OPENED_ON || no4State == SERVO_OPENED_OFF) {
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <Create_Ack+0xfc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d003      	beq.n	8000ab4 <Create_Ack+0x64>
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <Create_Ack+0xfc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d105      	bne.n	8000ac0 <Create_Ack+0x70>
		++ack;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <Create_Ack+0xf4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <Create_Ack+0xf4>)
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <Create_Ack+0xf4>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <Create_Ack+0xf4>)
 8000aca:	701a      	strb	r2, [r3, #0]
	if (no6State == SERVO_OPENED_ON || no6State == SERVO_OPENED_OFF) {
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <Create_Ack+0x100>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d003      	beq.n	8000adc <Create_Ack+0x8c>
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <Create_Ack+0x100>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d105      	bne.n	8000ae8 <Create_Ack+0x98>
		++ack;
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <Create_Ack+0xf4>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <Create_Ack+0xf4>)
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <Create_Ack+0xf4>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <Create_Ack+0xf4>)
 8000af2:	701a      	strb	r2, [r3, #0]
	if (eo1State == SERVO_OPENED_ON || eo1State == SERVO_OPENED_OFF) {
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <Create_Ack+0x104>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d003      	beq.n	8000b04 <Create_Ack+0xb4>
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <Create_Ack+0x104>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d105      	bne.n	8000b10 <Create_Ack+0xc0>
		++ack;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <Create_Ack+0xf4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <Create_Ack+0xf4>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Create_Ack+0xf4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <Create_Ack+0xf4>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	if (igniterState == IGNITER_ACTIVATED) {
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <Create_Ack+0x108>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d105      	bne.n	8000b30 <Create_Ack+0xe0>
		++ack;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <Create_Ack+0xf4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <Create_Ack+0xf4>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	}
	return ack;
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <Create_Ack+0xf4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000072 	.word	0x20000072
 8000b44:	2000006c 	.word	0x2000006c
 8000b48:	20000071 	.word	0x20000071
 8000b4c:	20000070 	.word	0x20000070
 8000b50:	2000006f 	.word	0x2000006f
 8000b54:	2000006e 	.word	0x2000006e
 8000b58:	2000006d 	.word	0x2000006d

08000b5c <Tick_EO1>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_EO1 (uint8_t cmd, struct Servo *servo) {
 8000b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b60:	b090      	sub	sp, #64	@ 0x40
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000b6c:	f001 fc06 	bl	800237c <HAL_GetTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2200      	movs	r2, #0
 8000b74:	4698      	mov	r8, r3
 8000b76:	4691      	mov	r9, r2
 8000b78:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - eo1_on_time;
 8000b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d7c <Tick_EO1+0x220>)
 8000b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000b86:	1a14      	subs	r4, r2, r0
 8000b88:	eb63 0501 	sbc.w	r5, r3, r1
 8000b8c:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(eo1State) {
 8000b90:	4b7b      	ldr	r3, [pc, #492]	@ (8000d80 <Tick_EO1+0x224>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	f200 80ac 	bhi.w	8000cf2 <Tick_EO1+0x196>
 8000b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <Tick_EO1+0x44>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000c11 	.word	0x08000c11
 8000bac:	08000cab 	.word	0x08000cab
 8000bb0:	08000c57 	.word	0x08000c57
		case SERVO_INIT:
		eo1State = SERVO_CLOSED_OFF;
 8000bb4:	4b72      	ldr	r3, [pc, #456]	@ (8000d80 <Tick_EO1+0x224>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e09a      	b.n	8000cf2 <Tick_EO1+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_EO1) {
 8000bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10e      	bne.n	8000be2 <Tick_EO1+0x86>
			eo1_on_time = HAL_GetTick();
 8000bc4:	f001 fbda 	bl	800237c <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	627a      	str	r2, [r7, #36]	@ 0x24
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d7c <Tick_EO1+0x220>)
 8000bd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000bd6:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000bda:	4b69      	ldr	r3, [pc, #420]	@ (8000d80 <Tick_EO1+0x224>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 8000be0:	e080      	b.n	8000ce4 <Tick_EO1+0x188>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 8000be2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <Tick_EO1+0x96>
 8000bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d178      	bne.n	8000ce4 <Tick_EO1+0x188>
			eo1_on_time = HAL_GetTick();
 8000bf2:	f001 fbc3 	bl	800237c <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	61fa      	str	r2, [r7, #28]
 8000bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8000d7c <Tick_EO1+0x220>)
 8000c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000c04:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000c08:	4b5d      	ldr	r3, [pc, #372]	@ (8000d80 <Tick_EO1+0x224>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e069      	b.n	8000ce4 <Tick_EO1+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_EO1 || cmd == START_1) {
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <Tick_EO1+0xc4>
 8000c18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d10e      	bne.n	8000c3e <Tick_EO1+0xe2>
			eo1_on_time = HAL_GetTick();
 8000c20:	f001 fbac 	bl	800237c <HAL_GetTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2200      	movs	r2, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	617a      	str	r2, [r7, #20]
 8000c2c:	4b53      	ldr	r3, [pc, #332]	@ (8000d7c <Tick_EO1+0x220>)
 8000c2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c32:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000c36:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <Tick_EO1+0x224>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_CLOSED_OFF;
		}
		break;
 8000c3c:	e054      	b.n	8000ce8 <Tick_EO1+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000c3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c42:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000c46:	428a      	cmp	r2, r1
 8000c48:	f173 0300 	sbcs.w	r3, r3, #0
 8000c4c:	d34c      	bcc.n	8000ce8 <Tick_EO1+0x18c>
			eo1State = SERVO_CLOSED_OFF;
 8000c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d80 <Tick_EO1+0x224>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
		break;
 8000c54:	e048      	b.n	8000ce8 <Tick_EO1+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_EO1) {
 8000c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10e      	bne.n	8000c7c <Tick_EO1+0x120>
			eo1_on_time = HAL_GetTick();
 8000c5e:	f001 fb8d 	bl	800237c <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2200      	movs	r2, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	60fa      	str	r2, [r7, #12]
 8000c6a:	4b44      	ldr	r3, [pc, #272]	@ (8000d7c <Tick_EO1+0x220>)
 8000c6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000c70:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000c74:	4b42      	ldr	r3, [pc, #264]	@ (8000d80 <Tick_EO1+0x224>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 8000c7a:	e037      	b.n	8000cec <Tick_EO1+0x190>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 8000c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <Tick_EO1+0x130>
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d12f      	bne.n	8000cec <Tick_EO1+0x190>
			eo1_on_time = HAL_GetTick();
 8000c8c:	f001 fb76 	bl	800237c <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2200      	movs	r2, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <Tick_EO1+0x220>)
 8000c9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000c9e:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <Tick_EO1+0x224>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	701a      	strb	r2, [r3, #0]
		break;
 8000ca8:	e020      	b.n	8000cec <Tick_EO1+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_EO1) {
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10c      	bne.n	8000ccc <Tick_EO1+0x170>
			eo1_on_time = HAL_GetTick();
 8000cb2:	f001 fb63 	bl	800237c <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	469a      	mov	sl, r3
 8000cbc:	4693      	mov	fp, r2
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <Tick_EO1+0x220>)
 8000cc0:	e9c3 ab00 	strd	sl, fp, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d80 <Tick_EO1+0x224>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_OPENED_OFF;
		}
		break;
 8000cca:	e011      	b.n	8000cf0 <Tick_EO1+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000cd0:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	f173 0300 	sbcs.w	r3, r3, #0
 8000cda:	d309      	bcc.n	8000cf0 <Tick_EO1+0x194>
			eo1State = SERVO_OPENED_OFF;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <Tick_EO1+0x224>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	701a      	strb	r2, [r3, #0]
		break;
 8000ce2:	e005      	b.n	8000cf0 <Tick_EO1+0x194>
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e004      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e002      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <Tick_EO1+0x196>
		break;
 8000cf0:	bf00      	nop
	}

	//actions
	switch(eo1State) {
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <Tick_EO1+0x224>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d83b      	bhi.n	8000d72 <Tick_EO1+0x216>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <Tick_EO1+0x1a4>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d71 	.word	0x08000d71
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d23 	.word	0x08000d23
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d43 	.word	0x08000d43
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f001 fe5e 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8000d20:	e027      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2120      	movs	r1, #32
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f001 fe57 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d30:	689c      	ldr	r4, [r3, #8]
 8000d32:	22b4      	movs	r2, #180	@ 0xb4
 8000d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d36:	205a      	movs	r0, #90	@ 0x5a
 8000d38:	f7ff fe36 	bl	80009a8 <Deg_To_CCR>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	6023      	str	r3, [r4, #0]
		break;
 8000d40:	e017      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4a:	f001 fe47 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8000d4e:	e010      	b.n	8000d72 <Tick_EO1+0x216>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	f001 fe40 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5e:	689c      	ldr	r4, [r3, #8]
 8000d60:	22b4      	movs	r2, #180	@ 0xb4
 8000d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe1f 	bl	80009a8 <Deg_To_CCR>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6023      	str	r3, [r4, #0]
		break;
 8000d6e:	e000      	b.n	8000d72 <Tick_EO1+0x216>
		break;
 8000d70:	bf00      	nop

	}
}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	@ 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	2000006e 	.word	0x2000006e

08000d84 <Tick_NO6>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO6 (uint8_t cmd, struct Servo *servo) {
 8000d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d88:	b090      	sub	sp, #64	@ 0x40
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000d94:	f001 faf2 	bl	800237c <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	4691      	mov	r9, r2
 8000da0:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no6_on_time;
 8000da4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa4 <Tick_NO6+0x220>)
 8000da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000daa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000dae:	1a14      	subs	r4, r2, r0
 8000db0:	eb63 0501 	sbc.w	r5, r3, r1
 8000db4:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no6State) {
 8000db8:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa8 <Tick_NO6+0x224>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	f200 80ac 	bhi.w	8000f1a <Tick_NO6+0x196>
 8000dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc8 <Tick_NO6+0x44>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000ddd 	.word	0x08000ddd
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000ed3 	.word	0x08000ed3
 8000dd8:	08000e7f 	.word	0x08000e7f
		case SERVO_INIT:
		no6State = SERVO_CLOSED_OFF;
 8000ddc:	4b72      	ldr	r3, [pc, #456]	@ (8000fa8 <Tick_NO6+0x224>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e09a      	b.n	8000f1a <Tick_NO6+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO6) {
 8000de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d10e      	bne.n	8000e0a <Tick_NO6+0x86>
			no6_on_time = HAL_GetTick();
 8000dec:	f001 fac6 	bl	800237c <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2200      	movs	r2, #0
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	627a      	str	r2, [r7, #36]	@ 0x24
 8000df8:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa4 <Tick_NO6+0x220>)
 8000dfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000dfe:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 8000e02:	4b69      	ldr	r3, [pc, #420]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 8000e08:	e080      	b.n	8000f0c <Tick_NO6+0x188>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d003      	beq.n	8000e1a <Tick_NO6+0x96>
 8000e12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d178      	bne.n	8000f0c <Tick_NO6+0x188>
			no6_on_time = HAL_GetTick();
 8000e1a:	f001 faaf 	bl	800237c <HAL_GetTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2200      	movs	r2, #0
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	61fa      	str	r2, [r7, #28]
 8000e26:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e2c:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000e30:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	701a      	strb	r2, [r3, #0]
		break;
 8000e36:	e069      	b.n	8000f0c <Tick_NO6+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO6 || cmd == START_1) {
 8000e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d003      	beq.n	8000e48 <Tick_NO6+0xc4>
 8000e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d10e      	bne.n	8000e66 <Tick_NO6+0xe2>
			no6_on_time = HAL_GetTick();
 8000e48:	f001 fa98 	bl	800237c <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	617a      	str	r2, [r7, #20]
 8000e54:	4b53      	ldr	r3, [pc, #332]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e5a:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000e5e:	4b52      	ldr	r3, [pc, #328]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_CLOSED_OFF;
		}
		break;
 8000e64:	e054      	b.n	8000f10 <Tick_NO6+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e6a:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	f173 0300 	sbcs.w	r3, r3, #0
 8000e74:	d34c      	bcc.n	8000f10 <Tick_NO6+0x18c>
			no6State = SERVO_CLOSED_OFF;
 8000e76:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e048      	b.n	8000f10 <Tick_NO6+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO6) {
 8000e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d10e      	bne.n	8000ea4 <Tick_NO6+0x120>
			no6_on_time = HAL_GetTick();
 8000e86:	f001 fa79 	bl	800237c <HAL_GetTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	60fa      	str	r2, [r7, #12]
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <Tick_NO6+0x220>)
 8000e94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e98:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 8000e9c:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <Tick_NO6+0x224>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 8000ea2:	e037      	b.n	8000f14 <Tick_NO6+0x190>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 8000ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d003      	beq.n	8000eb4 <Tick_NO6+0x130>
 8000eac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d12f      	bne.n	8000f14 <Tick_NO6+0x190>
			no6_on_time = HAL_GetTick();
 8000eb4:	f001 fa62 	bl	800237c <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <Tick_NO6+0x220>)
 8000ec2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000ec6:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8000eca:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <Tick_NO6+0x224>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	701a      	strb	r2, [r3, #0]
		break;
 8000ed0:	e020      	b.n	8000f14 <Tick_NO6+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO6) {
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d10c      	bne.n	8000ef4 <Tick_NO6+0x170>
			no6_on_time = HAL_GetTick();
 8000eda:	f001 fa4f 	bl	800237c <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	4693      	mov	fp, r2
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <Tick_NO6+0x220>)
 8000ee8:	e9c3 ab00 	strd	sl, fp, [r3]
			no6State = SERVO_CLOSED_ON;
 8000eec:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <Tick_NO6+0x224>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_OPENED_OFF;
		}
		break;
 8000ef2:	e011      	b.n	8000f18 <Tick_NO6+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8000ef4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ef8:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8000efc:	428a      	cmp	r2, r1
 8000efe:	f173 0300 	sbcs.w	r3, r3, #0
 8000f02:	d309      	bcc.n	8000f18 <Tick_NO6+0x194>
			no6State = SERVO_OPENED_OFF;
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <Tick_NO6+0x224>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	701a      	strb	r2, [r3, #0]
		break;
 8000f0a:	e005      	b.n	8000f18 <Tick_NO6+0x194>
		break;
 8000f0c:	bf00      	nop
 8000f0e:	e004      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f10:	bf00      	nop
 8000f12:	e002      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f14:	bf00      	nop
 8000f16:	e000      	b.n	8000f1a <Tick_NO6+0x196>
		break;
 8000f18:	bf00      	nop
	}

	//actions
	switch(no6State) {
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <Tick_NO6+0x224>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d83b      	bhi.n	8000f9a <Tick_NO6+0x216>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <Tick_NO6+0x1a4>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f4b 	.word	0x08000f4b
 8000f34:	08000f79 	.word	0x08000f79
 8000f38:	08000f6b 	.word	0x08000f6b
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f44:	f001 fd4a 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8000f48:	e027      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f52:	f001 fd43 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f58:	689c      	ldr	r4, [r3, #8]
 8000f5a:	22b4      	movs	r2, #180	@ 0xb4
 8000f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f5e:	205a      	movs	r0, #90	@ 0x5a
 8000f60:	f7ff fd22 	bl	80009a8 <Deg_To_CCR>
 8000f64:	4603      	mov	r3, r0
 8000f66:	6023      	str	r3, [r4, #0]
		break;
 8000f68:	e017      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f001 fd33 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8000f76:	e010      	b.n	8000f9a <Tick_NO6+0x216>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f001 fd2c 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	689c      	ldr	r4, [r3, #8]
 8000f88:	22b4      	movs	r2, #180	@ 0xb4
 8000f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fd0b 	bl	80009a8 <Deg_To_CCR>
 8000f92:	4603      	mov	r3, r0
 8000f94:	6023      	str	r3, [r4, #0]
		break;
 8000f96:	e000      	b.n	8000f9a <Tick_NO6+0x216>
		break;
 8000f98:	bf00      	nop

	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3740      	adds	r7, #64	@ 0x40
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fa4:	20000090 	.word	0x20000090
 8000fa8:	2000006f 	.word	0x2000006f

08000fac <Tick_NO4>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO4 (uint8_t cmd, struct Servo *servo) {
 8000fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb0:	b090      	sub	sp, #64	@ 0x40
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000fbc:	f001 f9de 	bl	800237c <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no4_on_time;
 8000fcc:	4b79      	ldr	r3, [pc, #484]	@ (80011b4 <Tick_NO4+0x208>)
 8000fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000fd6:	1a14      	subs	r4, r2, r0
 8000fd8:	eb63 0501 	sbc.w	r5, r3, r1
 8000fdc:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no4State) {
 8000fe0:	4b75      	ldr	r3, [pc, #468]	@ (80011b8 <Tick_NO4+0x20c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	f200 80a0 	bhi.w	800112a <Tick_NO4+0x17e>
 8000fea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <Tick_NO4+0x44>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	08001059 	.word	0x08001059
 8000ffc:	080010e3 	.word	0x080010e3
 8001000:	08001097 	.word	0x08001097
		case SERVO_INIT:
		no4State = SERVO_CLOSED_OFF;
 8001004:	4b6c      	ldr	r3, [pc, #432]	@ (80011b8 <Tick_NO4+0x20c>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		break;
 800100a:	e08e      	b.n	800112a <Tick_NO4+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO4) {
 800100c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001010:	2b05      	cmp	r3, #5
 8001012:	d10e      	bne.n	8001032 <Tick_NO4+0x86>
			no4_on_time = HAL_GetTick();
 8001014:	f001 f9b2 	bl	800237c <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2200      	movs	r2, #0
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001020:	4b64      	ldr	r3, [pc, #400]	@ (80011b4 <Tick_NO4+0x208>)
 8001022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001026:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 800102a:	4b63      	ldr	r3, [pc, #396]	@ (80011b8 <Tick_NO4+0x20c>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 8001030:	e074      	b.n	800111c <Tick_NO4+0x170>
		else if (cmd == OPEN_NO4) {
 8001032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001036:	2b04      	cmp	r3, #4
 8001038:	d170      	bne.n	800111c <Tick_NO4+0x170>
			no4_on_time = HAL_GetTick();
 800103a:	f001 f99f 	bl	800237c <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2200      	movs	r2, #0
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	61fa      	str	r2, [r7, #28]
 8001046:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <Tick_NO4+0x208>)
 8001048:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800104c:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001050:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <Tick_NO4+0x20c>)
 8001052:	2203      	movs	r2, #3
 8001054:	701a      	strb	r2, [r3, #0]
		break;
 8001056:	e061      	b.n	800111c <Tick_NO4+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO4) {
 8001058:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800105c:	2b04      	cmp	r3, #4
 800105e:	d10e      	bne.n	800107e <Tick_NO4+0xd2>
			no4_on_time = HAL_GetTick();
 8001060:	f001 f98c 	bl	800237c <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2200      	movs	r2, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	617a      	str	r2, [r7, #20]
 800106c:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <Tick_NO4+0x208>)
 800106e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001072:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001076:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <Tick_NO4+0x20c>)
 8001078:	2203      	movs	r2, #3
 800107a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_CLOSED_OFF;
		}
		break;
 800107c:	e050      	b.n	8001120 <Tick_NO4+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800107e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001082:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001086:	428a      	cmp	r2, r1
 8001088:	f173 0300 	sbcs.w	r3, r3, #0
 800108c:	d348      	bcc.n	8001120 <Tick_NO4+0x174>
			no4State = SERVO_CLOSED_OFF;
 800108e:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <Tick_NO4+0x20c>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
		break;
 8001094:	e044      	b.n	8001120 <Tick_NO4+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO4) {
 8001096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800109a:	2b05      	cmp	r3, #5
 800109c:	d10e      	bne.n	80010bc <Tick_NO4+0x110>
			no4_on_time = HAL_GetTick();
 800109e:	f001 f96d 	bl	800237c <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2200      	movs	r2, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	60fa      	str	r2, [r7, #12]
 80010aa:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <Tick_NO4+0x208>)
 80010ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010b0:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 80010b4:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <Tick_NO4+0x20c>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 80010ba:	e033      	b.n	8001124 <Tick_NO4+0x178>
		else if (cmd == OPEN_NO4) {
 80010bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d12f      	bne.n	8001124 <Tick_NO4+0x178>
			no4_on_time = HAL_GetTick();
 80010c4:	f001 f95a 	bl	800237c <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2200      	movs	r2, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <Tick_NO4+0x208>)
 80010d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80010d6:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <Tick_NO4+0x20c>)
 80010dc:	2203      	movs	r2, #3
 80010de:	701a      	strb	r2, [r3, #0]
		break;
 80010e0:	e020      	b.n	8001124 <Tick_NO4+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO4) {
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10c      	bne.n	8001104 <Tick_NO4+0x158>
			no4_on_time = HAL_GetTick();
 80010ea:	f001 f947 	bl	800237c <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2200      	movs	r2, #0
 80010f2:	469a      	mov	sl, r3
 80010f4:	4693      	mov	fp, r2
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <Tick_NO4+0x208>)
 80010f8:	e9c3 ab00 	strd	sl, fp, [r3]
			no4State = SERVO_CLOSED_ON;
 80010fc:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <Tick_NO4+0x20c>)
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_OPENED_OFF;
		}
		break;
 8001102:	e011      	b.n	8001128 <Tick_NO4+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001104:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001108:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 800110c:	428a      	cmp	r2, r1
 800110e:	f173 0300 	sbcs.w	r3, r3, #0
 8001112:	d309      	bcc.n	8001128 <Tick_NO4+0x17c>
			no4State = SERVO_OPENED_OFF;
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <Tick_NO4+0x20c>)
 8001116:	2204      	movs	r2, #4
 8001118:	701a      	strb	r2, [r3, #0]
		break;
 800111a:	e005      	b.n	8001128 <Tick_NO4+0x17c>
		break;
 800111c:	bf00      	nop
 800111e:	e004      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001120:	bf00      	nop
 8001122:	e002      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001124:	bf00      	nop
 8001126:	e000      	b.n	800112a <Tick_NO4+0x17e>
		break;
 8001128:	bf00      	nop
	}

	//actions
	switch(no4State) {
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <Tick_NO4+0x20c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d83b      	bhi.n	80011aa <Tick_NO4+0x1fe>
 8001132:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <Tick_NO4+0x18c>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080011a9 	.word	0x080011a9
 800113c:	0800114d 	.word	0x0800114d
 8001140:	0800115b 	.word	0x0800115b
 8001144:	08001189 	.word	0x08001189
 8001148:	0800117b 	.word	0x0800117b
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f001 fc42 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8001158:	e027      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2108      	movs	r1, #8
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f001 fc3b 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	689c      	ldr	r4, [r3, #8]
 800116a:	22b4      	movs	r2, #180	@ 0xb4
 800116c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800116e:	205c      	movs	r0, #92	@ 0x5c
 8001170:	f7ff fc1a 	bl	80009a8 <Deg_To_CCR>
 8001174:	4603      	mov	r3, r0
 8001176:	6023      	str	r3, [r4, #0]
		break;
 8001178:	e017      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f001 fc2b 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8001186:	e010      	b.n	80011aa <Tick_NO4+0x1fe>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f001 fc24 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001196:	689c      	ldr	r4, [r3, #8]
 8001198:	22b4      	movs	r2, #180	@ 0xb4
 800119a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800119c:	2008      	movs	r0, #8
 800119e:	f7ff fc03 	bl	80009a8 <Deg_To_CCR>
 80011a2:	4603      	mov	r3, r0
 80011a4:	6023      	str	r3, [r4, #0]
		break;
 80011a6:	e000      	b.n	80011aa <Tick_NO4+0x1fe>
		break;
 80011a8:	bf00      	nop

	}
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	@ 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011b4:	20000088 	.word	0x20000088
 80011b8:	20000070 	.word	0x20000070

080011bc <Tick_NO3>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO3 (uint8_t cmd, struct Servo *servo) {
 80011bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c0:	b090      	sub	sp, #64	@ 0x40
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80011c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80011cc:	f001 f8d6 	bl	800237c <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	4698      	mov	r8, r3
 80011d6:	4691      	mov	r9, r2
 80011d8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no3_on_time;
 80011dc:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <Tick_NO3+0x20c>)
 80011de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011e6:	1a14      	subs	r4, r2, r0
 80011e8:	eb63 0501 	sbc.w	r5, r3, r1
 80011ec:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no3State) {
 80011f0:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <Tick_NO3+0x210>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	f200 80a0 	bhi.w	800133a <Tick_NO3+0x17e>
 80011fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <Tick_NO3+0x44>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001215 	.word	0x08001215
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001269 	.word	0x08001269
 800120c:	080012f3 	.word	0x080012f3
 8001210:	080012a7 	.word	0x080012a7
		case SERVO_INIT:
		no3State = SERVO_CLOSED_OFF;
 8001214:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <Tick_NO3+0x210>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
		break;
 800121a:	e08e      	b.n	800133a <Tick_NO3+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO3) {
 800121c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001220:	2b07      	cmp	r3, #7
 8001222:	d10e      	bne.n	8001242 <Tick_NO3+0x86>
			no3_on_time = HAL_GetTick();
 8001224:	f001 f8aa 	bl	800237c <HAL_GetTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2200      	movs	r2, #0
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001230:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <Tick_NO3+0x20c>)
 8001232:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001236:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 800123a:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <Tick_NO3+0x210>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 8001240:	e074      	b.n	800132c <Tick_NO3+0x170>
		else if (cmd == OPEN_NO3) {
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001246:	2b06      	cmp	r3, #6
 8001248:	d170      	bne.n	800132c <Tick_NO3+0x170>
			no3_on_time = HAL_GetTick();
 800124a:	f001 f897 	bl	800237c <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	2200      	movs	r2, #0
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	61fa      	str	r2, [r7, #28]
 8001256:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <Tick_NO3+0x20c>)
 8001258:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800125c:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 8001260:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <Tick_NO3+0x210>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
		break;
 8001266:	e061      	b.n	800132c <Tick_NO3+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO3) {
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126c:	2b06      	cmp	r3, #6
 800126e:	d10e      	bne.n	800128e <Tick_NO3+0xd2>
			no3_on_time = HAL_GetTick();
 8001270:	f001 f884 	bl	800237c <HAL_GetTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2200      	movs	r2, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <Tick_NO3+0x20c>)
 800127e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001282:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 8001286:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <Tick_NO3+0x210>)
 8001288:	2203      	movs	r2, #3
 800128a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_CLOSED_OFF;
		}
		break;
 800128c:	e050      	b.n	8001330 <Tick_NO3+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001292:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001296:	428a      	cmp	r2, r1
 8001298:	f173 0300 	sbcs.w	r3, r3, #0
 800129c:	d348      	bcc.n	8001330 <Tick_NO3+0x174>
			no3State = SERVO_CLOSED_OFF;
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <Tick_NO3+0x210>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
		break;
 80012a4:	e044      	b.n	8001330 <Tick_NO3+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO3) {
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d10e      	bne.n	80012cc <Tick_NO3+0x110>
			no3_on_time = HAL_GetTick();
 80012ae:	f001 f865 	bl	800237c <HAL_GetTick>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2200      	movs	r2, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	60fa      	str	r2, [r7, #12]
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <Tick_NO3+0x20c>)
 80012bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80012c0:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <Tick_NO3+0x210>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 80012ca:	e033      	b.n	8001334 <Tick_NO3+0x178>
		else if (cmd == OPEN_NO3) {
 80012cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d12f      	bne.n	8001334 <Tick_NO3+0x178>
			no3_on_time = HAL_GetTick();
 80012d4:	f001 f852 	bl	800237c <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2200      	movs	r2, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <Tick_NO3+0x20c>)
 80012e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012e6:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 80012ea:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <Tick_NO3+0x210>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	701a      	strb	r2, [r3, #0]
		break;
 80012f0:	e020      	b.n	8001334 <Tick_NO3+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO3) {
 80012f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d10c      	bne.n	8001314 <Tick_NO3+0x158>
			no3_on_time = HAL_GetTick();
 80012fa:	f001 f83f 	bl	800237c <HAL_GetTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	2200      	movs	r2, #0
 8001302:	469a      	mov	sl, r3
 8001304:	4693      	mov	fp, r2
 8001306:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <Tick_NO3+0x20c>)
 8001308:	e9c3 ab00 	strd	sl, fp, [r3]
			no3State = SERVO_CLOSED_ON;
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <Tick_NO3+0x210>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_OPENED_OFF;
		}
		break;
 8001312:	e011      	b.n	8001338 <Tick_NO3+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001318:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 800131c:	428a      	cmp	r2, r1
 800131e:	f173 0300 	sbcs.w	r3, r3, #0
 8001322:	d309      	bcc.n	8001338 <Tick_NO3+0x17c>
			no3State = SERVO_OPENED_OFF;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <Tick_NO3+0x210>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
		break;
 800132a:	e005      	b.n	8001338 <Tick_NO3+0x17c>
		break;
 800132c:	bf00      	nop
 800132e:	e004      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001330:	bf00      	nop
 8001332:	e002      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <Tick_NO3+0x17e>
		break;
 8001338:	bf00      	nop
	}

	//actions
	switch(no3State) {
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <Tick_NO3+0x210>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d83d      	bhi.n	80013be <Tick_NO3+0x202>
 8001342:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <Tick_NO3+0x18c>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013bd 	.word	0x080013bd
 800134c:	0800135d 	.word	0x0800135d
 8001350:	0800136b 	.word	0x0800136b
 8001354:	0800139b 	.word	0x0800139b
 8001358:	0800138d 	.word	0x0800138d
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2102      	movs	r1, #2
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f001 fb3a 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8001368:	e029      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2102      	movs	r1, #2
 800136e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001372:	f001 fb33 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_CLOSED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	689c      	ldr	r4, [r3, #8]
 800137a:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800137e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001380:	205a      	movs	r0, #90	@ 0x5a
 8001382:	f7ff fb11 	bl	80009a8 <Deg_To_CCR>
 8001386:	4603      	mov	r3, r0
 8001388:	6023      	str	r3, [r4, #0]
		break;
 800138a:	e018      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2102      	movs	r1, #2
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f001 fb22 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8001398:	e011      	b.n	80013be <Tick_NO3+0x202>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2102      	movs	r1, #2
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f001 fb1b 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_OPENED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	689c      	ldr	r4, [r3, #8]
 80013aa:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80013ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff faf9 	bl	80009a8 <Deg_To_CCR>
 80013b6:	4603      	mov	r3, r0
 80013b8:	6023      	str	r3, [r4, #0]
		break;
 80013ba:	e000      	b.n	80013be <Tick_NO3+0x202>
		break;
 80013bc:	bf00      	nop

	}
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013c8:	20000080 	.word	0x20000080
 80013cc:	20000071 	.word	0x20000071

080013d0 <Tick_NO2>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO2 (uint8_t cmd, struct Servo *servo) {
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b090      	sub	sp, #64	@ 0x40
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80013e0:	f000 ffcc 	bl	800237c <HAL_GetTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2200      	movs	r2, #0
 80013e8:	4698      	mov	r8, r3
 80013ea:	4691      	mov	r9, r2
 80013ec:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no2_on_time;
 80013f0:	4b79      	ldr	r3, [pc, #484]	@ (80015d8 <Tick_NO2+0x208>)
 80013f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013fa:	1a14      	subs	r4, r2, r0
 80013fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001400:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no2State) {
 8001404:	4b75      	ldr	r3, [pc, #468]	@ (80015dc <Tick_NO2+0x20c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	f200 80a0 	bhi.w	800154e <Tick_NO2+0x17e>
 800140e:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <Tick_NO2+0x44>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001429 	.word	0x08001429
 8001418:	08001431 	.word	0x08001431
 800141c:	0800147d 	.word	0x0800147d
 8001420:	08001507 	.word	0x08001507
 8001424:	080014bb 	.word	0x080014bb
		case SERVO_INIT:
		no2State = SERVO_CLOSED_OFF;
 8001428:	4b6c      	ldr	r3, [pc, #432]	@ (80015dc <Tick_NO2+0x20c>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
		break;
 800142e:	e08e      	b.n	800154e <Tick_NO2+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO2) {
 8001430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001434:	2b0a      	cmp	r3, #10
 8001436:	d10e      	bne.n	8001456 <Tick_NO2+0x86>
			no2_on_time = HAL_GetTick();
 8001438:	f000 ffa0 	bl	800237c <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2200      	movs	r2, #0
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	627a      	str	r2, [r7, #36]	@ 0x24
 8001444:	4b64      	ldr	r3, [pc, #400]	@ (80015d8 <Tick_NO2+0x208>)
 8001446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800144a:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 800144e:	4b63      	ldr	r3, [pc, #396]	@ (80015dc <Tick_NO2+0x20c>)
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 8001454:	e074      	b.n	8001540 <Tick_NO2+0x170>
		else if (cmd == OPEN_NO2) {
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800145a:	2b09      	cmp	r3, #9
 800145c:	d170      	bne.n	8001540 <Tick_NO2+0x170>
			no2_on_time = HAL_GetTick();
 800145e:	f000 ff8d 	bl	800237c <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	2200      	movs	r2, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	61fa      	str	r2, [r7, #28]
 800146a:	4b5b      	ldr	r3, [pc, #364]	@ (80015d8 <Tick_NO2+0x208>)
 800146c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001470:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 8001474:	4b59      	ldr	r3, [pc, #356]	@ (80015dc <Tick_NO2+0x20c>)
 8001476:	2203      	movs	r2, #3
 8001478:	701a      	strb	r2, [r3, #0]
		break;
 800147a:	e061      	b.n	8001540 <Tick_NO2+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO2) {
 800147c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001480:	2b09      	cmp	r3, #9
 8001482:	d10e      	bne.n	80014a2 <Tick_NO2+0xd2>
			no2_on_time = HAL_GetTick();
 8001484:	f000 ff7a 	bl	800237c <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2200      	movs	r2, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	617a      	str	r2, [r7, #20]
 8001490:	4b51      	ldr	r3, [pc, #324]	@ (80015d8 <Tick_NO2+0x208>)
 8001492:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001496:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 800149a:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <Tick_NO2+0x20c>)
 800149c:	2203      	movs	r2, #3
 800149e:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_CLOSED_OFF;
		}
		break;
 80014a0:	e050      	b.n	8001544 <Tick_NO2+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 80014a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014a6:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 80014aa:	428a      	cmp	r2, r1
 80014ac:	f173 0300 	sbcs.w	r3, r3, #0
 80014b0:	d348      	bcc.n	8001544 <Tick_NO2+0x174>
			no2State = SERVO_CLOSED_OFF;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <Tick_NO2+0x20c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
		break;
 80014b8:	e044      	b.n	8001544 <Tick_NO2+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO2) {
 80014ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d10e      	bne.n	80014e0 <Tick_NO2+0x110>
			no2_on_time = HAL_GetTick();
 80014c2:	f000 ff5b 	bl	800237c <HAL_GetTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2200      	movs	r2, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	60fa      	str	r2, [r7, #12]
 80014ce:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <Tick_NO2+0x208>)
 80014d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014d4:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 80014d8:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <Tick_NO2+0x20c>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 80014de:	e033      	b.n	8001548 <Tick_NO2+0x178>
		else if (cmd == OPEN_NO2) {
 80014e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d12f      	bne.n	8001548 <Tick_NO2+0x178>
			no2_on_time = HAL_GetTick();
 80014e8:	f000 ff48 	bl	800237c <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2200      	movs	r2, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <Tick_NO2+0x208>)
 80014f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014fa:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <Tick_NO2+0x20c>)
 8001500:	2203      	movs	r2, #3
 8001502:	701a      	strb	r2, [r3, #0]
		break;
 8001504:	e020      	b.n	8001548 <Tick_NO2+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO2) {
 8001506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d10c      	bne.n	8001528 <Tick_NO2+0x158>
			no2_on_time = HAL_GetTick();
 800150e:	f000 ff35 	bl	800237c <HAL_GetTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2200      	movs	r2, #0
 8001516:	469a      	mov	sl, r3
 8001518:	4693      	mov	fp, r2
 800151a:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <Tick_NO2+0x208>)
 800151c:	e9c3 ab00 	strd	sl, fp, [r3]
			no2State = SERVO_CLOSED_ON;
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <Tick_NO2+0x20c>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_OPENED_OFF;
		}
		break;
 8001526:	e011      	b.n	800154c <Tick_NO2+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001528:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800152c:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001530:	428a      	cmp	r2, r1
 8001532:	f173 0300 	sbcs.w	r3, r3, #0
 8001536:	d309      	bcc.n	800154c <Tick_NO2+0x17c>
			no2State = SERVO_OPENED_OFF;
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <Tick_NO2+0x20c>)
 800153a:	2204      	movs	r2, #4
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	e005      	b.n	800154c <Tick_NO2+0x17c>
		break;
 8001540:	bf00      	nop
 8001542:	e004      	b.n	800154e <Tick_NO2+0x17e>
		break;
 8001544:	bf00      	nop
 8001546:	e002      	b.n	800154e <Tick_NO2+0x17e>
		break;
 8001548:	bf00      	nop
 800154a:	e000      	b.n	800154e <Tick_NO2+0x17e>
		break;
 800154c:	bf00      	nop
	}

	//actions
	switch(no2State) {
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <Tick_NO2+0x20c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d83b      	bhi.n	80015ce <Tick_NO2+0x1fe>
 8001556:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <Tick_NO2+0x18c>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015cd 	.word	0x080015cd
 8001560:	08001571 	.word	0x08001571
 8001564:	0800157f 	.word	0x0800157f
 8001568:	080015ad 	.word	0x080015ad
 800156c:	0800159f 	.word	0x0800159f
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f001 fa30 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 800157c:	e027      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001586:	f001 fa29 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	689c      	ldr	r4, [r3, #8]
 800158e:	22b4      	movs	r2, #180	@ 0xb4
 8001590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001592:	2056      	movs	r0, #86	@ 0x56
 8001594:	f7ff fa08 	bl	80009a8 <Deg_To_CCR>
 8001598:	4603      	mov	r3, r0
 800159a:	6023      	str	r3, [r4, #0]
		break;
 800159c:	e017      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f001 fa19 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 80015aa:	e010      	b.n	80015ce <Tick_NO2+0x1fe>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f001 fa12 	bl	80029dc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 80015b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ba:	689c      	ldr	r4, [r3, #8]
 80015bc:	22b4      	movs	r2, #180	@ 0xb4
 80015be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff f9f1 	bl	80009a8 <Deg_To_CCR>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6023      	str	r3, [r4, #0]
		break;
 80015ca:	e000      	b.n	80015ce <Tick_NO2+0x1fe>
		break;
 80015cc:	bf00      	nop

	}
}
 80015ce:	bf00      	nop
 80015d0:	3740      	adds	r7, #64	@ 0x40
 80015d2:	46bd      	mov	sp, r7
 80015d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d8:	20000078 	.word	0x20000078
 80015dc:	20000072 	.word	0x20000072

080015e0 <Tick_Igniter>:
#define INC_IGNITER_H_

#include "config.h"

//behavior for igniter
void Tick_Igniter(uint8_t cmd) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	//transitions
	switch(igniterState) {
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <Tick_Igniter+0xdc>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d023      	beq.n	800163a <Tick_Igniter+0x5a>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	dc3d      	bgt.n	8001672 <Tick_Igniter+0x92>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <Tick_Igniter+0x20>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d004      	beq.n	8001608 <Tick_Igniter+0x28>
 80015fe:	e038      	b.n	8001672 <Tick_Igniter+0x92>
		case IGNITER_INIT:
		igniterState = IGNITER_DEACTIVATED;
 8001600:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <Tick_Igniter+0xdc>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
		break;
 8001606:	e034      	b.n	8001672 <Tick_Igniter+0x92>

		case IGNITER_DEACTIVATED:
		if (cmd == ACTIVATE_IGNITER && (!isCloseAll && !isAborted)) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b0e      	cmp	r3, #14
 800160c:	d111      	bne.n	8001632 <Tick_Igniter+0x52>
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <Tick_Igniter+0xe0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <Tick_Igniter+0x52>
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <Tick_Igniter+0xe4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <Tick_Igniter+0x52>
			igniterState = IGNITER_ACTIVATED;
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <Tick_Igniter+0xdc>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_DEACTIVATED;
		}
		break;
 8001630:	e01f      	b.n	8001672 <Tick_Igniter+0x92>
			igniterState = IGNITER_DEACTIVATED;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <Tick_Igniter+0xdc>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		break;
 8001638:	e01b      	b.n	8001672 <Tick_Igniter+0x92>

		case IGNITER_ACTIVATED:
		if (((cmd == DEACTIVATE_IGNITER || cmd == CLOSE_ALL || isCloseAll)  && !isStarted) || cmd == ABORT) {
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d006      	beq.n	800164e <Tick_Igniter+0x6e>
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d003      	beq.n	800164e <Tick_Igniter+0x6e>
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <Tick_Igniter+0xe0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <Tick_Igniter+0x7c>
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <Tick_Igniter+0xe8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <Tick_Igniter+0x82>
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b10      	cmp	r3, #16
 8001660:	d103      	bne.n	800166a <Tick_Igniter+0x8a>
			igniterState = IGNITER_DEACTIVATED;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <Tick_Igniter+0xdc>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_ACTIVATED;
		}
		break;
 8001668:	e002      	b.n	8001670 <Tick_Igniter+0x90>
			igniterState = IGNITER_ACTIVATED;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <Tick_Igniter+0xdc>)
 800166c:	2202      	movs	r2, #2
 800166e:	701a      	strb	r2, [r3, #0]
		break;
 8001670:	bf00      	nop
	}

	//actions
	switch(igniterState) {
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <Tick_Igniter+0xdc>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d014      	beq.n	80016a4 <Tick_Igniter+0xc4>
 800167a:	2b02      	cmp	r3, #2
 800167c:	dc19      	bgt.n	80016b2 <Tick_Igniter+0xd2>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <Tick_Igniter+0xa8>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d007      	beq.n	8001696 <Tick_Igniter+0xb6>

		case IGNITER_ACTIVATED:
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_SET);
		break;
	}
}
 8001686:	e014      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f001 f9a4 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 8001694:	e00d      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f001 f99d 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 80016a2:	e006      	b.n	80016b2 <Tick_Igniter+0xd2>
		HAL_GPIO_WritePin(IGNITER_GPIO_Port, IGNITER_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ac:	f001 f996 	bl	80029dc <HAL_GPIO_WritePin>
		break;
 80016b0:	bf00      	nop
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000006d 	.word	0x2000006d
 80016c0:	20000068 	.word	0x20000068
 80016c4:	20000069 	.word	0x20000069
 80016c8:	2000006b 	.word	0x2000006b

080016cc <Servo_Disable>:

#ifndef INC_SERVO_H_
#define INC_SERVO_H_

//disables PWM signal to all servos
void Servo_Disable() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <Servo_Disable+0x3c>)
 80016d4:	f002 feb8 	bl	8004448 <HAL_TIM_PWM_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80016d8:	2104      	movs	r1, #4
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <Servo_Disable+0x40>)
 80016dc:	f003 fc4c 	bl	8004f78 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	480b      	ldr	r0, [pc, #44]	@ (8001710 <Servo_Disable+0x44>)
 80016e4:	f003 fc48 	bl	8004f78 <HAL_TIMEx_PWMN_Stop>
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	4808      	ldr	r0, [pc, #32]	@ (800170c <Servo_Disable+0x40>)
 80016ec:	f002 feac 	bl	8004448 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80016f0:	2108      	movs	r1, #8
 80016f2:	4806      	ldr	r0, [pc, #24]	@ (800170c <Servo_Disable+0x40>)
 80016f4:	f002 fea8 	bl	8004448 <HAL_TIM_PWM_Stop>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <Servo_Disable+0x48>)
 80016fe:	f001 f96d 	bl	80029dc <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000f4 	.word	0x200000f4
 800170c:	200000a8 	.word	0x200000a8
 8001710:	20000140 	.word	0x20000140
 8001714:	48000400 	.word	0x48000400

08001718 <Servo_Enable>:

void Servo_Enable() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <Servo_Enable+0x3c>)
 8001720:	f002 fda6 	bl	8004270 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	480c      	ldr	r0, [pc, #48]	@ (8001758 <Servo_Enable+0x40>)
 8001728:	f003 fb80 	bl	8004e2c <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 800172c:	2100      	movs	r1, #0
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <Servo_Enable+0x44>)
 8001730:	f003 fb7c 	bl	8004e2c <HAL_TIMEx_PWMN_Start>
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001734:	2100      	movs	r1, #0
 8001736:	4808      	ldr	r0, [pc, #32]	@ (8001758 <Servo_Enable+0x40>)
 8001738:	f002 fd9a 	bl	8004270 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // <- this makes me want to cry
 800173c:	2108      	movs	r1, #8
 800173e:	4806      	ldr	r0, [pc, #24]	@ (8001758 <Servo_Enable+0x40>)
 8001740:	f002 fd96 	bl	8004270 <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <Servo_Enable+0x48>)
 800174a:	f001 f947 	bl	80029dc <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000f4 	.word	0x200000f4
 8001758:	200000a8 	.word	0x200000a8
 800175c:	20000140 	.word	0x20000140
 8001760:	48000400 	.word	0x48000400

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f000 fdae 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f88e 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f000 fae4 	bl	8001d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001774:	f000 fab2 	bl	8001cdc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001778:	f000 f98c 	bl	8001a94 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800177c:	f000 fa7e 	bl	8001c7c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001780:	f000 f8e0 	bl	8001944 <MX_TIM1_Init>
  MX_TIM17_Init();
 8001784:	f000 fa00 	bl	8001b88 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	4937      	ldr	r1, [pc, #220]	@ (8001868 <main+0x104>)
 800178c:	4837      	ldr	r0, [pc, #220]	@ (800186c <main+0x108>)
 800178e:	f003 fe09 	bl	80053a4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//activates servos
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 8001792:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <main+0x104>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b11      	cmp	r3, #17
 8001798:	d105      	bne.n	80017a6 <main+0x42>
		Servo_Enable();
 800179a:	f7ff ffbd 	bl	8001718 <Servo_Enable>
		isServoEnabled = true;
 800179e:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <main+0x10c>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e008      	b.n	80017b8 <main+0x54>
	}
	//deactivates servos
	else if (rx_buff[0] == DEACTIVATE_SERVOS) {
 80017a6:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <main+0x104>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d104      	bne.n	80017b8 <main+0x54>
		Servo_Disable();
 80017ae:	f7ff ff8d 	bl	80016cc <Servo_Disable>
		isServoEnabled = false;
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <main+0x10c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	}
	//if we get abort command disable servo signals and set flags
	if (rx_buff[0] == ABORT) {
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <main+0x104>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d108      	bne.n	80017d2 <main+0x6e>
		Servo_Disable();
 80017c0:	f7ff ff84 	bl	80016cc <Servo_Disable>
		isServoEnabled = false;
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <main+0x10c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		isAborted = true;
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <main+0x110>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e006      	b.n	80017e0 <main+0x7c>
	}
	//remove abort flag if deabort
	else if (rx_buff[0] == DEABORT) {
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <main+0x104>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b13      	cmp	r3, #19
 80017d8:	d102      	bne.n	80017e0 <main+0x7c>
		isAborted = false;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <main+0x110>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
	}
	//set close all flag if we get close all cmd
	if (rx_buff[0] == CLOSE_ALL) {
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <main+0x104>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d103      	bne.n	80017f0 <main+0x8c>
		isCloseAll = true;
 80017e8:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <main+0x114>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e006      	b.n	80017fe <main+0x9a>
	}
	//remove close all flag if we get declose all cmd
	else if (rx_buff[0] == DECLOSE_ALL) {
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <main+0x104>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b0d      	cmp	r3, #13
 80017f6:	d102      	bne.n	80017fe <main+0x9a>
		isCloseAll = false;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <main+0x114>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	}
	//set started flag if we get start cmd
	if (rx_buff[0] == START_1) {
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <main+0x104>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b08      	cmp	r3, #8
 8001804:	d102      	bne.n	800180c <main+0xa8>
		isStarted = true;
 8001806:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <main+0x118>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
	}
	//removes started flag if we get destart cmd
	if (rx_buff[0] == DESTART) {
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <main+0x104>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b15      	cmp	r3, #21
 8001812:	d102      	bne.n	800181a <main+0xb6>
		isStarted = false;
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <main+0x118>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
	}

	Tick_Components();
 800181a:	f000 fb03 	bl	8001e24 <Tick_Components>


    //creates and sends acknowledgement if a new command is received or 5 seconds have passed
    if (rx_buff[0] != 0xF0 || ticks >= 50) {
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <main+0x104>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2bf0      	cmp	r3, #240	@ 0xf0
 8001824:	d103      	bne.n	800182e <main+0xca>
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <main+0x11c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b31      	cmp	r3, #49	@ 0x31
 800182c:	dd10      	ble.n	8001850 <main+0xec>
    	Create_Ack();
 800182e:	f7ff f90f 	bl	8000a50 <Create_Ack>
    	tx_buff[0] = ack;
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <main+0x120>)
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <main+0x124>)
 8001838:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit_IT(&huart1, tx_buff, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	4912      	ldr	r1, [pc, #72]	@ (8001888 <main+0x124>)
 800183e:	480b      	ldr	r0, [pc, #44]	@ (800186c <main+0x108>)
 8001840:	f003 fd52 	bl	80052e8 <HAL_UART_Transmit_IT>
    	ack = 0x00;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <main+0x120>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
    	ticks = 0;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <main+0x11c>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    }
//    HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
    rx_buff[0] = 0xF0;
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <main+0x104>)
 8001852:	22f0      	movs	r2, #240	@ 0xf0
 8001854:	701a      	strb	r2, [r3, #0]
    ++ticks;
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <main+0x11c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <main+0x11c>)
 800185e:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 8001860:	200a      	movs	r0, #10
 8001862:	f000 fd97 	bl	8002394 <HAL_Delay>
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 8001866:	e794      	b.n	8001792 <main+0x2e>
 8001868:	200000a0 	.word	0x200000a0
 800186c:	2000018c 	.word	0x2000018c
 8001870:	2000006a 	.word	0x2000006a
 8001874:	20000069 	.word	0x20000069
 8001878:	20000068 	.word	0x20000068
 800187c:	2000006b 	.word	0x2000006b
 8001880:	20000064 	.word	0x20000064
 8001884:	2000006c 	.word	0x2000006c
 8001888:	200000a4 	.word	0x200000a4

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	@ 0x58
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001896:	2228      	movs	r2, #40	@ 0x28
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f004 ff91 	bl	80067c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c0:	2302      	movs	r3, #2
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c4:	2301      	movs	r3, #1
 80018c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c8:	2310      	movs	r3, #16
 80018ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d0:	2300      	movs	r3, #0
 80018d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80018d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f894 	bl	8002a0c <HAL_RCC_OscConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018ea:	f000 fadd 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ee:	230f      	movs	r3, #15
 80018f0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f002 f8bc 	bl	8003a88 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001916:	f000 fac7 	bl	8001ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800191a:	f241 0301 	movw	r3, #4097	@ 0x1001
 800191e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f002 facc 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001936:	f000 fab7 	bl	8001ea8 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3758      	adds	r7, #88	@ 0x58
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b096      	sub	sp, #88	@ 0x58
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001956:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	222c      	movs	r2, #44	@ 0x2c
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f004 ff26 	bl	80067c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001976:	4b45      	ldr	r3, [pc, #276]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001978:	4a45      	ldr	r2, [pc, #276]	@ (8001a90 <MX_TIM1_Init+0x14c>)
 800197a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800197c:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <MX_TIM1_Init+0x148>)
 800197e:	2204      	movs	r2, #4
 8001980:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b42      	ldr	r3, [pc, #264]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001988:	4b40      	ldr	r3, [pc, #256]	@ (8001a8c <MX_TIM1_Init+0x148>)
 800198a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800198e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b3e      	ldr	r3, [pc, #248]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <MX_TIM1_Init+0x148>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a2:	483a      	ldr	r0, [pc, #232]	@ (8001a8c <MX_TIM1_Init+0x148>)
 80019a4:	f002 fc0d 	bl	80041c2 <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fa7b 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4831      	ldr	r0, [pc, #196]	@ (8001a8c <MX_TIM1_Init+0x148>)
 80019c6:	f003 fb35 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019d0:	f000 fa6a 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d4:	2360      	movs	r3, #96	@ 0x60
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4824      	ldr	r0, [pc, #144]	@ (8001a8c <MX_TIM1_Init+0x148>)
 80019fa:	f002 fdb3 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a04:	f000 fa50 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481e      	ldr	r0, [pc, #120]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001a12:	f002 fda7 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001a1c:	f000 fa44 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4818      	ldr	r0, [pc, #96]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001a2a:	f002 fd9b 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001a34:	f000 fa38 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001a6e:	f003 fb4f 	bl	8005110 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001a78:	f000 fa16 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a7c:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <MX_TIM1_Init+0x148>)
 8001a7e:	f000 fa91 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8001a82:	bf00      	nop
 8001a84:	3758      	adds	r7, #88	@ 0x58
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000a8 	.word	0x200000a8
 8001a90:	40012c00 	.word	0x40012c00

08001a94 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b092      	sub	sp, #72	@ 0x48
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	222c      	movs	r2, #44	@ 0x2c
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fe84 	bl	80067c2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001aba:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001abc:	4a31      	ldr	r2, [pc, #196]	@ (8001b84 <MX_TIM16_Init+0xf0>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ace:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ae6:	4826      	ldr	r0, [pc, #152]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001ae8:	f002 fb14 	bl	8004114 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001af2:	f000 f9d9 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001af6:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001af8:	f002 fb63 	bl	80041c2 <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b02:	f000 f9d1 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b06:	2360      	movs	r3, #96	@ 0x60
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b26:	2200      	movs	r2, #0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4815      	ldr	r0, [pc, #84]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001b2c:	f002 fd1a 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b36:	f000 f9b7 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4807      	ldr	r0, [pc, #28]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001b62:	f003 fad5 	bl	8005110 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001b6c:	f000 f99c 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b70:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <MX_TIM16_Init+0xec>)
 8001b72:	f000 fa17 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8001b76:	bf00      	nop
 8001b78:	3748      	adds	r7, #72	@ 0x48
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000f4 	.word	0x200000f4
 8001b84:	40014400 	.word	0x40014400

08001b88 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b092      	sub	sp, #72	@ 0x48
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	222c      	movs	r2, #44	@ 0x2c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fe0a 	bl	80067c2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bb0:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <MX_TIM17_Init+0xf0>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 63999;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bc2:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001bce:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001bda:	4826      	ldr	r0, [pc, #152]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bdc:	f002 fa9a 	bl	8004114 <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001be6:	f000 f95f 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001bea:	4822      	ldr	r0, [pc, #136]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001bec:	f002 fae9 	bl	80041c2 <HAL_TIM_PWM_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001bf6:	f000 f957 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfa:	2360      	movs	r3, #96	@ 0x60
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4815      	ldr	r0, [pc, #84]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001c20:	f002 fca0 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001c2a:	f000 f93d 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001c50:	463b      	mov	r3, r7
 8001c52:	4619      	mov	r1, r3
 8001c54:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001c56:	f003 fa5b 	bl	8005110 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001c60:	f000 f922 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001c64:	4803      	ldr	r0, [pc, #12]	@ (8001c74 <MX_TIM17_Init+0xec>)
 8001c66:	f000 f99d 	bl	8001fa4 <HAL_TIM_MspPostInit>

}
 8001c6a:	bf00      	nop
 8001c6c:	3748      	adds	r7, #72	@ 0x48
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000140 	.word	0x20000140
 8001c78:	40014800 	.word	0x40014800

08001c7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c80:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c82:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <MX_USART1_UART_Init+0x5c>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cc0:	f003 fac3 	bl	800524a <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cca:	f000 f8ed 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000018c 	.word	0x2000018c
 8001cd8:	40013800 	.word	0x40013800

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001ce8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_USART2_UART_Init+0x58>)
 8001d20:	f003 fa93 	bl	800524a <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f000 f8bd 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000214 	.word	0x20000214
 8001d38:	40004400 	.word	0x40004400

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6153      	str	r3, [r2, #20]
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <MX_GPIO_Init+0xb8>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NO2_EN_Pin|NO3_EN_Pin|NO4_EN_Pin|NO6_EN_Pin
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	21bb      	movs	r1, #187	@ 0xbb
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f000 fe1b 	bl	80029dc <HAL_GPIO_WritePin>
                          |EO1_EN_Pin|IGNITER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2120      	movs	r1, #32
 8001daa:	4813      	ldr	r0, [pc, #76]	@ (8001df8 <MX_GPIO_Init+0xbc>)
 8001dac:	f000 fe16 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NO2_EN_Pin NO3_EN_Pin NO4_EN_Pin NO6_EN_Pin
                           EO1_EN_Pin IGNITER_Pin */
  GPIO_InitStruct.Pin = NO2_EN_Pin|NO3_EN_Pin|NO4_EN_Pin|NO6_EN_Pin
 8001db0:	23bb      	movs	r3, #187	@ 0xbb
 8001db2:	60fb      	str	r3, [r7, #12]
                          |EO1_EN_Pin|IGNITER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f000 fc95 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_EN_Pin */
  GPIO_InitStruct.Pin = SERVO_EN_Pin;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SERVO_EN_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_GPIO_Init+0xbc>)
 8001de6:	f000 fc87 	bl	80026f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400

08001dfc <HAL_UART_RxCpltCallback>:



//received uart byte gets put into rx_buff and interrupt re-enabled
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  Tick_Components();
 8001e04:	f000 f80e 	bl	8001e24 <Tick_Components>
  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_UART_RxCpltCallback+0x20>)
 8001e0c:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <HAL_UART_RxCpltCallback+0x24>)
 8001e0e:	f003 fac9 	bl	80053a4 <HAL_UART_Receive_IT>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000a0 	.word	0x200000a0
 8001e20:	2000018c 	.word	0x2000018c

08001e24 <Tick_Components>:

void Tick_Components() {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	//ticks calls servo functions if servos have been enabled and abort isn't enabled
	if (isServoEnabled && !isAborted) {
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <Tick_Components+0x64>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d024      	beq.n	8001e7a <Tick_Components+0x56>
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <Tick_Components+0x68>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	f083 0301 	eor.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01d      	beq.n	8001e7a <Tick_Components+0x56>
		Tick_NO2(rx_buff[0], &servos[3]);
 8001e3e:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <Tick_Components+0x6c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4914      	ldr	r1, [pc, #80]	@ (8001e94 <Tick_Components+0x70>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fac3 	bl	80013d0 <Tick_NO2>
		Tick_NO4(rx_buff[0], &servos[2]);
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <Tick_Components+0x6c>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4912      	ldr	r1, [pc, #72]	@ (8001e98 <Tick_Components+0x74>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f8ab 	bl	8000fac <Tick_NO4>
		Tick_NO6(rx_buff[0], &servos[0]);
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <Tick_Components+0x6c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4910      	ldr	r1, [pc, #64]	@ (8001e9c <Tick_Components+0x78>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe ff91 	bl	8000d84 <Tick_NO6>
		Tick_EO1(rx_buff[0], &servos[1]);
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <Tick_Components+0x6c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	490e      	ldr	r1, [pc, #56]	@ (8001ea0 <Tick_Components+0x7c>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fe77 	bl	8000b5c <Tick_EO1>
		Tick_NO3(rx_buff[0], &servos[4]);
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <Tick_Components+0x6c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <Tick_Components+0x80>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f9a1 	bl	80011bc <Tick_NO3>
	}
	Tick_Igniter(rx_buff[0]);
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <Tick_Components+0x6c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fbae 	bl	80015e0 <Tick_Igniter>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000006a 	.word	0x2000006a
 8001e8c:	20000069 	.word	0x20000069
 8001e90:	200000a0 	.word	0x200000a0
 8001e94:	20000024 	.word	0x20000024
 8001e98:	20000018 	.word	0x20000018
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000030 	.word	0x20000030

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <Error_Handler+0x8>

08001eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x38>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10b      	bne.n	8001f26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40012c00 	.word	0x40012c00
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <HAL_TIM_Base_MspInit+0x5c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10c      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f4e:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	6193      	str	r3, [r2, #24]
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f66:	e010      	b.n	8001f8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x64>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10b      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f7c:	6193      	str	r3, [r2, #24]
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_TIM_Base_MspInit+0x60>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40014800 	.word	0x40014800

08001fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <HAL_TIM_MspPostInit+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d13a      	bne.n	800203c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a41      	ldr	r2, [pc, #260]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b3c      	ldr	r3, [pc, #240]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	6153      	str	r3, [r2, #20]
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002006:	2306      	movs	r3, #6
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4830      	ldr	r0, [pc, #192]	@ (80020d4 <HAL_TIM_MspPostInit+0x130>)
 8002012:	f000 fb71 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002028:	230b      	movs	r3, #11
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002036:	f000 fb5f 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800203a:	e043      	b.n	80020c4 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM16)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a25      	ldr	r2, [pc, #148]	@ (80020d8 <HAL_TIM_MspPostInit+0x134>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11d      	bne.n	8002082 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	6153      	str	r3, [r2, #20]
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800205e:	2340      	movs	r3, #64	@ 0x40
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800206e:	2301      	movs	r3, #1
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207c:	f000 fb3c 	bl	80026f8 <HAL_GPIO_Init>
}
 8002080:	e020      	b.n	80020c4 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM17)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_TIM_MspPostInit+0x138>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4a0f      	ldr	r2, [pc, #60]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 8002092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002096:	6153      	str	r3, [r2, #20]
 8002098:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <HAL_TIM_MspPostInit+0x12c>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <HAL_TIM_MspPostInit+0x130>)
 80020c0:	f000 fb1a 	bl	80026f8 <HAL_GPIO_Init>
}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	48000400 	.word	0x48000400
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800

080020e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	@ 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a34      	ldr	r2, [pc, #208]	@ (80021d0 <HAL_UART_MspInit+0xf0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d132      	bne.n	8002168 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002102:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a33      	ldr	r2, [pc, #204]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a2d      	ldr	r2, [pc, #180]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002132:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002144:	2307      	movs	r3, #7
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002152:	f000 fad1 	bl	80026f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2025      	movs	r0, #37	@ 0x25
 800215c:	f000 fa19 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002160:	2025      	movs	r0, #37	@ 0x25
 8002162:	f000 fa32 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002166:	e02e      	b.n	80021c6 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <HAL_UART_MspInit+0xf8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d129      	bne.n	80021c6 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4a11      	ldr	r2, [pc, #68]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002194:	6153      	str	r3, [r2, #20]
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_UART_MspInit+0xf4>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80021a2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b4:	2307      	movs	r3, #7
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c2:	f000 fa99 	bl	80026f8 <HAL_GPIO_Init>
}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40004400 	.word	0x40004400

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <NMI_Handler+0x4>

080021e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <MemManage_Handler+0x4>

080021f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <UsageFault_Handler+0x4>

08002204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002232:	f000 f88f 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <USART1_IRQHandler+0x10>)
 8002242:	f003 f8f3 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000018c 	.word	0x2000018c

08002250 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff ffea 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	@ (80022b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	@ (80022c0 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f004 fa97 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a6:	f7ff fa5d 	bl	8001764 <main>

080022aa <LoopForever>:

LoopForever:
    b LoopForever
 80022aa:	e7fe      	b.n	80022aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80022b8:	08006888 	.word	0x08006888
  ldr r2, =_sbss
 80022bc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80022c0:	200002a0 	.word	0x200002a0

080022c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_2_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_Init+0x28>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_Init+0x28>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f94f 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fde6 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f967 	bl	80025e6 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f000 f92f 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000003c 	.word	0x2000003c
 800234c:	20000044 	.word	0x20000044
 8002350:	20000040 	.word	0x20000040

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000044 	.word	0x20000044
 8002378:	2000029c 	.word	0x2000029c

0800237c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000029c 	.word	0x2000029c

08002394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023ba:	bf00      	nop
 80023bc:	f7ff ffde 	bl	800237c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000044 	.word	0x20000044

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e02e      	b.n	800266e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002616:	2b02      	cmp	r3, #2
 8002618:	d008      	beq.n	800262c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e020      	b.n	800266e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020e 	bic.w	r2, r2, #14
 800263a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800268c:	2b02      	cmp	r3, #2
 800268e:	d005      	beq.n	800269c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2204      	movs	r2, #4
 8002694:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e027      	b.n	80026ec <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020e 	bic.w	r2, r2, #14
 80026aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    }
  }
  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002706:	e14e      	b.n	80029a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8140 	beq.w	80029a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <HAL_GPIO_Init+0x40>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d130      	bne.n	800279a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276e:	2201      	movs	r2, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 0201 	and.w	r2, r3, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d017      	beq.n	80027d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d123      	bne.n	800282a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	6939      	ldr	r1, [r7, #16]
 8002826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 809a 	beq.w	80029a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286c:	4b55      	ldr	r3, [pc, #340]	@ (80029c4 <HAL_GPIO_Init+0x2cc>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a54      	ldr	r2, [pc, #336]	@ (80029c4 <HAL_GPIO_Init+0x2cc>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b52      	ldr	r3, [pc, #328]	@ (80029c4 <HAL_GPIO_Init+0x2cc>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002884:	4a50      	ldr	r2, [pc, #320]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028ae:	d013      	beq.n	80028d8 <HAL_GPIO_Init+0x1e0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <HAL_GPIO_Init+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <HAL_GPIO_Init+0x1dc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a45      	ldr	r2, [pc, #276]	@ (80029d0 <HAL_GPIO_Init+0x2d8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x1d8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a44      	ldr	r2, [pc, #272]	@ (80029d4 <HAL_GPIO_Init+0x2dc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_GPIO_Init+0x1d4>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e006      	b.n	80028da <HAL_GPIO_Init+0x1e2>
 80028cc:	2305      	movs	r3, #5
 80028ce:	e004      	b.n	80028da <HAL_GPIO_Init+0x1e2>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e002      	b.n	80028da <HAL_GPIO_Init+0x1e2>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_GPIO_Init+0x1e2>
 80028d8:	2300      	movs	r3, #0
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	f002 0203 	and.w	r2, r2, #3
 80028e0:	0092      	lsls	r2, r2, #2
 80028e2:	4093      	lsls	r3, r2
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ea:	4937      	ldr	r1, [pc, #220]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f8:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800291c:	4a2e      	ldr	r2, [pc, #184]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002922:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002946:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800294c:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002970:	4a19      	ldr	r2, [pc, #100]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800299a:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <HAL_GPIO_Init+0x2e0>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f aea9 	bne.w	8002708 <HAL_GPIO_Init+0x10>
  }
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010000 	.word	0x40010000
 80029cc:	48000400 	.word	0x48000400
 80029d0:	48000800 	.word	0x48000800
 80029d4:	48000c00 	.word	0x48000c00
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f001 b823 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 817d 	beq.w	8002d42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a48:	4bbc      	ldr	r3, [pc, #752]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a54:	4bb9      	ldr	r3, [pc, #740]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d15c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x10e>
 8002a60:	4bb6      	ldr	r3, [pc, #728]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d155      	bne.n	8002b1a <HAL_RCC_OscConfig+0x10e>
 8002a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a72:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x94>
 8002a9a:	4ba8      	ldr	r3, [pc, #672]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e015      	b.n	8002acc <HAL_RCC_OscConfig+0xc0>
 8002aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002abc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ad0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002ad4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ae0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 811f 	beq.w	8002d40 <HAL_RCC_OscConfig+0x334>
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8116 	bne.w	8002d40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f000 bfaf 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12e>
 8002b2c:	4b83      	ldr	r3, [pc, #524]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a82      	ldr	r2, [pc, #520]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e036      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x158>
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b79      	ldr	r3, [pc, #484]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a78      	ldr	r2, [pc, #480]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e021      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x184>
 8002b76:	4b71      	ldr	r3, [pc, #452]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a70      	ldr	r2, [pc, #448]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
 8002b90:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a69      	ldr	r2, [pc, #420]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b67      	ldr	r3, [pc, #412]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a66      	ldr	r2, [pc, #408]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba8:	4b64      	ldr	r3, [pc, #400]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	f023 020f 	bic.w	r2, r3, #15
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	495f      	ldr	r1, [pc, #380]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d059      	beq.n	8002c86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fbd3 	bl	800237c <HAL_GetTick>
 8002bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fbce 	bl	800237c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b64      	cmp	r3, #100	@ 0x64
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f000 bf43 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002c06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x218>
 8002c1e:	4b47      	ldr	r3, [pc, #284]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x244>
 8002c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c28:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c54:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ab      	beq.n	8002bdc <HAL_RCC_OscConfig+0x1d0>
 8002c84:	e05d      	b.n	8002d42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7ff fb79 	bl	800237c <HAL_GetTick>
 8002c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fb74 	bl	800237c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	@ 0x64
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f000 bee9 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002caa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002cba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2cc>
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f8>
 8002cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cdc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002d00:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_RCC_OscConfig+0x330>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d08:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002d0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002d18:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ab      	bne.n	8002c90 <HAL_RCC_OscConfig+0x284>
 8002d38:	e003      	b.n	8002d42 <HAL_RCC_OscConfig+0x336>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 817d 	beq.w	8003052 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d58:	4ba6      	ldr	r3, [pc, #664]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d64:	4ba3      	ldr	r3, [pc, #652]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d172      	bne.n	8002e56 <HAL_RCC_OscConfig+0x44a>
 8002d70:	4ba0      	ldr	r3, [pc, #640]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d16c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x44a>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x3a0>
 8002da6:	4b93      	ldr	r3, [pc, #588]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c8>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002dd0:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002dda:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002dde:	fa92 f2a2 	rbit	r2, r2
 8002de2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002de6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0220 	orr.w	r2, r2, #32
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x410>
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f000 be2e 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	21f8      	movs	r1, #248	@ 0xf8
 8002e32:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e3a:	fa91 f1a1 	rbit	r1, r1
 8002e3e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e42:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e46:	fab1 f181 	clz	r1, r1
 8002e4a:	b2c9      	uxtb	r1, r1
 8002e4c:	408b      	lsls	r3, r1
 8002e4e:	4969      	ldr	r1, [pc, #420]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e54:	e0fd      	b.n	8003052 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8088 	beq.w	8002f78 <HAL_RCC_OscConfig+0x56c>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2301      	movs	r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7ff fa72 	bl	800237c <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7ff fa6d 	bl	800237c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 bde2 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d8>
 8002ede:	4b45      	ldr	r3, [pc, #276]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e013      	b.n	8002f0c <HAL_RCC_OscConfig+0x500>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002efc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002f12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002f1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0af      	beq.n	8002e9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	21f8      	movs	r1, #248	@ 0xf8
 8002f54:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f5c:	fa91 f1a1 	rbit	r1, r1
 8002f60:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f64:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f68:	fab1 f181 	clz	r1, r1
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	408b      	lsls	r3, r1
 8002f70:	4920      	ldr	r1, [pc, #128]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
 8002f76:	e06c      	b.n	8003052 <HAL_RCC_OscConfig+0x646>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f9ea 	bl	800237c <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fae:	f7ff f9e5 	bl	800237c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	f000 bd5a 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d104      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5ec>
 8002fee:	4b01      	ldr	r3, [pc, #4]	@ (8002ff4 <HAL_RCC_OscConfig+0x5e8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e015      	b.n	8003020 <HAL_RCC_OscConfig+0x614>
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800301c:	4bc8      	ldr	r3, [pc, #800]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	2202      	movs	r2, #2
 8003022:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003026:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003032:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003036:	fab2 f282 	clz	r2, r2
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f042 0220 	orr.w	r2, r2, #32
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f002 021f 	and.w	r2, r2, #31
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ad      	bne.n	8002fae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8110 	beq.w	8003288 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d079      	beq.n	800316c <HAL_RCC_OscConfig+0x760>
 8003078:	2301      	movs	r3, #1
 800307a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800308a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4bab      	ldr	r3, [pc, #684]	@ (8003344 <HAL_RCC_OscConfig+0x938>)
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	461a      	mov	r2, r3
 800309e:	2301      	movs	r3, #1
 80030a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7ff f96b 	bl	800237c <HAL_GetTick>
 80030a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7ff f966 	bl	800237c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	f000 bcdb 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003100:	2202      	movs	r2, #2
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800311a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 800311e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003128:	2102      	movs	r1, #2
 800312a:	6019      	str	r1, [r3, #0]
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f1a3 	rbit	r1, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003142:	6019      	str	r1, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0a0      	beq.n	80030ac <HAL_RCC_OscConfig+0x6a0>
 800316a:	e08d      	b.n	8003288 <HAL_RCC_OscConfig+0x87c>
 800316c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003170:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800318e:	601a      	str	r2, [r3, #0]
  return result;
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003198:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b68      	ldr	r3, [pc, #416]	@ (8003344 <HAL_RCC_OscConfig+0x938>)
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	2300      	movs	r3, #0
 80031ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7ff f8e5 	bl	800237c <HAL_GetTick>
 80031b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b8:	f7ff f8e0 	bl	800237c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d902      	bls.n	80031ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	f000 bc55 	b.w	8003a78 <HAL_RCC_OscConfig+0x106c>
 80031ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031fa:	2202      	movs	r2, #2
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800321e:	2202      	movs	r2, #2
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323a:	4b41      	ldr	r3, [pc, #260]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 800323c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800323e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003246:	2102      	movs	r1, #2
 8003248:	6019      	str	r1, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f1a3 	rbit	r1, r3
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003260:	6019      	str	r1, [r3, #0]
  return result;
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d197      	bne.n	80031b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 81a1 	beq.w	80035e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a4:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	61d3      	str	r3, [r2, #28]
 80032bc:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11a      	bne.n	8003320 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ea:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_RCC_OscConfig+0x93c>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7ff f841 	bl	800237c <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	e009      	b.n	8003314 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003300:	f7ff f83c 	bl	800237c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	@ 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e3b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_RCC_OscConfig+0x93c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10d      	bne.n	800334c <HAL_RCC_OscConfig+0x940>
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a02      	ldr	r2, [pc, #8]	@ (8003340 <HAL_RCC_OscConfig+0x934>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e03c      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	10908120 	.word	0x10908120
 8003348:	40007000 	.word	0x40007000
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <HAL_RCC_OscConfig+0x96a>
 800335c:	4bc1      	ldr	r3, [pc, #772]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4ac0      	ldr	r2, [pc, #768]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	4bbe      	ldr	r3, [pc, #760]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4abd      	ldr	r2, [pc, #756]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	e020      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x994>
 8003386:	4bb7      	ldr	r3, [pc, #732]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4ab6      	ldr	r2, [pc, #728]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	4bb4      	ldr	r3, [pc, #720]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4ab3      	ldr	r2, [pc, #716]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0x9ac>
 80033a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4aaf      	ldr	r2, [pc, #700]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	4bad      	ldr	r3, [pc, #692]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4aac      	ldr	r2, [pc, #688]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80033b2:	f023 0304 	bic.w	r3, r3, #4
 80033b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8081 	beq.w	80034cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fe ffd7 	bl	800237c <HAL_GetTick>
 80033ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe ffd2 	bl	800237c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e345      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033f4:	2202      	movs	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003432:	601a      	str	r2, [r3, #0]
  return result;
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800343c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0xa4c>
 8003452:	4b84      	ldr	r3, [pc, #528]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0xa74>
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003460:	2202      	movs	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003476:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	4b79      	ldr	r3, [pc, #484]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003484:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003488:	2102      	movs	r1, #2
 800348a:	6011      	str	r1, [r2, #0]
 800348c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003490:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	fa92 f1a2 	rbit	r1, r2
 800349a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034a2:	6011      	str	r1, [r2, #0]
  return result;
 80034a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f002 021f 	and.w	r2, r2, #31
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d084      	beq.n	80033d4 <HAL_RCC_OscConfig+0x9c8>
 80034ca:	e07f      	b.n	80035cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe ff56 	bl	800237c <HAL_GetTick>
 80034d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00b      	b.n	80034ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe ff51 	bl	800237c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e2c4      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003534:	601a      	str	r2, [r3, #0]
  return result;
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800353e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d102      	bne.n	800355a <HAL_RCC_OscConfig+0xb4e>
 8003554:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	e013      	b.n	8003582 <HAL_RCC_OscConfig+0xb76>
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003562:	2202      	movs	r2, #2
 8003564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	4b39      	ldr	r3, [pc, #228]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003586:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800358a:	2102      	movs	r1, #2
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003592:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	fa92 f1a2 	rbit	r1, r2
 800359c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035a4:	6011      	str	r1, [r2, #0]
  return result;
 80035a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d184      	bne.n	80034d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a22      	ldr	r2, [pc, #136]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8242 	beq.w	8003a76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <HAL_RCC_OscConfig+0xc58>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	f000 8213 	beq.w	8003a26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f040 8162 	bne.w	80038d6 <HAL_RCC_OscConfig+0xeca>
 8003612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003616:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800361a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800364c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fe90 	bl	800237c <HAL_GetTick>
 800365c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0xc70>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fe88 	bl	800237c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1fd      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0xcba>
 80036c0:	4bb0      	ldr	r3, [pc, #704]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e027      	b.n	8003716 <HAL_RCC_OscConfig+0xd0a>
 80036c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	4b9c      	ldr	r3, [pc, #624]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800371a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800371e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003722:	6011      	str	r1, [r2, #0]
 8003724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003728:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	fa92 f1a2 	rbit	r1, r2
 8003732:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003736:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800373a:	6011      	str	r1, [r2, #0]
  return result;
 800373c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003740:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0220 	orr.w	r2, r2, #32
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d182      	bne.n	8003668 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003762:	4b88      	ldr	r3, [pc, #544]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	430b      	orrs	r3, r1
 8003784:	497f      	ldr	r1, [pc, #508]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003792:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037ae:	601a      	str	r2, [r3, #0]
  return result;
 80037b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2301      	movs	r3, #1
 80037ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fdd4 	bl	800237c <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	e009      	b.n	80037ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fdcf 	bl	800237c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e144      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003812:	601a      	str	r2, [r3, #0]
  return result;
 8003814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003818:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800381c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_OscConfig+0xe2c>
 8003832:	4b54      	ldr	r3, [pc, #336]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e027      	b.n	8003888 <HAL_RCC_OscConfig+0xe7c>
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003858:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b3f      	ldr	r3, [pc, #252]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003890:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	fa92 f1a2 	rbit	r1, r2
 80038a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038ac:	6011      	str	r1, [r2, #0]
  return result;
 80038ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d082      	beq.n	80037da <HAL_RCC_OscConfig+0xdce>
 80038d4:	e0cf      	b.n	8003a76 <HAL_RCC_OscConfig+0x106a>
 80038d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	fa93 f2a3 	rbit	r2, r3
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038fa:	601a      	str	r2, [r3, #0]
  return result;
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003904:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003910:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fd2e 	bl	800237c <HAL_GetTick>
 8003920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	e009      	b.n	800393a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fd29 	bl	800237c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e09e      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003942:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800395e:	601a      	str	r2, [r3, #0]
  return result;
 8003960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003964:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d104      	bne.n	8003988 <HAL_RCC_OscConfig+0xf7c>
 800397e:	4b01      	ldr	r3, [pc, #4]	@ (8003984 <HAL_RCC_OscConfig+0xf78>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e029      	b.n	80039d8 <HAL_RCC_OscConfig+0xfcc>
 8003984:	40021000 	.word	0x40021000
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	fa93 f2a3 	rbit	r2, r3
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_RCC_OscConfig+0x1078>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	fa92 f1a2 	rbit	r1, r2
 80039f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039fc:	6011      	str	r1, [r2, #0]
  return result;
 80039fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d180      	bne.n	8003926 <HAL_RCC_OscConfig+0xf1a>
 8003a24:	e027      	b.n	8003a76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01e      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <HAL_RCC_OscConfig+0x1078>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09e      	sub	sp, #120	@ 0x78
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e162      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b90      	ldr	r3, [pc, #576]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	498b      	ldr	r1, [pc, #556]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b89      	ldr	r3, [pc, #548]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e14a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b82      	ldr	r3, [pc, #520]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	497f      	ldr	r1, [pc, #508]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80dc 	beq.w	8003cb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d13c      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xf6>
 8003b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xa6>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	e00f      	b.n	8003b4e <HAL_RCC_ClockConfig+0xc6>
 8003b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4a:	4b67      	ldr	r3, [pc, #412]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b56:	fa92 f2a2 	rbit	r2, r2
 8003b5a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d17b      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0f3      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d13c      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x178>
 8003b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x128>
 8003baa:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e00f      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
 8003bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bcc:	4b46      	ldr	r3, [pc, #280]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13a      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b2      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
 8003c00:	2302      	movs	r3, #2
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1a0>
 8003c22:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	e00d      	b.n	8003c44 <HAL_RCC_ClockConfig+0x1bc>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	4b29      	ldr	r3, [pc, #164]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	61ba      	str	r2, [r7, #24]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	617a      	str	r2, [r7, #20]
  return result;
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f042 0220 	orr.w	r2, r2, #32
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f002 021f 	and.w	r2, r2, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e079      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	491a      	ldr	r1, [pc, #104]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fe fb7a 	bl	800237c <HAL_GetTick>
 8003c88:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe fb76 	bl	800237c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e061      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d214      	bcs.n	8003cec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4906      	ldr	r1, [pc, #24]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <HAL_RCC_ClockConfig+0x25c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e040      	b.n	8003d66 <HAL_RCC_ClockConfig+0x2de>
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	491a      	ldr	r1, [pc, #104]	@ (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d16:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4912      	ldr	r1, [pc, #72]	@ (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d2a:	f000 f829 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d2e:	4601      	mov	r1, r0
 8003d30:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <HAL_RCC_ClockConfig+0x2e8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d38:	22f0      	movs	r2, #240	@ 0xf0
 8003d3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	fa92 f2a2 	rbit	r2, r2
 8003d42:	60fa      	str	r2, [r7, #12]
  return result;
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	40d3      	lsrs	r3, r2
 8003d4e:	4a09      	ldr	r2, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x2ec>)
 8003d50:	5cd3      	ldrb	r3, [r2, r3]
 8003d52:	fa21 f303 	lsr.w	r3, r1, r3
 8003d56:	4a08      	ldr	r2, [pc, #32]	@ (8003d78 <HAL_RCC_ClockConfig+0x2f0>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <HAL_RCC_ClockConfig+0x2f4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fac8 	bl	80022f4 <HAL_InitTick>
  
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3778      	adds	r7, #120	@ 0x78
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08006848 	.word	0x08006848
 8003d78:	2000003c 	.word	0x2000003c
 8003d7c:	20000040 	.word	0x20000040

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x30>
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dae:	e026      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db2:	613b      	str	r3, [r7, #16]
      break;
 8003db4:	e026      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003dc4:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e00:	613b      	str	r3, [r7, #16]
      break;
 8003e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e04:	693b      	ldr	r3, [r7, #16]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	007a1200 	.word	0x007a1200
 8003e1c:	08006860 	.word	0x08006860
 8003e20:	08006870 	.word	0x08006870
 8003e24:	003d0900 	.word	0x003d0900

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000003c 	.word	0x2000003c

08003e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e46:	f7ff ffef 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003e58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	fa92 f2a2 	rbit	r2, r2
 8003e60:	603a      	str	r2, [r7, #0]
  return result;
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	fab2 f282 	clz	r2, r2
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	40d3      	lsrs	r3, r2
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08006858 	.word	0x08006858

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e8a:	f7ff ffcd 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e8e:	4601      	mov	r1, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003e98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	fa92 f2a2 	rbit	r2, r2
 8003ea4:	603a      	str	r2, [r7, #0]
  return result;
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	fab2 f282 	clz	r2, r2
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	40d3      	lsrs	r3, r2
 8003eb0:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	08006858 	.word	0x08006858

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	@ 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80cd 	beq.w	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eec:	4b86      	ldr	r3, [pc, #536]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b83      	ldr	r3, [pc, #524]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4a82      	ldr	r2, [pc, #520]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	61d3      	str	r3, [r2, #28]
 8003f04:	4b80      	ldr	r3, [pc, #512]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b7d      	ldr	r3, [pc, #500]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b7a      	ldr	r3, [pc, #488]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a79      	ldr	r2, [pc, #484]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fa25 	bl	800237c <HAL_GetTick>
 8003f32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fe fa21 	bl	800237c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	@ 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0db      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b70      	ldr	r3, [pc, #448]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d07d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d076      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f72:	4b65      	ldr	r3, [pc, #404]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b5e      	ldr	r3, [pc, #376]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b55      	ldr	r3, [pc, #340]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fc4:	4a50      	ldr	r2, [pc, #320]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d045      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f9d2 	bl	800237c <HAL_GetTick>
 8003fd8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f9ce 	bl	800237c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e086      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	2302      	movs	r3, #2
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	61fb      	str	r3, [r7, #28]
  return result;
 800400a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d102      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004020:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	e007      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004026:	2302      	movs	r3, #2
 8004028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	4b35      	ldr	r3, [pc, #212]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2202      	movs	r2, #2
 8004038:	613a      	str	r2, [r7, #16]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	fa92 f2a2 	rbit	r2, r2
 8004040:	60fa      	str	r2, [r7, #12]
  return result;
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f002 021f 	and.w	r2, r2, #31
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0bd      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004060:	4b29      	ldr	r3, [pc, #164]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4926      	ldr	r1, [pc, #152]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800406e:	4313      	orrs	r3, r2
 8004070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004072:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4a22      	ldr	r2, [pc, #136]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004084:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004092:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	491a      	ldr	r1, [pc, #104]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b0:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	f023 0210 	bic.w	r2, r3, #16
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4912      	ldr	r1, [pc, #72]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	490b      	ldr	r1, [pc, #44]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	4903      	ldr	r1, [pc, #12]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3748      	adds	r7, #72	@ 0x48
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	40007000 	.word	0x40007000
 8004110:	10908100 	.word	0x10908100

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e049      	b.n	80041ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fefe 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fb1a 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e049      	b.n	8004268 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fd fe87 	bl	8001efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fac3 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <HAL_TIM_PWM_Start+0x24>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e03c      	b.n	800430e <HAL_TIM_PWM_Start+0x9e>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b04      	cmp	r3, #4
 8004298:	d109      	bne.n	80042ae <HAL_TIM_PWM_Start+0x3e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	e02f      	b.n	800430e <HAL_TIM_PWM_Start+0x9e>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d109      	bne.n	80042c8 <HAL_TIM_PWM_Start+0x58>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e022      	b.n	800430e <HAL_TIM_PWM_Start+0x9e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d109      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x72>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e015      	b.n	800430e <HAL_TIM_PWM_Start+0x9e>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x8c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_TIM_PWM_Start+0x9e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e088      	b.n	8004428 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0xb6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004324:	e023      	b.n	800436e <HAL_TIM_PWM_Start+0xfe>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Start+0xc6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004334:	e01b      	b.n	800436e <HAL_TIM_PWM_Start+0xfe>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xd6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	e013      	b.n	800436e <HAL_TIM_PWM_Start+0xfe>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0xe6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004354:	e00b      	b.n	800436e <HAL_TIM_PWM_Start+0xfe>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b10      	cmp	r3, #16
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xf6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004364:	e003      	b.n	800436e <HAL_TIM_PWM_Start+0xfe>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fd32 	bl	8004de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2b      	ldr	r2, [pc, #172]	@ (8004430 <HAL_TIM_PWM_Start+0x1c0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_TIM_PWM_Start+0x134>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2a      	ldr	r2, [pc, #168]	@ (8004434 <HAL_TIM_PWM_Start+0x1c4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_TIM_PWM_Start+0x134>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a28      	ldr	r2, [pc, #160]	@ (8004438 <HAL_TIM_PWM_Start+0x1c8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIM_PWM_Start+0x134>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a27      	ldr	r2, [pc, #156]	@ (800443c <HAL_TIM_PWM_Start+0x1cc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_PWM_Start+0x138>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_TIM_PWM_Start+0x13a>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004430 <HAL_TIM_PWM_Start+0x1c0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x176>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d0:	d009      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x176>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004440 <HAL_TIM_PWM_Start+0x1d0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x176>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <HAL_TIM_PWM_Start+0x1c4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d115      	bne.n	8004412 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <HAL_TIM_PWM_Start+0x1d4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d015      	beq.n	8004424 <HAL_TIM_PWM_Start+0x1b4>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fe:	d011      	beq.n	8004424 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	e008      	b.n	8004424 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e000      	b.n	8004426 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	40000400 	.word	0x40000400
 8004444:	00010007 	.word	0x00010007

08004448 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fcc0 	bl	8004de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3b      	ldr	r2, [pc, #236]	@ (8004554 <HAL_TIM_PWM_Stop+0x10c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIM_PWM_Stop+0x40>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3a      	ldr	r2, [pc, #232]	@ (8004558 <HAL_TIM_PWM_Stop+0x110>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIM_PWM_Stop+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a38      	ldr	r2, [pc, #224]	@ (800455c <HAL_TIM_PWM_Stop+0x114>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_PWM_Stop+0x40>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <HAL_TIM_PWM_Stop+0x118>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_TIM_PWM_Stop+0x44>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_TIM_PWM_Stop+0x46>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	f241 1311 	movw	r3, #4369	@ 0x1111
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_TIM_PWM_Stop+0x7a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
 80044a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_PWM_Stop+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_TIM_PWM_Stop+0xaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_PWM_Stop+0xaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Stop+0xba>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004500:	e023      	b.n	800454a <HAL_TIM_PWM_Stop+0x102>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Stop+0xca>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004510:	e01b      	b.n	800454a <HAL_TIM_PWM_Stop+0x102>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Stop+0xda>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Stop+0x102>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Stop+0xea>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004530:	e00b      	b.n	800454a <HAL_TIM_PWM_Stop+0x102>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Stop+0xfa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004540:	e003      	b.n	800454a <HAL_TIM_PWM_Stop+0x102>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800457e:	2302      	movs	r3, #2
 8004580:	e0ff      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b14      	cmp	r3, #20
 800458e:	f200 80f0 	bhi.w	8004772 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004773 	.word	0x08004773
 80045a0:	08004773 	.word	0x08004773
 80045a4:	08004773 	.word	0x08004773
 80045a8:	0800462d 	.word	0x0800462d
 80045ac:	08004773 	.word	0x08004773
 80045b0:	08004773 	.word	0x08004773
 80045b4:	08004773 	.word	0x08004773
 80045b8:	0800466f 	.word	0x0800466f
 80045bc:	08004773 	.word	0x08004773
 80045c0:	08004773 	.word	0x08004773
 80045c4:	08004773 	.word	0x08004773
 80045c8:	080046af 	.word	0x080046af
 80045cc:	08004773 	.word	0x08004773
 80045d0:	08004773 	.word	0x08004773
 80045d4:	08004773 	.word	0x08004773
 80045d8:	080046f1 	.word	0x080046f1
 80045dc:	08004773 	.word	0x08004773
 80045e0:	08004773 	.word	0x08004773
 80045e4:	08004773 	.word	0x08004773
 80045e8:	08004731 	.word	0x08004731
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f94e 	bl	8004894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
      break;
 800462a:	e0a5      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f9b4 	bl	80049a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]
      break;
 800466c:	e084      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fa13 	bl	8004aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0208 	orr.w	r2, r2, #8
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
      break;
 80046ac:	e064      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fa71 	bl	8004b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e043      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fab4 	bl	8004c64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0208 	orr.w	r2, r2, #8
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800472e:	e023      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 faf2 	bl	8004d20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	021a      	lsls	r2, r3, #8
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004770:	e002      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
      break;
 8004776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop

0800478c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a38      	ldr	r2, [pc, #224]	@ (8004880 <TIM_Base_SetConfig+0xf4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x28>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x28>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a35      	ldr	r2, [pc, #212]	@ (8004884 <TIM_Base_SetConfig+0xf8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004880 <TIM_Base_SetConfig+0xf4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <TIM_Base_SetConfig+0x6a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d4:	d00f      	beq.n	80047f6 <TIM_Base_SetConfig+0x6a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <TIM_Base_SetConfig+0xf8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_Base_SetConfig+0x6a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <TIM_Base_SetConfig+0xfc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_Base_SetConfig+0x6a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a28      	ldr	r2, [pc, #160]	@ (800488c <TIM_Base_SetConfig+0x100>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_Base_SetConfig+0x6a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a27      	ldr	r2, [pc, #156]	@ (8004890 <TIM_Base_SetConfig+0x104>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a14      	ldr	r2, [pc, #80]	@ (8004880 <TIM_Base_SetConfig+0xf4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <TIM_Base_SetConfig+0xc0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <TIM_Base_SetConfig+0xfc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_Base_SetConfig+0xc0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a13      	ldr	r2, [pc, #76]	@ (800488c <TIM_Base_SetConfig+0x100>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0xc0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a12      	ldr	r2, [pc, #72]	@ (8004890 <TIM_Base_SetConfig+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
  }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40000400 	.word	0x40000400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f023 0201 	bic.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0302 	bic.w	r3, r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a28      	ldr	r2, [pc, #160]	@ (8004990 <TIM_OC1_SetConfig+0xfc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_OC1_SetConfig+0x78>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a27      	ldr	r2, [pc, #156]	@ (8004994 <TIM_OC1_SetConfig+0x100>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_OC1_SetConfig+0x78>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a26      	ldr	r2, [pc, #152]	@ (8004998 <TIM_OC1_SetConfig+0x104>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC1_SetConfig+0x78>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a25      	ldr	r2, [pc, #148]	@ (800499c <TIM_OC1_SetConfig+0x108>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10c      	bne.n	8004926 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0308 	bic.w	r3, r3, #8
 8004912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f023 0304 	bic.w	r3, r3, #4
 8004924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a19      	ldr	r2, [pc, #100]	@ (8004990 <TIM_OC1_SetConfig+0xfc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_OC1_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <TIM_OC1_SetConfig+0x100>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_OC1_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <TIM_OC1_SetConfig+0x104>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_OC1_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a16      	ldr	r2, [pc, #88]	@ (800499c <TIM_OC1_SetConfig+0x108>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f023 0210 	bic.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a24      	ldr	r2, [pc, #144]	@ (8004a90 <TIM_OC2_SetConfig+0xf0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <TIM_OC2_SetConfig+0xf0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_OC2_SetConfig+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <TIM_OC2_SetConfig+0xf4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_OC2_SetConfig+0xa0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <TIM_OC2_SetConfig+0xf8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC2_SetConfig+0xa0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	@ (8004a9c <TIM_OC2_SetConfig+0xfc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d113      	bne.n	8004a68 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a46:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a4e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	40014800 	.word	0x40014800

08004aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a23      	ldr	r2, [pc, #140]	@ (8004b8c <TIM_OC3_SetConfig+0xec>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10d      	bne.n	8004b1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1a      	ldr	r2, [pc, #104]	@ (8004b8c <TIM_OC3_SetConfig+0xec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_OC3_SetConfig+0x9e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <TIM_OC3_SetConfig+0xf0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_OC3_SetConfig+0x9e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <TIM_OC3_SetConfig+0xf4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC3_SetConfig+0x9e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <TIM_OC3_SetConfig+0xf8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d113      	bne.n	8004b66 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800

08004b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a16      	ldr	r2, [pc, #88]	@ (8004c54 <TIM_OC4_SetConfig+0xb8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00b      	beq.n	8004c18 <TIM_OC4_SetConfig+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <TIM_OC4_SetConfig+0xbc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_OC4_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a14      	ldr	r2, [pc, #80]	@ (8004c5c <TIM_OC4_SetConfig+0xc0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC4_SetConfig+0x7c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a13      	ldr	r2, [pc, #76]	@ (8004c60 <TIM_OC4_SetConfig+0xc4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d109      	bne.n	8004c2c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	@ (8004d10 <TIM_OC5_SetConfig+0xac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00b      	beq.n	8004cd6 <TIM_OC5_SetConfig+0x72>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a14      	ldr	r2, [pc, #80]	@ (8004d14 <TIM_OC5_SetConfig+0xb0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <TIM_OC5_SetConfig+0x72>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <TIM_OC5_SetConfig+0xb4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_OC5_SetConfig+0x72>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <TIM_OC5_SetConfig+0xb8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d109      	bne.n	8004cea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800

08004d20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	051b      	lsls	r3, r3, #20
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a16      	ldr	r2, [pc, #88]	@ (8004dd0 <TIM_OC6_SetConfig+0xb0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_OC6_SetConfig+0x74>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a15      	ldr	r2, [pc, #84]	@ (8004dd4 <TIM_OC6_SetConfig+0xb4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_OC6_SetConfig+0x74>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <TIM_OC6_SetConfig+0xb8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC6_SetConfig+0x74>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	@ (8004ddc <TIM_OC6_SetConfig+0xbc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d109      	bne.n	8004da8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	029b      	lsls	r3, r3, #10
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	401a      	ands	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d109      	bne.n	8004e50 <HAL_TIMEx_PWMN_Start+0x24>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e022      	b.n	8004e96 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d109      	bne.n	8004e6a <HAL_TIMEx_PWMN_Start+0x3e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	bf14      	ite	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	2300      	moveq	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	e015      	b.n	8004e96 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d109      	bne.n	8004e84 <HAL_TIMEx_PWMN_Start+0x58>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e008      	b.n	8004e96 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e05f      	b.n	8004f5e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIMEx_PWMN_Start+0x82>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eac:	e013      	b.n	8004ed6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIMEx_PWMN_Start+0x92>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ebc:	e00b      	b.n	8004ed6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIMEx_PWMN_Start+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ecc:	e003      	b.n	8004ed6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2204      	movs	r2, #4
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f98e 	bl	8005200 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <HAL_TIMEx_PWMN_Start+0x13c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_TIMEx_PWMN_Start+0xf0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f06:	d009      	beq.n	8004f1c <HAL_TIMEx_PWMN_Start+0xf0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_TIMEx_PWMN_Start+0x140>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIMEx_PWMN_Start+0xf0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <HAL_TIMEx_PWMN_Start+0x144>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d115      	bne.n	8004f48 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <HAL_TIMEx_PWMN_Start+0x148>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b06      	cmp	r3, #6
 8004f2c:	d015      	beq.n	8004f5a <HAL_TIMEx_PWMN_Start+0x12e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d011      	beq.n	8004f5a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	e008      	b.n	8004f5a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e000      	b.n	8004f5c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	00010007 	.word	0x00010007

08004f78 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f938 	bl	8005200 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10f      	bne.n	8004ff0 <HAL_TIMEx_PWMN_Stop+0x78>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIMEx_PWMN_Stop+0x78>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_TIMEx_PWMN_Stop+0x88>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffe:	e013      	b.n	8005028 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b04      	cmp	r3, #4
 8005004:	d104      	bne.n	8005010 <HAL_TIMEx_PWMN_Stop+0x98>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800500e:	e00b      	b.n	8005028 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b08      	cmp	r3, #8
 8005014:	d104      	bne.n	8005020 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800501e:	e003      	b.n	8005028 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e054      	b.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a24      	ldr	r2, [pc, #144]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800507c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b4:	d009      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a11      	ldr	r2, [pc, #68]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10c      	bne.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40000400 	.word	0x40000400
 800510c:	40014000 	.word	0x40014000

08005110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005128:	2302      	movs	r3, #2
 800512a:	e060      	b.n	80051ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d115      	bne.n	80051dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	051b      	lsls	r3, r3, #20
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00

08005200 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	2204      	movs	r2, #4
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	43db      	mvns	r3, r3
 8005222:	401a      	ands	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	431a      	orrs	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e040      	b.n	80052de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fc ff37 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2224      	movs	r2, #36	@ 0x24
 8005276:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fd07 	bl	8005ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fbce 	bl	8005a38 <UART_SetConfig>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01b      	b.n	80052de <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fd86 	bl	8005de8 <UART_CheckIdleState>
 80052dc:	4603      	mov	r3, r0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b08b      	sub	sp, #44	@ 0x2c
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d147      	bne.n	800538e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_UART_Transmit_IT+0x22>
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e040      	b.n	8005390 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	@ 0x21
 8005336:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005340:	d107      	bne.n	8005352 <HAL_UART_Transmit_IT+0x6a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <HAL_UART_Transmit_IT+0xb4>)
 800534e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005350:	e002      	b.n	8005358 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <HAL_UART_Transmit_IT+0xb8>)
 8005356:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	61bb      	str	r3, [r7, #24]
   return(result);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	372c      	adds	r7, #44	@ 0x2c
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	0800634b 	.word	0x0800634b
 80053a0:	08006295 	.word	0x08006295

080053a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	@ 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d132      	bne.n	8005422 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Receive_IT+0x24>
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e02b      	b.n	8005424 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d018      	beq.n	8005412 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	613b      	str	r3, [r7, #16]
   return(result);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	61bb      	str	r3, [r7, #24]
   return(result);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	461a      	mov	r2, r3
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fdfb 	bl	8006014 <UART_Start_Receive_IT>
 800541e:	4603      	mov	r3, r0
 8005420:	e000      	b.n	8005424 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	@ 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ba      	sub	sp, #232	@ 0xe8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005456:	f640 030f 	movw	r3, #2063	@ 0x80f
 800545a:	4013      	ands	r3, r2
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d115      	bne.n	8005494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 82ab 	beq.w	80059e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
      }
      return;
 8005492:	e2a5      	b.n	80059e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8117 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80054ae:	4b85      	ldr	r3, [pc, #532]	@ (80056c4 <HAL_UART_IRQHandler+0x298>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 810a 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d011      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2202      	movs	r2, #2
 8005506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550e:	f043 0204 	orr.w	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d011      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
 8005524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2204      	movs	r2, #4
 8005536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d017      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557a:	f043 0208 	orr.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8211 	beq.w	80059e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fdc6 	bl	80061a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d141      	bne.n	80056a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800567a:	4a13      	ldr	r2, [pc, #76]	@ (80056c8 <HAL_UART_IRQHandler+0x29c>)
 800567c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc fff9 	bl	800267a <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d017      	beq.n	80056be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00f      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9b4 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00b      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9b0 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e007      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9ac 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80056bc:	e192      	b.n	80059e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056be:	bf00      	nop
    return;
 80056c0:	e190      	b.n	80059e4 <HAL_UART_IRQHandler+0x5b8>
 80056c2:	bf00      	nop
 80056c4:	04000120 	.word	0x04000120
 80056c8:	08006269 	.word	0x08006269

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 814b 	bne.w	800596c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8144 	beq.w	800596c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 813d 	beq.w	800596c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2210      	movs	r2, #16
 80056f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b40      	cmp	r3, #64	@ 0x40
 8005706:	f040 80b5 	bne.w	8005874 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8164 	beq.w	80059e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 815c 	bcs.w	80059e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b20      	cmp	r3, #32
 8005742:	f000 8086 	beq.w	8005852 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800575e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005770:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005774:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800577c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1da      	bne.n	8005746 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e1      	bne.n	8005790 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005834:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005836:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800583a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e4      	bne.n	8005812 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584c:	4618      	mov	r0, r3
 800584e:	f7fc fed6 	bl	80025fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005864:	b29b      	uxth	r3, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	b29b      	uxth	r3, r3
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8d7 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005872:	e0b9      	b.n	80059e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005880:	b29b      	uxth	r3, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80ab 	beq.w	80059ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005896:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e4      	bne.n	80058a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	623b      	str	r3, [r7, #32]
   return(result);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e3      	bne.n	80058d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0310 	bic.w	r3, r3, #16
 8005936:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	617b      	str	r3, [r7, #20]
   return(result);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e4      	bne.n	8005922 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f85b 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596a:	e03f      	b.n	80059ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <HAL_UART_IRQHandler+0x56a>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800598c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 ff0d 	bl	80067ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005994:	e02d      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01c      	beq.n	80059f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    }
    return;
 80059be:	e017      	b.n	80059f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d012      	beq.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fd16 	bl	800640a <UART_EndTransmit_IT>
    return;
 80059de:	e008      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059e0:	bf00      	nop
 80059e2:	e006      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80059e4:	bf00      	nop
 80059e6:	e004      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80059f0:	bf00      	nop
  }

}
 80059f2:	37e8      	adds	r7, #232	@ 0xe8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b8a      	ldr	r3, [pc, #552]	@ (8005c8c <UART_SetConfig+0x254>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a78      	ldr	r2, [pc, #480]	@ (8005c90 <UART_SetConfig+0x258>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d120      	bne.n	8005af6 <UART_SetConfig+0xbe>
 8005ab4:	4b77      	ldr	r3, [pc, #476]	@ (8005c94 <UART_SetConfig+0x25c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d817      	bhi.n	8005af0 <UART_SetConfig+0xb8>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <UART_SetConfig+0x90>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005aeb 	.word	0x08005aeb
 8005ad4:	08005adf 	.word	0x08005adf
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e01d      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e01a      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e017      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005aea:	2308      	movs	r3, #8
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e014      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005af0:	2310      	movs	r3, #16
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e011      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a67      	ldr	r2, [pc, #412]	@ (8005c98 <UART_SetConfig+0x260>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d102      	bne.n	8005b06 <UART_SetConfig+0xce>
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e009      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a64      	ldr	r2, [pc, #400]	@ (8005c9c <UART_SetConfig+0x264>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <UART_SetConfig+0xde>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e001      	b.n	8005b1a <UART_SetConfig+0xe2>
 8005b16:	2310      	movs	r3, #16
 8005b18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b22:	d15a      	bne.n	8005bda <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005b24:	7ffb      	ldrb	r3, [r7, #31]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d827      	bhi.n	8005b7a <UART_SetConfig+0x142>
 8005b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <UART_SetConfig+0xf8>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b7b 	.word	0x08005b7b
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b7b 	.word	0x08005b7b
 8005b48:	08005b7b 	.word	0x08005b7b
 8005b4c:	08005b7b 	.word	0x08005b7b
 8005b50:	08005b73 	.word	0x08005b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fe f974 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8005b58:	61b8      	str	r0, [r7, #24]
        break;
 8005b5a:	e013      	b.n	8005b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5c:	f7fe f992 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005b60:	61b8      	str	r0, [r7, #24]
        break;
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b64:	4b4e      	ldr	r3, [pc, #312]	@ (8005ca0 <UART_SetConfig+0x268>)
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e00c      	b.n	8005b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6a:	f7fe f909 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8005b6e:	61b8      	str	r0, [r7, #24]
        break;
 8005b70:	e008      	b.n	8005b84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e004      	b.n	8005b84 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	77bb      	strb	r3, [r7, #30]
        break;
 8005b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d074      	beq.n	8005c74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d916      	bls.n	8005bd4 <UART_SetConfig+0x19c>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bac:	d212      	bcs.n	8005bd4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f023 030f 	bic.w	r3, r3, #15
 8005bb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	89fa      	ldrh	r2, [r7, #14]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e04f      	b.n	8005c74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	77bb      	strb	r3, [r7, #30]
 8005bd8:	e04c      	b.n	8005c74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d828      	bhi.n	8005c32 <UART_SetConfig+0x1fa>
 8005be0:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <UART_SetConfig+0x1b0>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe f918 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8005c10:	61b8      	str	r0, [r7, #24]
        break;
 8005c12:	e013      	b.n	8005c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe f936 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005c18:	61b8      	str	r0, [r7, #24]
        break;
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ca0 <UART_SetConfig+0x268>)
 8005c1e:	61bb      	str	r3, [r7, #24]
        break;
 8005c20:	e00c      	b.n	8005c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe f8ad 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8005c26:	61b8      	str	r0, [r7, #24]
        break;
 8005c28:	e008      	b.n	8005c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c2e:	61bb      	str	r3, [r7, #24]
        break;
 8005c30:	e004      	b.n	8005c3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	77bb      	strb	r3, [r7, #30]
        break;
 8005c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	085a      	lsrs	r2, r3, #1
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d909      	bls.n	8005c70 <UART_SetConfig+0x238>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c62:	d205      	bcs.n	8005c70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e001      	b.n	8005c74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c80:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	efff69f3 	.word	0xefff69f3
 8005c90:	40013800 	.word	0x40013800
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40004800 	.word	0x40004800
 8005ca0:	007a1200 	.word	0x007a1200

08005ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01a      	beq.n	8005dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da2:	d10a      	bne.n	8005dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b098      	sub	sp, #96	@ 0x60
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df8:	f7fc fac0 	bl	800237c <HAL_GetTick>
 8005dfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d12e      	bne.n	8005e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e14:	2200      	movs	r2, #0
 8005e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f88c 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d021      	beq.n	8005e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e6      	bne.n	8005e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e062      	b.n	8005f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d149      	bne.n	8005f0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e80:	2200      	movs	r2, #0
 8005e82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f856 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d03c      	beq.n	8005f0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e6      	bne.n	8005e92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ee4:	61fa      	str	r2, [r7, #28]
 8005ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e5      	bne.n	8005ec4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e011      	b.n	8005f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3758      	adds	r7, #88	@ 0x58
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f48:	e04f      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d04b      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fc fa13 	bl	800237c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e04e      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d037      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b80      	cmp	r3, #128	@ 0x80
 8005f7e:	d034      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d031      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d110      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f8ff 	bl	80061a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e029      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc4:	d111      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f8e5 	bl	80061a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e00f      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d0a0      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b097      	sub	sp, #92	@ 0x5c
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006046:	d10e      	bne.n	8006066 <UART_Start_Receive_IT+0x52>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <UART_Start_Receive_IT+0x48>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006056:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800605a:	e02d      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	22ff      	movs	r2, #255	@ 0xff
 8006060:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006064:	e028      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <UART_Start_Receive_IT+0x76>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <UART_Start_Receive_IT+0x6c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	22ff      	movs	r2, #255	@ 0xff
 800607a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800607e:	e01b      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	227f      	movs	r2, #127	@ 0x7f
 8006084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006088:	e016      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006092:	d10d      	bne.n	80060b0 <UART_Start_Receive_IT+0x9c>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <UART_Start_Receive_IT+0x92>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	227f      	movs	r2, #127	@ 0x7f
 80060a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060a4:	e008      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	223f      	movs	r2, #63	@ 0x3f
 80060aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060ae:	e003      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	@ 0x22
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	657b      	str	r3, [r7, #84]	@ 0x54
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80060ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80060f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006104:	d107      	bne.n	8006116 <UART_Start_Receive_IT+0x102>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a21      	ldr	r2, [pc, #132]	@ (8006198 <UART_Start_Receive_IT+0x184>)
 8006112:	669a      	str	r2, [r3, #104]	@ 0x68
 8006114:	e002      	b.n	800611c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a20      	ldr	r2, [pc, #128]	@ (800619c <UART_Start_Receive_IT+0x188>)
 800611a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d019      	beq.n	8006158 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
 8006144:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <UART_Start_Receive_IT+0x110>
 8006156:	e018      	b.n	800618a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	613b      	str	r3, [r7, #16]
   return(result);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f043 0320 	orr.w	r3, r3, #32
 800616c:	653b      	str	r3, [r7, #80]	@ 0x50
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	69f9      	ldr	r1, [r7, #28]
 800617c:	6a3a      	ldr	r2, [r7, #32]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	61bb      	str	r3, [r7, #24]
   return(result);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	375c      	adds	r7, #92	@ 0x5c
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	08006607 	.word	0x08006607
 800619c:	0800645f 	.word	0x0800645f

080061a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b095      	sub	sp, #84	@ 0x54
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006212:	2b01      	cmp	r3, #1
 8006214:	d118      	bne.n	8006248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	60bb      	str	r3, [r7, #8]
   return(result);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	647b      	str	r3, [r7, #68]	@ 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	613b      	str	r3, [r7, #16]
   return(result);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800625c:	bf00      	nop
 800625e:	3754      	adds	r7, #84	@ 0x54
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fbc0 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b08f      	sub	sp, #60	@ 0x3c
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a0:	2b21      	cmp	r3, #33	@ 0x21
 80062a2:	d14c      	bne.n	800633e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d132      	bne.n	8006316 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e6      	bne.n	80062b0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6979      	ldr	r1, [r7, #20]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	613b      	str	r3, [r7, #16]
   return(result);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e6      	bne.n	80062e2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006314:	e013      	b.n	800633e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800633e:	bf00      	nop
 8006340:	373c      	adds	r7, #60	@ 0x3c
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800634a:	b480      	push	{r7}
 800634c:	b091      	sub	sp, #68	@ 0x44
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006356:	2b21      	cmp	r3, #33	@ 0x21
 8006358:	d151      	bne.n	80063fe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d132      	bne.n	80063cc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	623b      	str	r3, [r7, #32]
   return(result);
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800637a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30
 8006386:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800638a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e6      	bne.n	8006366 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	617b      	str	r3, [r7, #20]
   return(result);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e6      	bne.n	8006398 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80063ca:	e018      	b.n	80063fe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063de:	b292      	uxth	r2, r2
 80063e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063e6:	1c9a      	adds	r2, r3, #2
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80063fe:	bf00      	nop
 8006400:	3744      	adds	r7, #68	@ 0x44
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b088      	sub	sp, #32
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6979      	ldr	r1, [r7, #20]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	613b      	str	r3, [r7, #16]
   return(result);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fad1 	bl	80059f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006456:	bf00      	nop
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b09c      	sub	sp, #112	@ 0x70
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800646c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006476:	2b22      	cmp	r3, #34	@ 0x22
 8006478:	f040 80b9 	bne.w	80065ee <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006482:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006486:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800648a:	b2d9      	uxtb	r1, r3
 800648c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006496:	400a      	ands	r2, r1
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 809c 	bne.w	80065fe <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006518:	647a      	str	r2, [r7, #68]	@ 0x44
 800651a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800651e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	623b      	str	r3, [r7, #32]
   return(result);
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006562:	663b      	str	r3, [r7, #96]	@ 0x60
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800656c:	633b      	str	r3, [r7, #48]	@ 0x30
 800656e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006584:	2b01      	cmp	r3, #1
 8006586:	d12e      	bne.n	80065e6 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60fb      	str	r3, [r7, #12]
   return(result);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d103      	bne.n	80065d6 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2210      	movs	r2, #16
 80065d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fa1e 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065e4:	e00b      	b.n	80065fe <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb fc08 	bl	8001dfc <HAL_UART_RxCpltCallback>
}
 80065ec:	e007      	b.n	80065fe <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0208 	orr.w	r2, r2, #8
 80065fc:	619a      	str	r2, [r3, #24]
}
 80065fe:	bf00      	nop
 8006600:	3770      	adds	r7, #112	@ 0x70
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b09c      	sub	sp, #112	@ 0x70
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006614:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661e:	2b22      	cmp	r3, #34	@ 0x22
 8006620:	f040 80b9 	bne.w	8006796 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800662a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006634:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006638:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800663c:	4013      	ands	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006642:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 809c 	bne.w	80067a6 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800667c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006682:	667b      	str	r3, [r7, #100]	@ 0x64
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800668c:	657b      	str	r3, [r7, #84]	@ 0x54
 800668e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006692:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800669a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80066c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	61fb      	str	r3, [r7, #28]
   return(result);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800670a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006716:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800671a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e6      	bne.n	80066f6 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672c:	2b01      	cmp	r3, #1
 800672e:	d12e      	bne.n	800678e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60bb      	str	r3, [r7, #8]
   return(result);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6979      	ldr	r1, [r7, #20]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	613b      	str	r3, [r7, #16]
   return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e6      	bne.n	8006736 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b10      	cmp	r3, #16
 8006774:	d103      	bne.n	800677e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2210      	movs	r2, #16
 800677c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff f94a 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800678c:	e00b      	b.n	80067a6 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb fb34 	bl	8001dfc <HAL_UART_RxCpltCallback>
}
 8006794:	e007      	b.n	80067a6 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0208 	orr.w	r2, r2, #8
 80067a4:	619a      	str	r2, [r3, #24]
}
 80067a6:	bf00      	nop
 80067a8:	3770      	adds	r7, #112	@ 0x70
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <memset>:
 80067c2:	4402      	add	r2, r0
 80067c4:	4603      	mov	r3, r0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d100      	bne.n	80067cc <memset+0xa>
 80067ca:	4770      	bx	lr
 80067cc:	f803 1b01 	strb.w	r1, [r3], #1
 80067d0:	e7f9      	b.n	80067c6 <memset+0x4>
	...

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4d0d      	ldr	r5, [pc, #52]	@ (800680c <__libc_init_array+0x38>)
 80067d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006810 <__libc_init_array+0x3c>)
 80067da:	1b64      	subs	r4, r4, r5
 80067dc:	10a4      	asrs	r4, r4, #2
 80067de:	2600      	movs	r6, #0
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006814 <__libc_init_array+0x40>)
 80067e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006818 <__libc_init_array+0x44>)
 80067e8:	f000 f818 	bl	800681c <_init>
 80067ec:	1b64      	subs	r4, r4, r5
 80067ee:	10a4      	asrs	r4, r4, #2
 80067f0:	2600      	movs	r6, #0
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	08006880 	.word	0x08006880
 8006810:	08006880 	.word	0x08006880
 8006814:	08006880 	.word	0x08006880
 8006818:	08006884 	.word	0x08006884

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
