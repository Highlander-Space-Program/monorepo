
f401re-transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800225c  0800225c  0000325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002274  08002274  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002274  08002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800227c  0800227c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002280  08002280  00003280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002284  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002290  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002290  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000715c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012f2  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c5  00000000  00000000  0000cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014746  00000000  00000000  0000cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007530  00000000  00000000  000216db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000812e4  00000000  00000000  00028c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a0  00000000  00000000  000a9f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000ab7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002244 	.word	0x08002244

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002244 	.word	0x08002244

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <tick_on_button>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tick_on_button(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
    uint8_t current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80004ca:	2104      	movs	r1, #4
 80004cc:	4813      	ldr	r0, [pc, #76]	@ (800051c <tick_on_button+0x58>)
 80004ce:	f000 fd9d 	bl	800100c <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
    if (current_state && !prev_state) { // Button is pressed and was previously not pressed
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d017      	beq.n	800050c <tick_on_button+0x48>
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <tick_on_button+0x5c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d113      	bne.n	800050c <tick_on_button+0x48>
        messagebuffer[0] = 0x06;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <tick_on_button+0x60>)
 80004e6:	2206      	movs	r2, #6
 80004e8:	701a      	strb	r2, [r3, #0]
        messagebuffer[1] = 0xFF;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <tick_on_button+0x60>)
 80004ec:	22ff      	movs	r2, #255	@ 0xff
 80004ee:	705a      	strb	r2, [r3, #1]
        HAL_UART_Transmit(&huart1, messagebuffer, 2, 10); // Send message over UART
 80004f0:	230a      	movs	r3, #10
 80004f2:	2202      	movs	r2, #2
 80004f4:	490b      	ldr	r1, [pc, #44]	@ (8000524 <tick_on_button+0x60>)
 80004f6:	480c      	ldr	r0, [pc, #48]	@ (8000528 <tick_on_button+0x64>)
 80004f8:	f001 fabc 	bl	8001a74 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 80004fc:	2120      	movs	r1, #32
 80004fe:	480b      	ldr	r0, [pc, #44]	@ (800052c <tick_on_button+0x68>)
 8000500:	f000 fdb5 	bl	800106e <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 8000504:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000508:	f000 faf2 	bl	8000af0 <HAL_Delay>
    }
    prev_state = current_state;
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <tick_on_button+0x5c>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	7013      	strb	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020800 	.word	0x40020800
 8000520:	200000ba 	.word	0x200000ba
 8000524:	200000b8 	.word	0x200000b8
 8000528:	20000028 	.word	0x20000028
 800052c:	40020000 	.word	0x40020000

08000530 <tick_off_button>:

void tick_off_button(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
    uint8_t current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000536:	2108      	movs	r1, #8
 8000538:	4814      	ldr	r0, [pc, #80]	@ (800058c <tick_off_button+0x5c>)
 800053a:	f000 fd67 	bl	800100c <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    if (!current_state && prev_state) { // Button is released and was previously pressed
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d114      	bne.n	8000572 <tick_off_button+0x42>
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <tick_off_button+0x60>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d010      	beq.n	8000572 <tick_off_button+0x42>
        messagebuffer[0] = 0x00;
 8000550:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <tick_off_button+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
        messagebuffer[1] = 0x00;
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <tick_off_button+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	705a      	strb	r2, [r3, #1]
        HAL_UART_Transmit(&huart1, messagebuffer, 2, 10); // Send message over UART
 800055c:	230a      	movs	r3, #10
 800055e:	2202      	movs	r2, #2
 8000560:	490c      	ldr	r1, [pc, #48]	@ (8000594 <tick_off_button+0x64>)
 8000562:	480d      	ldr	r0, [pc, #52]	@ (8000598 <tick_off_button+0x68>)
 8000564:	f001 fa86 	bl	8001a74 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off the LED
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <tick_off_button+0x6c>)
 800056e:	f000 fd65 	bl	800103c <HAL_GPIO_WritePin>
    }
    prev_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000572:	2104      	movs	r1, #4
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <tick_off_button+0x5c>)
 8000576:	f000 fd49 	bl	800100c <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <tick_off_button+0x60>)
 8000580:	701a      	strb	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020800 	.word	0x40020800
 8000590:	200000ba 	.word	0x200000ba
 8000594:	200000b8 	.word	0x200000b8
 8000598:	20000028 	.word	0x20000028
 800059c:	40020000 	.word	0x40020000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa32 	bl	8000a0c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2120      	movs	r1, #32
 80005ac:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <main+0x30>)
 80005ae:	f000 fd45 	bl	800103c <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f80f 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8cd 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f8a1 	bl	8000700 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005be:	f000 f875 	bl	80006ac <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tick_on_button();
 80005c2:	f7ff ff7f 	bl	80004c4 <tick_on_button>
	  tick_off_button();
 80005c6:	f7ff ffb3 	bl	8000530 <tick_off_button>
	  tick_on_button();
 80005ca:	bf00      	nop
 80005cc:	e7f9      	b.n	80005c2 <main+0x22>
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fe02 	bl	80021ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000648:	2310      	movs	r3, #16
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fd20 	bl	80010a4 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 f8ed 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f000 ff82 	bl	8001594 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 f8d7 	bl	8000848 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <MX_USART1_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f001 f976 	bl	80019d4 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f8ab 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028
 80006fc:	40011000 	.word	0x40011000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 f94c 	bl	80019d4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f881 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000070 	.word	0x20000070
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b33      	ldr	r3, [pc, #204]	@ (800083c <MX_GPIO_Init+0xe8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a32      	ldr	r2, [pc, #200]	@ (800083c <MX_GPIO_Init+0xe8>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b30      	ldr	r3, [pc, #192]	@ (800083c <MX_GPIO_Init+0xe8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <MX_GPIO_Init+0xe8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a2b      	ldr	r2, [pc, #172]	@ (800083c <MX_GPIO_Init+0xe8>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b29      	ldr	r3, [pc, #164]	@ (800083c <MX_GPIO_Init+0xe8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b25      	ldr	r3, [pc, #148]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a24      	ldr	r2, [pc, #144]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_GPIO_Init+0xe8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <MX_GPIO_Init+0xec>)
 80007e0:	f000 fc2c 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_GPIO_Init+0xf0>)
 80007fc:	f000 fa82 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000800:	230c      	movs	r3, #12
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_GPIO_Init+0xf0>)
 8000814:	f000 fa76 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_GPIO_Init+0xec>)
 8000830:	f000 fa68 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000892:	2007      	movs	r0, #7
 8000894:	f000 fa02 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <HAL_UART_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12b      	bne.n	800091e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <HAL_UART_MspInit+0x8c>)
 800091a:	f000 f9f3 	bl	8000d04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40004400 	.word	0x40004400
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <NMI_Handler+0x4>

0800093c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 f891 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f001 fc09 	bl	80021fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fdd9 	bl	80005a0 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08002284 	.word	0x08002284
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	200000c0 	.word	0x200000c0

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f931 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff ff08 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f93b 	bl	8000cea <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a8c:	f000 f911 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200000bc 	.word	0x200000bc

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200000bc 	.word	0x200000bc

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e159      	b.n	8000fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8148 	bne.w	8000fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a2 	beq.w	8000fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b57      	ldr	r3, [pc, #348]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b54      	ldr	r3, [pc, #336]	@ (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a52      	ldr	r2, [pc, #328]	@ (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a49      	ldr	r2, [pc, #292]	@ (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x202>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_GPIO_Init+0x2f4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x1fe>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a47      	ldr	r2, [pc, #284]	@ (8000ffc <HAL_GPIO_Init+0x2f8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x1fa>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a46      	ldr	r2, [pc, #280]	@ (8001000 <HAL_GPIO_Init+0x2fc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1f6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a45      	ldr	r2, [pc, #276]	@ (8001004 <HAL_GPIO_Init+0x300>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x1f2>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f06:	2300      	movs	r3, #0
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	@ (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f74:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f aea2 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	4013      	ands	r3, r2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e001      	b.n	800102e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43d9      	mvns	r1, r3
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	400b      	ands	r3, r1
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e267      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d075      	beq.n	80011ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010c2:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b85      	ldr	r3, [pc, #532]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b82      	ldr	r3, [pc, #520]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4b7e      	ldr	r3, [pc, #504]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d05b      	beq.n	80011ac <HAL_RCC_OscConfig+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d157      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e242      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b76      	ldr	r3, [pc, #472]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a75      	ldr	r2, [pc, #468]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b70      	ldr	r3, [pc, #448]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6f      	ldr	r2, [pc, #444]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6d      	ldr	r3, [pc, #436]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6c      	ldr	r2, [pc, #432]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 800113c:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a68      	ldr	r2, [pc, #416]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b66      	ldr	r3, [pc, #408]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a65      	ldr	r2, [pc, #404]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fcbc 	bl	8000ad8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fcb8 	bl	8000ad8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e207      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fca8 	bl	8000ad8 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fca4 	bl	8000ad8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1f3      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0xe8>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ba:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c7      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3b      	ldr	r3, [pc, #236]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4937      	ldr	r1, [pc, #220]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc5d 	bl	8000ad8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fc59 	bl	8000ad8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a8      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4925      	ldr	r1, [pc, #148]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc3c 	bl	8000ad8 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc38 	bl	8000ad8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e187      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d036      	beq.n	80012fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fc1c 	bl	8000ad8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc18 	bl	8000ad8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e167      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x200>
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fc05 	bl	8000ad8 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc01 	bl	8000ad8 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e150      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ea      	bne.n	80012d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8097 	beq.w	8001438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b81      	ldr	r3, [pc, #516]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b7d      	ldr	r3, [pc, #500]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a7c      	ldr	r2, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b7a      	ldr	r3, [pc, #488]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b77      	ldr	r3, [pc, #476]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b74      	ldr	r3, [pc, #464]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a73      	ldr	r2, [pc, #460]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbc1 	bl	8000ad8 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fbbd 	bl	8000ad8 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e10c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x2ea>
 8001380:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a63      	ldr	r2, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x30c>
 8001396:	4b5f      	ldr	r3, [pc, #380]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5e      	ldr	r2, [pc, #376]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a57      	ldr	r2, [pc, #348]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a54      	ldr	r2, [pc, #336]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fb82 	bl	8000ad8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fb7e 	bl	8000ad8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0cb      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fb6c 	bl	8000ad8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fb68 	bl	8000ad8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0b5      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a1 	beq.w	8001584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d05c      	beq.n	8001508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d141      	bne.n	80014da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb3c 	bl	8000ad8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb38 	bl	8000ad8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e087      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	491b      	ldr	r1, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb11 	bl	8000ad8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb0d 	bl	8000ad8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e05c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x416>
 80014d8:	e054      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fafa 	bl	8000ad8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff faf6 	bl	8000ad8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e045      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
 8001506:	e03d      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e038      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x4ec>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d028      	beq.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d121      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	3b01      	subs	r3, #1
 800156a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fa28 	bl	8000ad8 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fa24 	bl	8000ad8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f988 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	0800225c 	.word	0x0800225c
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b094      	sub	sp, #80	@ 0x50
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80e1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e0db      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001798:	e0db      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b73      	ldr	r3, [pc, #460]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x208>)
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800179e:	e0d8      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6139      	str	r1, [r7, #16]
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	ebb2 0801 	subs.w	r8, r2, r1
 8001818:	4659      	mov	r1, fp
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	4623      	mov	r3, r4
 8001838:	eb18 0303 	adds.w	r3, r8, r3
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	462b      	mov	r3, r5
 8001840:	eb49 0303 	adc.w	r3, r9, r3
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001852:	4629      	mov	r1, r5
 8001854:	024b      	lsls	r3, r1, #9
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185c:	4621      	mov	r1, r4
 800185e:	024a      	lsls	r2, r1, #9
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001866:	2200      	movs	r2, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800186c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001870:	f7fe fcb0 	bl	80001d4 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800187c:	e058      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	4611      	mov	r1, r2
 800188a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
 8001894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001898:	4642      	mov	r2, r8
 800189a:	464b      	mov	r3, r9
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0159      	lsls	r1, r3, #5
 80018a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018aa:	0150      	lsls	r0, r2, #5
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4641      	mov	r1, r8
 80018b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b6:	4649      	mov	r1, r9
 80018b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d0:	ebb2 040a 	subs.w	r4, r2, sl
 80018d4:	eb63 050b 	sbc.w	r5, r3, fp
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4643      	mov	r3, r8
 80018ee:	18e3      	adds	r3, r4, r3
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	464b      	mov	r3, r9
 80018f4:	eb45 0303 	adc.w	r3, r5, r3
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	61fa      	str	r2, [r7, #28]
 8001920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001924:	f7fe fc56 	bl	80001d4 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001954:	4618      	mov	r0, r3
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	0800226c 	.word	0x0800226c

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	0800226c 	.word	0x0800226c

080019d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e042      	b.n	8001a6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe ff52 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f973 	bl	8001d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d175      	bne.n	8001b80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_UART_Transmit+0x2c>
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e06e      	b.n	8001b82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2221      	movs	r2, #33	@ 0x21
 8001aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ab2:	f7ff f811 	bl	8000ad8 <HAL_GetTick>
 8001ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001acc:	d108      	bne.n	8001ae0 <HAL_UART_Transmit+0x6c>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d104      	bne.n	8001ae0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e003      	b.n	8001ae8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ae8:	e02e      	b.n	8001b48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2200      	movs	r2, #0
 8001af2:	2180      	movs	r1, #128	@ 0x80
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f848 	bl	8001b8a <UART_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e03a      	b.n	8001b82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3302      	adds	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	e007      	b.n	8001b3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1cb      	bne.n	8001aea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f814 	bl	8001b8a <UART_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e006      	b.n	8001b82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e000      	b.n	8001b82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b80:	2302      	movs	r3, #2
  }
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9a:	e03b      	b.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ba2:	d037      	beq.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7fe ff98 	bl	8000ad8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	6a3a      	ldr	r2, [r7, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <UART_WaitOnFlagUntilTimeout+0x30>
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e03a      	b.n	8001c34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b80      	cmp	r3, #128	@ 0x80
 8001bd0:	d020      	beq.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b40      	cmp	r3, #64	@ 0x40
 8001bd6:	d01d      	beq.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d116      	bne.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f81d 	bl	8001c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2208      	movs	r2, #8
 8001c06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e00f      	b.n	8001c34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d0b4      	beq.n	8001b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b095      	sub	sp, #84	@ 0x54
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4e:	e853 3f00 	ldrex	r3, [r3]
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	330c      	adds	r3, #12
 8001c62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c64:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c6c:	e841 2300 	strex	r3, r2, [r1]
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e5      	bne.n	8001c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3314      	adds	r3, #20
 8001c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	e853 3f00 	ldrex	r3, [r3]
 8001c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3314      	adds	r3, #20
 8001c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca0:	e841 2300 	strex	r3, r2, [r1]
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e5      	bne.n	8001c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d119      	bne.n	8001ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	330c      	adds	r3, #12
 8001cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	e853 3f00 	ldrex	r3, [r3]
 8001cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f023 0310 	bic.w	r3, r3, #16
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cd4:	61ba      	str	r2, [r7, #24]
 8001cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	e841 2300 	strex	r3, r2, [r1]
 8001ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cf6:	bf00      	nop
 8001cf8:	3754      	adds	r7, #84	@ 0x54
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d08:	b0c0      	sub	sp, #256	@ 0x100
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	ea40 0301 	orr.w	r3, r0, r1
 8001d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d5c:	f021 010c 	bic.w	r1, r1, #12
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7e:	6999      	ldr	r1, [r3, #24]
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	ea40 0301 	orr.w	r3, r0, r1
 8001d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd0 <UART_SetConfig+0x2cc>)
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <UART_SetConfig+0xa0>
 8001d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd4 <UART_SetConfig+0x2d0>)
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d104      	bne.n	8001dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001da4:	f7ff fe02 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8001da8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001dac:	e003      	b.n	8001db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dae:	f7ff fde9 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8001db2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc0:	f040 810c 	bne.w	8001fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	462b      	mov	r3, r5
 8001dda:	1891      	adds	r1, r2, r2
 8001ddc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001dde:	415b      	adcs	r3, r3
 8001de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001de6:	4621      	mov	r1, r4
 8001de8:	eb12 0801 	adds.w	r8, r2, r1
 8001dec:	4629      	mov	r1, r5
 8001dee:	eb43 0901 	adc.w	r9, r3, r1
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e06:	4690      	mov	r8, r2
 8001e08:	4699      	mov	r9, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	eb18 0303 	adds.w	r3, r8, r3
 8001e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e14:	462b      	mov	r3, r5
 8001e16:	eb49 0303 	adc.w	r3, r9, r3
 8001e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e32:	460b      	mov	r3, r1
 8001e34:	18db      	adds	r3, r3, r3
 8001e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e38:	4613      	mov	r3, r2
 8001e3a:	eb42 0303 	adc.w	r3, r2, r3
 8001e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e48:	f7fe f9c4 	bl	80001d4 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4b61      	ldr	r3, [pc, #388]	@ (8001fd8 <UART_SetConfig+0x2d4>)
 8001e52:	fba3 2302 	umull	r2, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	011c      	lsls	r4, r3, #4
 8001e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	464b      	mov	r3, r9
 8001e70:	1891      	adds	r1, r2, r2
 8001e72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e74:	415b      	adcs	r3, r3
 8001e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e82:	4649      	mov	r1, r9
 8001e84:	eb43 0b01 	adc.w	fp, r3, r1
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e9c:	4692      	mov	sl, r2
 8001e9e:	469b      	mov	fp, r3
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eaa:	464b      	mov	r3, r9
 8001eac:	eb4b 0303 	adc.w	r3, fp, r3
 8001eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	18db      	adds	r3, r3, r3
 8001ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ece:	4613      	mov	r3, r2
 8001ed0:	eb42 0303 	adc.w	r3, r2, r3
 8001ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ede:	f7fe f979 	bl	80001d4 <__aeabi_uldivmod>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <UART_SetConfig+0x2d4>)
 8001eea:	fba3 2301 	umull	r2, r3, r3, r1
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2264      	movs	r2, #100	@ 0x64
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	1acb      	subs	r3, r1, r3
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001efe:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <UART_SetConfig+0x2d4>)
 8001f00:	fba3 2302 	umull	r2, r3, r3, r2
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f0c:	441c      	add	r4, r3
 8001f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f20:	4642      	mov	r2, r8
 8001f22:	464b      	mov	r3, r9
 8001f24:	1891      	adds	r1, r2, r2
 8001f26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f28:	415b      	adcs	r3, r3
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f30:	4641      	mov	r1, r8
 8001f32:	1851      	adds	r1, r2, r1
 8001f34:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f36:	4649      	mov	r1, r9
 8001f38:	414b      	adcs	r3, r1
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f48:	4659      	mov	r1, fp
 8001f4a:	00cb      	lsls	r3, r1, #3
 8001f4c:	4651      	mov	r1, sl
 8001f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f52:	4651      	mov	r1, sl
 8001f54:	00ca      	lsls	r2, r1, #3
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f64:	464b      	mov	r3, r9
 8001f66:	460a      	mov	r2, r1
 8001f68:	eb42 0303 	adc.w	r3, r2, r3
 8001f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f84:	460b      	mov	r3, r1
 8001f86:	18db      	adds	r3, r3, r3
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	eb42 0303 	adc.w	r3, r2, r3
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f9a:	f7fe f91b 	bl	80001d4 <__aeabi_uldivmod>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <UART_SetConfig+0x2d4>)
 8001fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	2164      	movs	r1, #100	@ 0x64
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	3332      	adds	r3, #50	@ 0x32
 8001fb6:	4a08      	ldr	r2, [pc, #32]	@ (8001fd8 <UART_SetConfig+0x2d4>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	f003 0207 	and.w	r2, r3, #7
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4422      	add	r2, r4
 8001fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fcc:	e106      	b.n	80021dc <UART_SetConfig+0x4d8>
 8001fce:	bf00      	nop
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001fee:	4642      	mov	r2, r8
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	1891      	adds	r1, r2, r2
 8001ff4:	6239      	str	r1, [r7, #32]
 8001ff6:	415b      	adcs	r3, r3
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ffe:	4641      	mov	r1, r8
 8002000:	1854      	adds	r4, r2, r1
 8002002:	4649      	mov	r1, r9
 8002004:	eb43 0501 	adc.w	r5, r3, r1
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	00eb      	lsls	r3, r5, #3
 8002012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002016:	00e2      	lsls	r2, r4, #3
 8002018:	4614      	mov	r4, r2
 800201a:	461d      	mov	r5, r3
 800201c:	4643      	mov	r3, r8
 800201e:	18e3      	adds	r3, r4, r3
 8002020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002024:	464b      	mov	r3, r9
 8002026:	eb45 0303 	adc.w	r3, r5, r3
 800202a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800203a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800204a:	4629      	mov	r1, r5
 800204c:	008b      	lsls	r3, r1, #2
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002054:	4621      	mov	r1, r4
 8002056:	008a      	lsls	r2, r1, #2
 8002058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800205c:	f7fe f8ba 	bl	80001d4 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <UART_SetConfig+0x4e4>)
 8002066:	fba3 2302 	umull	r2, r3, r3, r2
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	011c      	lsls	r4, r3, #4
 800206e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002072:	2200      	movs	r2, #0
 8002074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800207c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002080:	4642      	mov	r2, r8
 8002082:	464b      	mov	r3, r9
 8002084:	1891      	adds	r1, r2, r2
 8002086:	61b9      	str	r1, [r7, #24]
 8002088:	415b      	adcs	r3, r3
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	4641      	mov	r1, r8
 8002092:	1851      	adds	r1, r2, r1
 8002094:	6139      	str	r1, [r7, #16]
 8002096:	4649      	mov	r1, r9
 8002098:	414b      	adcs	r3, r1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a8:	4659      	mov	r1, fp
 80020aa:	00cb      	lsls	r3, r1, #3
 80020ac:	4651      	mov	r1, sl
 80020ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020b2:	4651      	mov	r1, sl
 80020b4:	00ca      	lsls	r2, r1, #3
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	4642      	mov	r2, r8
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020c4:	464b      	mov	r3, r9
 80020c6:	460a      	mov	r2, r1
 80020c8:	eb42 0303 	adc.w	r3, r2, r3
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020e8:	4649      	mov	r1, r9
 80020ea:	008b      	lsls	r3, r1, #2
 80020ec:	4641      	mov	r1, r8
 80020ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020f2:	4641      	mov	r1, r8
 80020f4:	008a      	lsls	r2, r1, #2
 80020f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020fa:	f7fe f86b 	bl	80001d4 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4611      	mov	r1, r2
 8002104:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <UART_SetConfig+0x4e4>)
 8002106:	fba3 2301 	umull	r2, r3, r3, r1
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2264      	movs	r2, #100	@ 0x64
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	1acb      	subs	r3, r1, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	3332      	adds	r3, #50	@ 0x32
 8002118:	4a33      	ldr	r2, [pc, #204]	@ (80021e8 <UART_SetConfig+0x4e4>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002124:	441c      	add	r4, r3
 8002126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800212a:	2200      	movs	r2, #0
 800212c:	673b      	str	r3, [r7, #112]	@ 0x70
 800212e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002134:	4642      	mov	r2, r8
 8002136:	464b      	mov	r3, r9
 8002138:	1891      	adds	r1, r2, r2
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	415b      	adcs	r3, r3
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002144:	4641      	mov	r1, r8
 8002146:	1851      	adds	r1, r2, r1
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	4649      	mov	r1, r9
 800214c:	414b      	adcs	r3, r1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800215c:	4659      	mov	r1, fp
 800215e:	00cb      	lsls	r3, r1, #3
 8002160:	4651      	mov	r1, sl
 8002162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002166:	4651      	mov	r1, sl
 8002168:	00ca      	lsls	r2, r1, #3
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	4603      	mov	r3, r0
 8002170:	4642      	mov	r2, r8
 8002172:	189b      	adds	r3, r3, r2
 8002174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002176:	464b      	mov	r3, r9
 8002178:	460a      	mov	r2, r1
 800217a:	eb42 0303 	adc.w	r3, r2, r3
 800217e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	663b      	str	r3, [r7, #96]	@ 0x60
 800218a:	667a      	str	r2, [r7, #100]	@ 0x64
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002198:	4649      	mov	r1, r9
 800219a:	008b      	lsls	r3, r1, #2
 800219c:	4641      	mov	r1, r8
 800219e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021a2:	4641      	mov	r1, r8
 80021a4:	008a      	lsls	r2, r1, #2
 80021a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021aa:	f7fe f813 	bl	80001d4 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <UART_SetConfig+0x4e4>)
 80021b4:	fba3 1302 	umull	r1, r3, r3, r2
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	2164      	movs	r1, #100	@ 0x64
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	3332      	adds	r3, #50	@ 0x32
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <UART_SetConfig+0x4e4>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4422      	add	r2, r4
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021e2:	46bd      	mov	sp, r7
 80021e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021e8:	51eb851f 	.word	0x51eb851f

080021ec <memset>:
 80021ec:	4402      	add	r2, r0
 80021ee:	4603      	mov	r3, r0
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d100      	bne.n	80021f6 <memset+0xa>
 80021f4:	4770      	bx	lr
 80021f6:	f803 1b01 	strb.w	r1, [r3], #1
 80021fa:	e7f9      	b.n	80021f0 <memset+0x4>

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	4d0d      	ldr	r5, [pc, #52]	@ (8002234 <__libc_init_array+0x38>)
 8002200:	4c0d      	ldr	r4, [pc, #52]	@ (8002238 <__libc_init_array+0x3c>)
 8002202:	1b64      	subs	r4, r4, r5
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	2600      	movs	r6, #0
 8002208:	42a6      	cmp	r6, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	4d0b      	ldr	r5, [pc, #44]	@ (800223c <__libc_init_array+0x40>)
 800220e:	4c0c      	ldr	r4, [pc, #48]	@ (8002240 <__libc_init_array+0x44>)
 8002210:	f000 f818 	bl	8002244 <_init>
 8002214:	1b64      	subs	r4, r4, r5
 8002216:	10a4      	asrs	r4, r4, #2
 8002218:	2600      	movs	r6, #0
 800221a:	42a6      	cmp	r6, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	f855 3b04 	ldr.w	r3, [r5], #4
 8002224:	4798      	blx	r3
 8002226:	3601      	adds	r6, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	f855 3b04 	ldr.w	r3, [r5], #4
 800222e:	4798      	blx	r3
 8002230:	3601      	adds	r6, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	0800227c 	.word	0x0800227c
 8002238:	0800227c 	.word	0x0800227c
 800223c:	0800227c 	.word	0x0800227c
 8002240:	08002280 	.word	0x08002280

08002244 <_init>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	bf00      	nop
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr

08002250 <_fini>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	bf00      	nop
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr
